========================= CLASS #1 =============================
(3) <3> {684} [822]: PHP File Formatting General For files that contain only PHP code, the closing tag (&quot;?&gt;&quot;) is never permitted.
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #2 =============================
(20) <20> {2463} [2516]: Class names may only contain alphanumeric characters.
(47) <47> {6234} [6317]: Variables Variable names may only contain alphanumeric characters.
*****************************************************************
========================= CLASS #3 =============================
(23) <23> {2818} [2940]: If a class name is comprised of more than one word, the first letter of each new word must be capitalized.
(36) <36> {4762} [4885]: When a function name consists of more than one word, the first letter of each new word must be capitalized.
*****************************************************************
========================= CLASS #4 =============================
(28) <28> {3615} [3770]: code written by a framework end-user and not Zend or one of the framework&#39;s partner companies, must never start with &quot;Zend_&quot;.
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #5 =============================
(32) <34> {4304} [4673]: These examples show the acceptable filenames for containing the class names from the examples in the section above: Functions and Methods Function names may only contain alphanumeric characters. Underscores are not permitted. Numbers are permitted in function names but are discouraged.
(47) <49> {6234} [6425]: Variables Variable names may only contain alphanumeric characters. Underscores are not permitted. Numbers are permitted in variable names but are discouraged.
*****************************************************************
========================= CLASS #6 =============================
(40) <40> {5155} [5388]: These are examples of acceptable names for functions: For object-oriented programming, accessors for objects should always be prefixed with either &quot;get&quot; or &quot;set&quot;.
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #7 =============================
(42) <46> {5640} [6220]: For methods on objects that are declared with the &quot;private&quot; or &quot;protected&quot; construct, the first character of the variable name must be a single underscore. This is the only acceptable usage of an underscore in a method name. Methods declared &quot;public&quot; may never start with an underscore. Functions in the global scope (&quot;floating functions&quot;) are permitted but discouraged. It is recommended that these functions should be wrapped in a static class.
(50) <54> {6456} [7102]: For class member variables that are declared with the &quot;private&quot; or &quot;protected&quot; construct, the first character of the variable name must be a single underscore. This is the only acceptable usage of an underscore in a variable name. Member variables declared &quot;public&quot; may never start with an underscore. Like function names (see section 3.3, above) variable names must always start with a lowercase letter and follow the &quot;camelCaps&quot; capitalization convention. Verbosity is encouraged.
*****************************************************************
========================= CLASS #8 =============================
(56) <56> {7155} [7301]: Terse variable names such as &quot;$i&quot; and &quot;$n&quot; are discouraged for anything other than the smallest loop contexts.
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #9 =============================
(68) <68> {8978} [9394]: This is especially encouraged for SQL statements: Variable Substitution Variable substitution is permitted using either of these two forms: For consistency, this form is not permitted: String Concatenation Strings may be concatenated using the &quot;.&quot; operator.
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #10 =============================
(69) <69> {9395} [9717]: A space must always be added before and after the &quot;.&quot; operator to improve readability: When concatenating strings with the &quot;.&quot; operator, it is permitted to break the statement into multiple lines to improve readability.
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #11 =============================
(70) <70> {9718} [10013]: In these cases, each successive line should be padded with whitespace such that the &quot;.&quot;; operator is aligned under the &quot;=&quot; operator: Arrays Numerically Indexed Arrays Negative numbers are not permitted as indices.
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #12 =============================
(75) <76> {11211} [11438]: The brace is always written on the line underneath the class name (&quot;one true brace&quot; form). Every class must have a documentation block that conforms to the PHPDocumentor standard.
(88) <89> {13015} [13284]: Like classes, the brace is always written on the line underneath the function name (&quot;one true brace&quot; form). There is no space between the function name and the opening parenthesis for the arguments.
*****************************************************************
========================= CLASS #13 =============================
(84) <84> {12294} [12450]: Member variables always declare their visibility by using one of the private , protected , or public constructs.
(87) <87> {12809} [12976]: Methods inside classes must always declare their visibility by using one of the private , protected , or public constructs.
*****************************************************************
========================= CLASS #14 =============================
(104) <104> {15581} [15938]: For &quot;if&quot; statements that include &quot;elseif&quot; or &quot;else&quot;, the formatting conventions are as shown in the following examples: Use of the &quot;elseif&quot; construct is permitted but highly discouraged in favor of the &quot;else if&quot; combination.
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #15 =============================
(115) <115> {17661} [18497]: Files Every file that contains PHP code must have a header block at the top of the file that contains these phpDocumentor tags at a minimum: Classes Every class must have a docblock that contains these phpDocumentor tags at a minimum: Functions Every function, including object methods, must have a docblock that contains at a minimum: A description of the function All of the arguments All of the possible return values It is not necessary to use the &quot;@access&quot; tag because the access level is already known from the &quot;public&quot;, &quot;private&quot;, or &quot;protected&quot; construct used to declare the function.
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #16 =============================
(124) <124> {19723} [19855]: If you anticipate working with the latest Zend Framework developments, consider using a Subversion (SVN) client.
(125) <125> {19894} [19928]: Using a Subversion (SVN) client.
*****************************************************************
========================= CLASS #17 =============================
(133) <133> {21432} [21600]: One of the Zend Framework&#39;s most useful features is its implementation of the Front Controller and Model-View-Controller (MVC) patterns.
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #18 =============================
(148) <149> {23173} [23370]: This can help guide you to know which extensions are required for your application. Not all extensions used by Zend Framework are required for every application.
(153) <154> {27869} [28066]: This can help guide you to know which extensions are required for your application. Not all extensions used by Zend Framework are required for every application.
*****************************************************************
========================= CLASS #19 =============================
(159) <159> {37440} [37682]: Because Zend_Acl is serializable, ACL objects may be serialized with PHP&#39;s serialize() function, and the results may be stored anywhere the developer should desire, such as a file, database, or caching mechanism.
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #20 =============================
(174) <174> {40253} [40517]: For the example CMS, it has been determined that whilst the &#39;staff&#39; group covers the needs of the vast majority of users, there is a need for a new &#39;marketing&#39; group that requires access to the newsletter and latest news in the CMS.
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #21 =============================
(176) <176> {40667} [40812]: In addition, it has also been requested that the &#39;staff&#39; group be allowed to view news stories but not to revise the latest news.
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #22 =============================
(177) <177> {40813} [40986]: Finally, it should be impossible for anyone (administrators included) to archive any &#39;announcement&#39; news stories since they only have a lifespan of 1-2 days.
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #23 =============================
(179) <179> {41065} [41459]: We have determined that the &#39;marketing&#39; group has the same basic permissions as &#39;staff&#39;, so we define &#39;marketing&#39; in such a way that it inherits permissions from &#39;staff&#39;: Next, note that the above access controls refer to specific Resources (e.g., &quot;newsletter&quot;, &quot;latest news&quot;, &quot;announcement news&quot;).
(379) <379> {79419} [79430]: the &#39; .
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #24 =============================
(189) <191> {43259} [43702]: Zend_Acl provides Zend_Acl_Resource_Interface to facilitate developers&#39; creating Resources. A class need only implement this interface, which consists of a single method, getResourceId() , in order for Zend_Acl to consider the object to be a Resource. Additionally, Zend_Acl_Resource is included with Zend_Acl as a basic Resource implementation for developers to extend where desirable.
(200) <202> {45147} [45566]: Zend_Acl provides Zend_Acl_Role_Interface to facilitate developers&#39; creating Roles. A class need only implement this interface, which consists of a single method, getRoleId() , in order for Zend_Acl to consider the object to be a Role. Additionally, Zend_Acl_Role is included with Zend_Acl as a basic Role implementation for developers to extend where desirable.
*****************************************************************
========================= CLASS #25 =============================
(194) <194> {44027} [44222]: Queries upon a specific Resource will automatically search the Resource&#39;s hierarchy for rules assigned to ancestor Resources, allowing for simple inheritance of rules.
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #26 =============================
(198) <198> {44806} [45054]: Zend_Acl also supports privileges upon Resources (e.g., &quot;create&quot;, &quot;read&quot;, &quot;update&quot;, &quot;delete&quot;), and the developer can assign rules that affect all privileges or specific privileges upon a Resource.
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #27 =============================
(205) <205> {45710} [45872]: For example, a user Role, such as &quot;sally&quot;, may belong to one or more parent Roles, such as &quot;editor&quot; and &quot;administrator&quot;.
(206) <206> {45873} [46111]: The developer can assign rules to &quot;editor&quot; and &quot;administrator&quot; separately, and &quot;sally&quot; would inherit such rules from both, without having to assign rules directly to &quot;sally&quot;.
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #28 =============================
(209) <209> {46383} [46601]: Multiple inheritance between Roles The following code defines three base Roles - &quot; guest &quot;, &quot; member &quot;, and &quot; admin &quot; - from which other Roles may inherit.
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #29 =============================
(212) <212> {46816} [47398]: When necessary, Zend_Acl searches for access rules defined not only for the queried Role (herein, &quot; someUser &quot;), but also upon the Roles from which the queried Role inherits (herein, &quot; guest &quot;, &quot; member &quot;, and &quot; admin &quot;): Since there is no rule specifically defined for the &quot; someUser &quot; Role and &quot; someResource &quot;, Zend_Acl must search for rules that may be defined for Roles that &quot; someUser &quot; inherits.
(213) <213> {47399} [47506]: First, the &quot; admin &quot; role is visited, and there is no access rule defined for it.
(214) <214> {47507} [47712]: Next, the &quot; member &quot; role is visited, and Zend_Acl finds that there is a rule specifying that &quot; member &quot; is allowed access to &quot; someResource &quot;.
(218) <218> {48367} [48549]: In this case, since the &quot; member &quot; Role is examined before the &quot; guest &quot; Role, the example code would print &quot; allowed &quot;.
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #30 =============================
(224) <224> {49534} [50097]: There may be a &#39;Guest&#39; group to allow limited access for demonstrations, a &#39;Staff&#39; group for the majority of CMS users who perform most of the day-to-day operations, an &#39;Editor&#39; group for those responsible for publishing, reviewing, archiving and deleting content, and finally an &#39;Administrator&#39; group whose tasks may include all of those of the other groups as well as maintenance of sensitive information, user management, back-end configuration data and backup/export.
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #31 =============================
(225) <225> {50098} [50326]: This set of permissions can be represented in a Role registry, allowing each group to inherit privileges from &#39;parent&#39; groups, as well as providing distinct privileges for their unique group only.
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #32 =============================
(266) <266> {58742} [58851]: Modifying the Session Namespace Zend_Auth_Storage_Session uses a session namespace of &#39;Zend_Auth&#39; .
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #33 =============================
(271) <271> {59674} [60872]: Using a Custom Storage Class In order to use an identity persistence storage class other than Zend_Auth_Storage_Session , a developer implements Zend_Auth_Storage_Interface : In order to use this custom storage class, Zend_Auth::setStorage() is invoked before an authentication query is attempted: Using Zend_Auth There are two provided ways to use Zend_Auth adapters: indirectly, through Zend_Auth::authenticate() directly, through the adapter&#39;s authenticate() method The following example illustrates how to use a Zend_Auth adapter indirectly, through the use of the Zend_Auth class: Once authentication has been attempted in a request, as in the above example, it is a simple matter to check whether a successfully authenticated identity exists: To remove an identity from persistent storage, simply use the clearIdentity() method.
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #34 =============================
(279) <279> {62312} [62430]: identityColumn : This is the name of the database table column used to represent the identity.
(281) <281> {62538} [62660]: credentialColumn : This is the name of the database table column used to represent the credential.
*****************************************************************
========================= CLASS #35 =============================
(285) <285> {63078} [63162]: By specifying a parameterized treatment string with this method, such as &#39;MD5(?
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #36 =============================
(286) <286> {63162} [63213]: )&#39; or &#39;PASSWORD(?
(379) <379> {79419} [79430]: the &#39; .
(516) <516> {105872} [106162]: Specify this backend using a word separator -- &#39;-&#39;, &#39;.&#39;, &#39; &#39;, or &#39;_&#39; -- between the words &#39;Zend&#39; and &#39;Platform&#39; when using the Zend_Cache::factory() method: There is no options for this backend.
(557) <557> {118176} [118352]: When specifying them to the factory, separate them using a word separator, such as a space (&#39; &#39;), hyphen (&#39;-&#39;), or period (&#39;.&#39;).
(841) <841> {161605} [161842]: Since controller and action names may contain word delimiter characters such as &#39;_&#39;, &#39;.&#39;, and &#39;-&#39;, render() normalizes these to &#39;-&#39; when determining the script name.
(1127) <1127> {208854} [209063]: Keys for this array may include any of the path specification keys (&#39;moduleDir&#39;, &#39;module&#39;, &#39;controller&#39;, &#39;action&#39;, and &#39;suffix&#39;).
(1130) <1130> {209461} [209589]: Word delimiters occurring in module, controller, or action names will be replaced with dashes (&#39;-&#39;).
(1384) <1384> {258950} [259162]: When writing URLs, the documented way to write camelCased action names is to use a word separator; these are &#39;.&#39; or &#39;-&#39; by default, but may be configured in the dispatcher.
(1468) <1468> {276407} [276582]: The above example contains three module controllers, &#39;Blog_IndexController&#39;, &#39;News_IndexController&#39;, and &#39;News_ListController&#39;.
(1514) <1514> {283848} [284068]: setErrorHandler() takes an associative array, which may contain any of the keys &#39;module&#39;, &#39;controller&#39;, or &#39;action&#39;, with which it will set the appropriate values.
(1682) <1682> {313565} [313665]: Each array element is an array with the keys &#39;name&#39; and &#39;value&#39;.
(1807) <1807> {334424} [334565]: There are three special variables which can be used in your routes - &#39;module&#39;, &#39;controller&#39; and &#39;action&#39;.
(1908) <1908> {348527} [348662]: For example is in english the &#39;,&#39; sign used as seperator for thousands, and in german the &#39;.&#39; sign.
(2620) <2620> {471798} [471950]: The argument can be an associative array containing any or all of the keys &#39; enabled &#39;, &#39; instance &#39;, and &#39; class &#39;.
(2621) <2621> {471951} [472079]: The &#39; enabled &#39; and &#39; instance &#39; keys correspond to the boolean and instance types documented above.
(2622) <2622> {472080} [472171]: The &#39; class &#39; key is used to name a class to use for a custom profiler.
(2625) <2625> {472293} [472394]: The &#39; class &#39; option is ignored when the &#39; instance &#39; option is supplied.
(3442) <3442> {604308} [604543]: For example, assuming the two rule names &#39;moduleDir&#39; and &#39;module&#39;, the &#39;moduleDir&#39; rule should appear before module since &#39;module&#39; is contained within &#39;moduleDir&#39;.
(3443) <3443> {604545} [604762]: If &#39;module&#39; were added before &#39;moduleDir&#39;, &#39;module&#39; will match part of &#39;moduleDir&#39; and process it leaving &#39;Dir&#39; inside of the target uninflected.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(4923) <4923> {871068} [871219]: This method takes the GET parameter&#39;s name as it&#39;s first parameter, and the GET parameter&#39;s value as it&#39;s second parameter.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
(5271) <5271> {933017} [933227]: Zend_Loader::loadFile() is used for loading, so the class name may only contain alphanumeric characters and the hyphen (&#39;-&#39;), underscore (&#39;_&#39;), and period (&#39;.&#39;).
(5306) <5306> {942379} [942548]: Currently, the only practical difference relates to the specifier for minutes (&#39;m&#39; using the ISO default, and &#39;i&#39; using the PHP date format).
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6063) <6063> {1054038} [1054080]: Memory container &#39;value&#39; property.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6857) <6857> {1163399} [1163474]: Java Lucene uses the &#39;contents&#39; field as a default field to search.
(6886) <6886> {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(6906) <6906> {1170604} [1170652]: &#39;-&#39; is used to define a prohibited term.
(6910) <6910> {1171156} [1171197]: false is used to define prohibited term.
(6919) <6919> {1172520} [1172572]: &#39;-&#39; is used to define a prohibited subquery.
(6923) <6923> {1173087} [1173132]: false is used to define prohibited subquery.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6945) <6945> {1176232} [1176326]: Thus: will search for the phrase &#39;zend framework&#39; in all fields.
(6946) <6946> {1176349} [1176391]: will search for the phrase &#39;zend ?????
(6947) <6947> {1176392} [1176569]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(7134) <7134> {1204150} [1204357]: Values specifically specified in the API include &#39;comment&#39;, &#39;trackback&#39;, &#39;pingback&#39;, and an empty string (&#39;&#39;), but it may be any value.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8262) <8262> {1380193} [1380335]: There are three supported tokens which can be used: A point &#39;.&#39;, a underline &#39;_&#39;, or a hyphen &#39;-&#39;.
(8266) <8266> {1380587} [1380724]: The first one is the point &#39;.&#39;, the second is the underline &#39;_&#39; and the third the hyphen &#39;-&#39;.
(8533) <8533> {1420110} [1420334]: Meta tags may be either of the &#39;http-equiv&#39; or &#39;name&#39; types, must contain a &#39;content&#39; attribute, and can also have either of the &#39;lang&#39; or &#39;scheme&#39; modifier attributes.
(8534) <8534> {1420349} [1420751]: The HeadMeta helper supports the following methods for setting and adding meta tags: The $keyValue item is used to define a value for the &#39;name&#39; or &#39;http-equiv&#39; key; $content is the value for the &#39;content&#39; key, and $modifiers is an optional associative array that can contain keys for &#39;lang&#39; and/or &#39;scheme&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8709) <8709> {1449161} [1449296]: You may also pass an associative array with the keys &#39;checked&#39; and &#39;unChecked&#39;.
*****************************************************************
========================= CLASS #37 =============================
(287) <287> {63213} [63314]: )&#39; , a developer may apply such arbitrary SQL upon input credential data.
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #38 =============================
(297) <297> {65907} [66106]: Depending on how you&#39;ve decided to explain your problem, it sometimes makes sense to solve what could look like an authorization problem within the authentication adapter.
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #39 =============================
(299) <301> {66374} [68049]: Digest Authentication Introduction Digest authentication is a method of HTTP authentication that improves upon Basic authentication by providing a way to authenticate without having to transmit the password in clear text across the network. This adapter allows authentication against text files containing lines having the basic elements of digest authentication: username, such as &quot; joe.user &quot; realm, such as &quot; MD5 hash of the username, realm, and password, separated by colons The above elements are separated by colons, as in the following example (in which the password is &quot; somePassword &quot;): Specifics The digest authentication adapter, Zend_Auth_Adapter_Digest , requires several input parameters: filename - Filename against which authentication queries are performed realm - Digest authentication realm username - Digest authentication user password - Password for the user of the realm These parameters must be set prior to calling authenticate() . Identity The digest authentication adapter returns a Zend_Auth_Result object, which has been populated with the identity as an array having keys of realm and username .
(304) <306> {68403} [68858]: Digest authentication is a method of HTTP authentication that improves upon Basic authentication by providing a way to authenticate without having to transmit the password in clear text across the network. Major Features: Supports both Basic and Digest authentication. Issues challenges in all supported schemes, so client can respond with any scheme it supports.
*****************************************************************
========================= CLASS #40 =============================
(313) <313> {69906} [70064]: It uses a Resolver to look up a client&#39;s identity in some data store (text file by default), and retrieve the credentials from the data store.
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #41 =============================
(317) <317> {70645} [70763]: Must be a space-separated list containing &#39;basic&#39; and/or &#39;digest&#39; .
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #42 =============================
(319) <320> {70945} [71221]: digest_domains Yes, when &#39;accept_schemes&#39; contains &#39;digest&#39; Space-separated list of URIs for which the same authentication information is valid. The URIs need not all point to the same server.
(321) <322> {71251} [71435]: nonce_timeout Yes, when &#39;accept_schemes&#39; contains &#39;digest&#39; Sets the number of seconds for which the nonce is valid. See notes below.
*****************************************************************
========================= CLASS #43 =============================
(326) <326> {71794} [71979]: This setting is supposed to determine the valid lifetime of a given nonce, or effectively how long a client&#39;s authentication information is accepted.
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #44 =============================
(327) <327> {71980} [72137]: Currently, if it&#39;s set to 3600 (for example), it will cause the adapter to prompt the client for new credentials every hour, on the hour.
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #45 =============================
(329) <329> {72265} [72385]: Resolvers The resolver&#39;s job is to take a username and realm, and return some kind of credential value.
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #46 =============================
(330) <330> {72386} [72492]: Basic authentication expects to receive the Base64 encoded version of the user&#39;s password.
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #47 =============================
(331) <331> {72493} [72638]: Digest authentication expects to receive a hash of the user&#39;s username, the realm, and their password (each separated by colons).
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #48 =============================
(341) <341> {73759} [73879]: In Basic authentication, the credentials field should be the Base64 encoding of the user&#39;s password.
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #49 =============================
(346) <346> {74392} [74570]: Next, create the Zend_Auth_Adapter_Http object: Since we&#39;re supporting both Basic and Digest authentication, we need two different resolver objects.
(379) <379> {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #50 =============================
(352) <352> {75598} [76102]: Usage To incorporate Zend_Auth_Adapter_Ldap authentication into your application quickly, even if you&#39;re not using Zend_Controller , the meat of your code should look something like the following: Zend_Auth_Adapter_Ldap will record just about every bit of information anyone could want in $messages (more below), which is a nice feature in itself for something that has a history of being notoriously difficult to debug.
(379) <379> {79419} [79430]: the &#39; .
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #51 =============================
(358) <358> {76539} [76630]: The names of the servers (e.g., server1 and server2 ) are largely arbitrary.
(377) <377> {79075} [79101]: The names of servers (e.g.
*****************************************************************
========================= CLASS #52 =============================
(378) <378> {79102} [79418]: &#39; server1 &#39; and &#39; server2 &#39; shown above) are largely arbitrary, but for the sake of using Zend_Config , the identifiers should be present (as opposed to being numeric indexes) and should not contain any special characters used by the associated file formats (e.g.
(379) <379> {79419} [79430]: the &#39; .
(516) <516> {105872} [106162]: Specify this backend using a word separator -- &#39;-&#39;, &#39;.&#39;, &#39; &#39;, or &#39;_&#39; -- between the words &#39;Zend&#39; and &#39;Platform&#39; when using the Zend_Cache::factory() method: There is no options for this backend.
(557) <557> {118176} [118352]: When specifying them to the factory, separate them using a word separator, such as a space (&#39; &#39;), hyphen (&#39;-&#39;), or period (&#39;.&#39;).
(841) <841> {161605} [161842]: Since controller and action names may contain word delimiter characters such as &#39;_&#39;, &#39;.&#39;, and &#39;-&#39;, render() normalizes these to &#39;-&#39; when determining the script name.
(1127) <1127> {208854} [209063]: Keys for this array may include any of the path specification keys (&#39;moduleDir&#39;, &#39;module&#39;, &#39;controller&#39;, &#39;action&#39;, and &#39;suffix&#39;).
(1130) <1130> {209461} [209589]: Word delimiters occurring in module, controller, or action names will be replaced with dashes (&#39;-&#39;).
(1384) <1384> {258950} [259162]: When writing URLs, the documented way to write camelCased action names is to use a word separator; these are &#39;.&#39; or &#39;-&#39; by default, but may be configured in the dispatcher.
(1468) <1468> {276407} [276582]: The above example contains three module controllers, &#39;Blog_IndexController&#39;, &#39;News_IndexController&#39;, and &#39;News_ListController&#39;.
(1514) <1514> {283848} [284068]: setErrorHandler() takes an associative array, which may contain any of the keys &#39;module&#39;, &#39;controller&#39;, or &#39;action&#39;, with which it will set the appropriate values.
(1682) <1682> {313565} [313665]: Each array element is an array with the keys &#39;name&#39; and &#39;value&#39;.
(1807) <1807> {334424} [334565]: There are three special variables which can be used in your routes - &#39;module&#39;, &#39;controller&#39; and &#39;action&#39;.
(1908) <1908> {348527} [348662]: For example is in english the &#39;,&#39; sign used as seperator for thousands, and in german the &#39;.&#39; sign.
(2620) <2620> {471798} [471950]: The argument can be an associative array containing any or all of the keys &#39; enabled &#39;, &#39; instance &#39;, and &#39; class &#39;.
(2621) <2621> {471951} [472079]: The &#39; enabled &#39; and &#39; instance &#39; keys correspond to the boolean and instance types documented above.
(2622) <2622> {472080} [472171]: The &#39; class &#39; key is used to name a class to use for a custom profiler.
(2625) <2625> {472293} [472394]: The &#39; class &#39; option is ignored when the &#39; instance &#39; option is supplied.
(3442) <3442> {604308} [604543]: For example, assuming the two rule names &#39;moduleDir&#39; and &#39;module&#39;, the &#39;moduleDir&#39; rule should appear before module since &#39;module&#39; is contained within &#39;moduleDir&#39;.
(3443) <3443> {604545} [604762]: If &#39;module&#39; were added before &#39;moduleDir&#39;, &#39;module&#39; will match part of &#39;moduleDir&#39; and process it leaving &#39;Dir&#39; inside of the target uninflected.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(4923) <4923> {871068} [871219]: This method takes the GET parameter&#39;s name as it&#39;s first parameter, and the GET parameter&#39;s value as it&#39;s second parameter.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
(5271) <5271> {933017} [933227]: Zend_Loader::loadFile() is used for loading, so the class name may only contain alphanumeric characters and the hyphen (&#39;-&#39;), underscore (&#39;_&#39;), and period (&#39;.&#39;).
(5306) <5306> {942379} [942548]: Currently, the only practical difference relates to the specifier for minutes (&#39;m&#39; using the ISO default, and &#39;i&#39; using the PHP date format).
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6063) <6063> {1054038} [1054080]: Memory container &#39;value&#39; property.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6857) <6857> {1163399} [1163474]: Java Lucene uses the &#39;contents&#39; field as a default field to search.
(6886) <6886> {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(6906) <6906> {1170604} [1170652]: &#39;-&#39; is used to define a prohibited term.
(6910) <6910> {1171156} [1171197]: false is used to define prohibited term.
(6919) <6919> {1172520} [1172572]: &#39;-&#39; is used to define a prohibited subquery.
(6923) <6923> {1173087} [1173132]: false is used to define prohibited subquery.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6945) <6945> {1176232} [1176326]: Thus: will search for the phrase &#39;zend framework&#39; in all fields.
(6946) <6946> {1176349} [1176391]: will search for the phrase &#39;zend ?????
(6947) <6947> {1176392} [1176569]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(7134) <7134> {1204150} [1204357]: Values specifically specified in the API include &#39;comment&#39;, &#39;trackback&#39;, &#39;pingback&#39;, and an empty string (&#39;&#39;), but it may be any value.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8262) <8262> {1380193} [1380335]: There are three supported tokens which can be used: A point &#39;.&#39;, a underline &#39;_&#39;, or a hyphen &#39;-&#39;.
(8266) <8266> {1380587} [1380724]: The first one is the point &#39;.&#39;, the second is the underline &#39;_&#39; and the third the hyphen &#39;-&#39;.
(8533) <8533> {1420110} [1420334]: Meta tags may be either of the &#39;http-equiv&#39; or &#39;name&#39; types, must contain a &#39;content&#39; attribute, and can also have either of the &#39;lang&#39; or &#39;scheme&#39; modifier attributes.
(8534) <8534> {1420349} [1420751]: The HeadMeta helper supports the following methods for setting and adding meta tags: The $keyValue item is used to define a value for the &#39;name&#39; or &#39;http-equiv&#39; key; $content is the value for the &#39;content&#39; key, and $modifiers is an optional associative array that can contain keys for &#39;lang&#39; and/or &#39;scheme&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8709) <8709> {1449161} [1449296]: You may also pass an associative array with the keys &#39;checked&#39; and &#39;unChecked&#39;.
*****************************************************************
========================= CLASS #53 =============================
(380) <380> {79431} [79523]: &#39; INI property separator, &#39; &amp; &#39; for XML entity references, etc).
(516) <516> {105872} [106162]: Specify this backend using a word separator -- &#39;-&#39;, &#39;.&#39;, &#39; &#39;, or &#39;_&#39; -- between the words &#39;Zend&#39; and &#39;Platform&#39; when using the Zend_Cache::factory() method: There is no options for this backend.
(557) <557> {118176} [118352]: When specifying them to the factory, separate them using a word separator, such as a space (&#39; &#39;), hyphen (&#39;-&#39;), or period (&#39;.&#39;).
(841) <841> {161605} [161842]: Since controller and action names may contain word delimiter characters such as &#39;_&#39;, &#39;.&#39;, and &#39;-&#39;, render() normalizes these to &#39;-&#39; when determining the script name.
(1014) <1014> {188874} [189245]: On the client end, your AJAX library will simply request the endpoints &#39;/comment/view&#39;, &#39;/comment/form&#39;, and &#39;/comment/process&#39;, and pass the &#39;format&#39; parameter: &#39;/comment/view/format/html&#39;, &#39;/comment/form/format/html&#39;, &#39;/comment/process/format/json&#39;.
(1127) <1127> {208854} [209063]: Keys for this array may include any of the path specification keys (&#39;moduleDir&#39;, &#39;module&#39;, &#39;controller&#39;, &#39;action&#39;, and &#39;suffix&#39;).
(1130) <1130> {209461} [209589]: Word delimiters occurring in module, controller, or action names will be replaced with dashes (&#39;-&#39;).
(1384) <1384> {258950} [259162]: When writing URLs, the documented way to write camelCased action names is to use a word separator; these are &#39;.&#39; or &#39;-&#39; by default, but may be configured in the dispatcher.
(1468) <1468> {276407} [276582]: The above example contains three module controllers, &#39;Blog_IndexController&#39;, &#39;News_IndexController&#39;, and &#39;News_ListController&#39;.
(1514) <1514> {283848} [284068]: setErrorHandler() takes an associative array, which may contain any of the keys &#39;module&#39;, &#39;controller&#39;, or &#39;action&#39;, with which it will set the appropriate values.
(1682) <1682> {313565} [313665]: Each array element is an array with the keys &#39;name&#39; and &#39;value&#39;.
(1807) <1807> {334424} [334565]: There are three special variables which can be used in your routes - &#39;module&#39;, &#39;controller&#39; and &#39;action&#39;.
(1908) <1908> {348527} [348662]: For example is in english the &#39;,&#39; sign used as seperator for thousands, and in german the &#39;.&#39; sign.
(2620) <2620> {471798} [471950]: The argument can be an associative array containing any or all of the keys &#39; enabled &#39;, &#39; instance &#39;, and &#39; class &#39;.
(2621) <2621> {471951} [472079]: The &#39; enabled &#39; and &#39; instance &#39; keys correspond to the boolean and instance types documented above.
(2622) <2622> {472080} [472171]: The &#39; class &#39; key is used to name a class to use for a custom profiler.
(2625) <2625> {472293} [472394]: The &#39; class &#39; option is ignored when the &#39; instance &#39; option is supplied.
(2899) <2899> {514234} [514422]: In the example PHP code above, the rule keys in the Bugs table class are: &#39;Reporter&#39; , &#39;Engineer&#39; , &#39;Verifier&#39; , and &#39;Product&#39; .
(2927) <2927> {518096} [518146]: This is the rule &#39;Reporter&#39; .
(2949) <2949> {521748} [521786]: This is the rule &#39;Reporter&#39; .
(2974) <2974> {525800} [525895]: In this case, $rule1 is &#39;Reporter&#39; and $rule2 is &#39;Product&#39; .
(3442) <3442> {604308} [604543]: For example, assuming the two rule names &#39;moduleDir&#39; and &#39;module&#39;, the &#39;moduleDir&#39; rule should appear before module since &#39;module&#39; is contained within &#39;moduleDir&#39;.
(3443) <3443> {604545} [604762]: If &#39;module&#39; were added before &#39;moduleDir&#39;, &#39;module&#39; will match part of &#39;moduleDir&#39; and process it leaving &#39;Dir&#39; inside of the target uninflected.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(4923) <4923> {871068} [871219]: This method takes the GET parameter&#39;s name as it&#39;s first parameter, and the GET parameter&#39;s value as it&#39;s second parameter.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
(5271) <5271> {933017} [933227]: Zend_Loader::loadFile() is used for loading, so the class name may only contain alphanumeric characters and the hyphen (&#39;-&#39;), underscore (&#39;_&#39;), and period (&#39;.&#39;).
(5306) <5306> {942379} [942548]: Currently, the only practical difference relates to the specifier for minutes (&#39;m&#39; using the ISO default, and &#39;i&#39; using the PHP date format).
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6063) <6063> {1054038} [1054080]: Memory container &#39;value&#39; property.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6857) <6857> {1163399} [1163474]: Java Lucene uses the &#39;contents&#39; field as a default field to search.
(6886) <6886> {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(6906) <6906> {1170604} [1170652]: &#39;-&#39; is used to define a prohibited term.
(6910) <6910> {1171156} [1171197]: false is used to define prohibited term.
(6919) <6919> {1172520} [1172572]: &#39;-&#39; is used to define a prohibited subquery.
(6923) <6923> {1173087} [1173132]: false is used to define prohibited subquery.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6945) <6945> {1176232} [1176326]: Thus: will search for the phrase &#39;zend framework&#39; in all fields.
(6946) <6946> {1176349} [1176391]: will search for the phrase &#39;zend ?????
(6947) <6947> {1176392} [1176569]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(7028) <7028> {1187232} [1187280]: operators &amp;&amp;, ||, and !
(7134) <7134> {1204150} [1204357]: Values specifically specified in the API include &#39;comment&#39;, &#39;trackback&#39;, &#39;pingback&#39;, and an empty string (&#39;&#39;), but it may be any value.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8262) <8262> {1380193} [1380335]: There are three supported tokens which can be used: A point &#39;.&#39;, a underline &#39;_&#39;, or a hyphen &#39;-&#39;.
(8266) <8266> {1380587} [1380724]: The first one is the point &#39;.&#39;, the second is the underline &#39;_&#39; and the third the hyphen &#39;-&#39;.
(8533) <8533> {1420110} [1420334]: Meta tags may be either of the &#39;http-equiv&#39; or &#39;name&#39; types, must contain a &#39;content&#39; attribute, and can also have either of the &#39;lang&#39; or &#39;scheme&#39; modifier attributes.
(8534) <8534> {1420349} [1420751]: The HeadMeta helper supports the following methods for setting and adding meta tags: The $keyValue item is used to define a value for the &#39;name&#39; or &#39;http-equiv&#39; key; $content is the value for the &#39;content&#39; key, and $modifiers is an optional associative array that can contain keys for &#39;lang&#39; and/or &#39;scheme&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8709) <8709> {1449161} [1449296]: You may also pass an associative array with the keys &#39;checked&#39; and &#39;unChecked&#39;.
*****************************************************************
========================= CLASS #54 =============================
(393) <393> {82015} [82039]: This option is required.
(415) <415> {85089} [85113]: This option is required.
*****************************************************************
========================= CLASS #55 =============================
(396) <401> {82219} [83167]: If useSsl is false , the default port value is 389. useSsl If true , this value indicates that the LDAP client should use SSL / TLS encrypted transport. A value of true is strongly favored in production environments to prevent passwords from be transmitted in clear text. The default value is false , as servers frequently require that a certificate be installed separately after installation. This value also changes the default port value (see port description above). username The DN of the account used to perform account DN lookups. LDAP servers that require the username to be in DN form when performing the &quot;bind&quot; require this option.
(5189) <5194> {919816} [920524]: useSsl Whether or not the LDAP client should use SSL / TLS encrypted transport. A value of true is strongly favored in production environments to prevent passwords from be transmitted in clear text. The default value is false , as servers frequently require that a certificate be installed separately after installation. username The default credentials username. Some servers require that this be in DN form. password The default credentials password (used only with username above).
*****************************************************************
========================= CLASS #56 =============================
(408) <408> {84320} [84373]: The default value is false .
(5196) <5196> {920751} [920808]: The default value is false .
*****************************************************************
========================= CLASS #57 =============================
(423) <423> {86548} [86689]: See the Account Name Canonicalization section in the Zend_Ldap documentation for details.
(5200) <5200> {921267} [921349]: See the Account Name Canonicalization section below.
*****************************************************************
========================= CLASS #58 =============================
(425) <425> {87275} [87434]: accountDomainName The FQDN domain name for which the target LDAP server is an authority (e.g., example.com ).
(5201) <5201> {921375} [921507]: accountDomainName The FQDN domain for which the target LDAP server is an authority (e.g., example.com).
*****************************************************************
========================= CLASS #59 =============================
(430) <430> {88265} [88427]: accountDomainNameShort The &#39;short&#39; domain for which the target LDAP server is an authority (e.g., FOO ).
(5202) <5202> {921533} [921661]: accountDomainNameShort The &#39;short&#39; domain for which the target LDAP server is an authority.
*****************************************************************
========================= CLASS #60 =============================
(432) <432> {88571} [88874]: This option should be used to specify the NetBIOS domain name for Windows networks but may also be used by non-AD servers (e.g., for consistency when multiple sets of server options with the backslash style accountCanonicalForm ).
(5203) <5203> {921662} [921834]: This is usually used to specify the NetBIOS domain name for Windows networks but may also be used by non-AD servers.
*****************************************************************
========================= CLASS #61 =============================
(434) <439> {89066} [90238]: accountFilterFormat The LDAP search filter used to search for accounts. This string is a printf() -style expression that must contain one &#39; %s &#39; to accomodate the username. The default value is &#39; (&amp;(objectClass=user)(sAMAccountName=%s)) &#39;, unless bindRequiresDn is set to true , in which case the default is &#39; (&amp;(objectClass=posixAccount)(uid=%s)) &#39;. For example, if for some reason you wanted to use If you enable ldap.conf (and restart the web server) to indicate to the OpenLDAP client library that you trust the server. Alternatively if you are concerned that the server could be spoofed, you can export the LDAP server&#39;s root certificate and put it on the web server so that the OpenLDAP client can validate the server&#39;s identity. Collecting Debugging Messages Zend_Auth_Adapter_Ldap collects debugging information within its authenticate() method.
(5204) <5209> {921860} [922946]: accountFilterFormat The LDAP search filter used to search for accounts. This string is a printf() style expression that must contain one &#39; %s &#39; to accomodate the username. The default value is &#39; (&amp;(objectClass=user)(sAMAccountName=%s)) &#39; unless bindRequiresDn is set to true , in which case the default is &#39; (&amp;(objectClass=posixAccount)(uid=%s)) &#39;. Users of custom schemas may need to change this option. Account Name Canonicalization The accountDomainName and accountDomainNameShort options are used for two purposes: (1) they facilitate multi-domain authentication and failover capability, and (2) they are also used to canonicalize usernames. Specifically, names are canonicalized to the form specified by the accountCanonicalForm option.
*****************************************************************
========================= CLASS #62 =============================
(442) <442> {90643} [90701]: If the authentication is successful, this string is empty.
(444) <444> {90914} [90996]: If the authentication is successful, this string is empty.
*****************************************************************
========================= CLASS #63 =============================
(447) <447> {91462} [91739]: Common Options for Specific Servers Options for Active Directory For ADS, the following options are noteworthy: Options for Active Directory Name Additional Notes host As with all servers, this option is required.
(449) <449> {91957} [92038]: baseDn As with all servers, this option is required.
*****************************************************************
========================= CLASS #64 =============================
(448) <448> {91765} [91931]: useSsl For the sake of security, this should be true if the server has the necessary certificate installed.
(461) <461> {94431} [94597]: useSsl For the sake of security, this should be true if the server has the necessary certificate installed.
*****************************************************************
========================= CLASS #65 =============================
(462) <462> {94623} [94789]: username Required and must be a DN, as OpenLDAP requires that usernames be in DN form when performing a bind.
(465) <465> {95088} [95262]: bindRequiresDn Required and must be true , as OpenLDAP requires that usernames be in DN form when performing a bind.
*****************************************************************
========================= CLASS #66 =============================
(468) <468> {95781} [96032]: For backslash style names use value 3. accountDomainName Required unless you&#39;re using accountCanonicalForm 2, which is not recommended.
(1647) <1647> {306876} [306923]: If it doesn&#39;t, an exception will be raised.
(1965) <1965> {355658} [355694]: In our case &#39;03.March.2000&#39;.
(5510) <5510> {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) <5514> {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #67 =============================
(478) <479> {97648} [97847]: Zend_OpenId takes advantage of the GMP extension , where available. Consider enabling the GMP extension for better performance when using Zend_Auth_Adapter_OpenId .
(6275) <6276> {1085007} [1085193]: Zend_OpenId takes advantage of the GMP extension , where available. Consider enabling the GMP extension for better performance when using Zend_OpenId .
*****************************************************************
========================= CLASS #68 =============================
(509) <510> {104212} [105309]: Be careful : with this backend, &quot;tags&quot; are not supported for the moment as the &quot;doNotTestCacheValidity=true&quot; argument. Available options are : Memcached backend options Option Data Type Default Value Description servers array An array of memcached servers ; each memcached server is described by an associative array : &#39;host&#39; =&gt; (string) : the name of the memcached server, &#39;port&#39; =&gt; (int) : the port of the memcached server, &#39;persistent&#39; =&gt; (bool) : use or not persistent connections to this memcached server compression boolean false true if you want to use on-the-fly compression Zend_Cache_Backend_Apc This backends stores cache records in shared memory through the APC (Alternative PHP Cache) extension (which is of course need for using this backend).
(511) <512> {105332} [105541]: Be careful : with this backend, &quot;tags&quot; are not supported for the moment as the &quot;doNotTestCacheValidity=true&quot; argument. There is no option for this backend.
*****************************************************************
========================= CLASS #69 =============================
(526) <526> {109053} [109394]: ignore_user_abort boolean false if set to true, the core will set the ignore_user_abort PHP flag inside the save() method to avoid cache corruptions in some cases Examples An example is given in the manual at the very beginning.
(530) <530> {110148} [110230]: Examples An example is given in the manual at the very beginning.
(3235) <3235> {568477} [568534]: You can do that with the save() method.
*****************************************************************
========================= CLASS #70 =============================
(527) <527> {109425} [109846]: If you store only strings into cache (because with &quot;automatic_serialization&quot; option, it&#39;s possible to store some booleans), you can use a more compact construction like: If you want to cache multiple blocks or data instances, the idea is the same: Zend_Cache_Frontend_Output Introduction Zend_Cache_Frontend_Output is an output-capturing frontend.
(3614) <3614> {632727} [632787]: The default value of this metacommand is &#39;optional&#39;.
(3629) <3629> {635311} [635360]: The default value of this metacommand is false .
(3636) <3636> {636819} [636868]: The default value of this metacommand is false .
*****************************************************************
========================= CLASS #71 =============================
(538) <538> {113001} [113095]: It&#39;s really interesting for examples in configuration or templates issues.
(1647) <1647> {306876} [306923]: If it doesn&#39;t, an exception will be raised.
(1965) <1965> {355658} [355694]: In our case &#39;03.March.2000&#39;.
(5510) <5510> {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) <5514> {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #72 =============================
(545) <545> {114261} [114363]: It&#39;s impossible to use Zend_Cache_Frontend_Page for caching only a single block.
(1647) <1647> {306876} [306923]: If it doesn&#39;t, an exception will be raised.
(1965) <1965> {355658} [355694]: In our case &#39;03.March.2000&#39;.
(5510) <5510> {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) <5514> {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #73 =============================
(546) <546> {114394} [114618]: On the other hand, the &quot;cache id&quot; is calculated automatically with $_SERVER[&#39;REQUEST_URI&#39;] and (depending on options) $_GET , $_POST , $_SESSION , $_COOKIE , $_FILES .
(782) <782> {150087} [150131]: This defaults to $_SERVER[&#39;argv&#39;] .
*****************************************************************
========================= CLASS #74 =============================
(549) <549> {115069} [117146]: Available options (for this frontend in Zend_Cache factory) Page frontend options Option Data Type Default Value Description http_conditional boolean false use the http_conditional system (not implemented for the moment) debug_header boolean false if true, a debug text is added before each cached pages default_options array an associative array of default options : $_GET array $_POST array $_SESSION array $_FILES array $_COOKIE array $_GET array $_POST array $_SESSION array $_FILES array $_COOKIE array regexps array array() an associative array to set options only for some REQUEST_URI, keys are (PCRE) regexps, values are associative arrays with specific options to set if the regexp matchs on $_SERVER[&#39;REQUEST_URI&#39;] (see default_options for the list of available options) ; if several regexps match the $_SERVER[&#39;REQUEST_URI&#39;], only the last one will be used Examples Use of Zend_Cache_Frontend_Page is really trivial : a more complex example which shows a way to get a centralized cache management in a bootstrap file (for using with Zend_Controller for example) Introduction Zend_Cache provides a generic way to cache any data.
(782) <782> {150087} [150131]: This defaults to $_SERVER[&#39;argv&#39;] .
*****************************************************************
========================= CLASS #75 =============================
(6948) <6950> {1176592} [1177008]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field. Zend_Search_Lucene_Search_Query_Phrase::addTerm() takes two arguments, a required Zend_Search_Lucene_Index_Term object and an optional position: The $term parameter describes the next term in the phrase. It must indicate the same field as previous terms, or an exception will be thrown.
(6955) <6957> {1177469} [1177758]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field. The slop factor sets the number of other words permitted between specified words in the query phrase. If set to zero, then the corresponding query is an exact phrase search.
*****************************************************************
========================= CLASS #76 =============================
(579) <579> {121219} [121375]: &#39;Cache hit&#39; is a term for a condition when a cache record is found, is valid and is &#39;fresh&#39; (in other words hasn&#39;t expired yet).
(6946) <6946> {1176349} [1176391]: will search for the phrase &#39;zend ?????
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #77 =============================
(587) <587> {122298} [122412]: When you save a cache with the save() method, you can set an array of tags to apply for this record.
(3235) <3235> {568477} [568534]: You can do that with the save() method.
*****************************************************************
========================= CLASS #78 =============================
(588) <588> {122413} [122965]: Then you will be able to clean all cache records tagged with a given tag (or tags): note than the save() method accepts an optional fourth argument : $specificLifetime (if != false, it sets a specific lifetime for this particular cache record) Cleaning the cache To remove/invalidate in particular cache id, you can use the remove() method : To remove/invalidate several cache ids in one operation, you can use the clean() method.
(3235) <3235> {568477} [568534]: You can do that with the save() method.
*****************************************************************
========================= CLASS #79 =============================
(589) <589> {122966} [123291]: For example to remove all cache records : If you want to remove cache entries matching the tags &#39;tagA&#39; and &#39;tagC&#39;: Available cleaning modes are: CLEANING_MODE_ALL , CLEANING_MODE_OLD , CLEANING_MODE_MATCHING_TAG and CLEANING_MODE_NOT_MATCHING_TAG .
(1127) <1127> {208854} [209063]: Keys for this array may include any of the path specification keys (&#39;moduleDir&#39;, &#39;module&#39;, &#39;controller&#39;, &#39;action&#39;, and &#39;suffix&#39;).
(1468) <1468> {276407} [276582]: The above example contains three module controllers, &#39;Blog_IndexController&#39;, &#39;News_IndexController&#39;, and &#39;News_ListController&#39;.
(1514) <1514> {283848} [284068]: setErrorHandler() takes an associative array, which may contain any of the keys &#39;module&#39;, &#39;controller&#39;, or &#39;action&#39;, with which it will set the appropriate values.
(1682) <1682> {313565} [313665]: Each array element is an array with the keys &#39;name&#39; and &#39;value&#39;.
(1807) <1807> {334424} [334565]: There are three special variables which can be used in your routes - &#39;module&#39;, &#39;controller&#39; and &#39;action&#39;.
(1908) <1908> {348527} [348662]: For example is in english the &#39;,&#39; sign used as seperator for thousands, and in german the &#39;.&#39; sign.
(2620) <2620> {471798} [471950]: The argument can be an associative array containing any or all of the keys &#39; enabled &#39;, &#39; instance &#39;, and &#39; class &#39;.
(2621) <2621> {471951} [472079]: The &#39; enabled &#39; and &#39; instance &#39; keys correspond to the boolean and instance types documented above.
(2622) <2622> {472080} [472171]: The &#39; class &#39; key is used to name a class to use for a custom profiler.
(2625) <2625> {472293} [472394]: The &#39; class &#39; option is ignored when the &#39; instance &#39; option is supplied.
(3422) <3422> {600699} [600774]: These are specified by prefixing with a &#39;:&#39;: :script .
(3434) <3434> {602702} [602874]: Placeholders take the form of an identifier, a colon (&#39;:&#39;) by default, followed by a variable name: &#39;:script&#39;, &#39;:path&#39;, etc.
(3442) <3442> {604308} [604543]: For example, assuming the two rule names &#39;moduleDir&#39; and &#39;module&#39;, the &#39;moduleDir&#39; rule should appear before module since &#39;module&#39; is contained within &#39;moduleDir&#39;.
(3443) <3443> {604545} [604762]: If &#39;module&#39; were added before &#39;moduleDir&#39;, &#39;module&#39; will match part of &#39;moduleDir&#39; and process it leaving &#39;Dir&#39; inside of the target uninflected.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(4126) <4126> {733825} [733942]: You can specify the class to use with the tag with the &#39;class&#39; option or by calling setClass() .
(4923) <4923> {871068} [871219]: This method takes the GET parameter&#39;s name as it&#39;s first parameter, and the GET parameter&#39;s value as it&#39;s second parameter.
(5101) <5101> {903958} [904118]: :suffix&#39;; &#39;:script&#39; is passed the registered layout name, while &#39;:suffix&#39; is a static rule of the inflector.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6063) <6063> {1054038} [1054080]: Memory container &#39;value&#39; property.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6857) <6857> {1163399} [1163474]: Java Lucene uses the &#39;contents&#39; field as a default field to search.
(6886) <6886> {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6947) <6947> {1176392} [1176569]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(7134) <7134> {1204150} [1204357]: Values specifically specified in the API include &#39;comment&#39;, &#39;trackback&#39;, &#39;pingback&#39;, and an empty string (&#39;&#39;), but it may be any value.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8266) <8266> {1380587} [1380724]: The first one is the point &#39;.&#39;, the second is the underline &#39;_&#39; and the third the hyphen &#39;-&#39;.
(8533) <8533> {1420110} [1420334]: Meta tags may be either of the &#39;http-equiv&#39; or &#39;name&#39; types, must contain a &#39;content&#39; attribute, and can also have either of the &#39;lang&#39; or &#39;scheme&#39; modifier attributes.
(8534) <8534> {1420349} [1420751]: The HeadMeta helper supports the following methods for setting and adding meta tags: The $keyValue item is used to define a value for the &#39;name&#39; or &#39;http-equiv&#39; key; $content is the value for the &#39;content&#39; key, and $modifiers is an optional associative array that can contain keys for &#39;lang&#39; and/or &#39;scheme&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8709) <8709> {1449161} [1449296]: You may also pass an associative array with the keys &#39;checked&#39; and &#39;unChecked&#39;.
*****************************************************************
========================= CLASS #80 =============================
(633) <639> {129808} [130879]: In this example there are configuration data for both a production system and for a staging system. Because the staging system configuration data are very similar to those for production, the staging section inherits from the production section. In this case, the decision is arbitrary and could have been written conversely, with the production section inheriting from the staging section, though this may not be the case for more complex situations. Suppose, then, that the following configuration data are contained in /path/to/config.ini : Next, assume that the application developer needs the staging configuration data from the INI file. It is a simple matter to load these data by specifying the INI file and the staging section: Zend_Config_Ini Constructor parameters Parameter Notes $filename The INI file to load. $section The [section] within the ini file that is to be loaded. Setting this parameter to null will load all sections.
(653) <659> {132427} [133795]: In this example there are configuration data for both a production system and for a staging system. Because the staging system configuration data are very similar to those for production, the staging section inherits from the production section. In this case, the decision is arbitrary and could have been written conversely, with the production section inheriting from the staging section, though this may not be the case for more complex situations. Suppose, then, that the following configuration data are contained in /path/to/config.xml : Next, assume that the application developer needs the staging configuration data from the XML file. It is a simple matter to load these data by specifying the XML file and the staging section: Configuring Zend_Console_Getopt Adding Option Rules You can add more option rules in addition to those you specified in the Zend_Console_Getopt constructor, using the addRules() method. The argument to addRules() is the same as the first argument to the class constructor. It is either a string in the format of the short syntax options specification, or else an associative array in the format of a long syntax options specification.
*****************************************************************
========================= CLASS #81 =============================
(644) <644> {131233} [131440]: Defaults to &quot;.&quot; Zend_Config_Xml Zend_Config_Xml enables developers to store configuration data in a simple XML format and read them via nested object property syntax.
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #82 =============================
(666) <666> {134853} [134978]: The setHelp() method is the only way to define help strings if you declared the options using the short syntax.
(675) <675> {135885} [136008]: The setAliases() method is the only way to define aliases if you declared the options using the short syntax.
*****************************************************************
========================= CLASS #83 =============================
(673) <673> {135561} [135763]: Using setAliases() In the example above, after declaring these aliases, &quot; -a &quot;, &quot; --apple &quot; and &quot; --apfel &quot; are aliases for each other.
(674) <674> {135776} [135862]: Also &quot; -p &quot; and &quot; --pear &quot; are aliases for each other.
(690) <690> {138459} [138568]: That is, &quot; -a &quot; and &quot; -A &quot; will be considered to be synonymous flags.
(789) <789> {150920} [151128]: Using the Short Syntax The example above shows using Zend_Console_Getopt to declare that options may be given as &quot; -a &quot;, &quot; -b &quot;, or &quot; -p &quot;.
(799) <799> {152831} [152924]: Using the Long Syntax In the example declaration above, there are three options.
(800) <800> {152937} [153054]: &quot; --apple &quot; and &quot; -a &quot; are aliases for each other, and the option takes no parameter.
(801) <801> {153067} [153202]: &quot; --banana &quot; and &quot; -b &quot; are aliases for each other, and the option takes a mandatory integer parameter.
(802) <802> {153215} [153359]: Finally, &quot; --pear &quot; and &quot; -p &quot; are aliases for each other, and the option may take an optional string parameter.
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #84 =============================
(676) <676> {136018} [136192]: Adding Argument Lists By default, Zend_Console_Getopt uses $_SERVER[&#39;argv&#39;] for the array of command-line arguments to parse.
(782) <782> {150087} [150131]: This defaults to $_SERVER[&#39;argv&#39;] .
*****************************************************************
========================= CLASS #85 =============================
(682) <682> {137034} [137213]: You can also specify configuration options using the setOptions() method, or you can set an individual option using the setOption() method.
(7954) <7954> {1341379} [1341434]: With the setOptions() method, you can set any option.
*****************************************************************
========================= CLASS #86 =============================
(702) <702> {139996} [140127]: The configuration values you specify are merged with the current configuration; you don&#39;t have to list all options.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #87 =============================
(748) <748> {145727} [145827]: For example, &quot; -c &quot; enables different features in grep , ls , and tar .
(8481) <8481> {1410777} [1410812]: For example, &quot;0.9.0beta&quot;.
*****************************************************************
========================= CLASS #88 =============================
(755) <755> {146549} [146674]: A flag is preceded conventionally by one or two dashes (&quot; - &quot; or &quot; -- &quot;).
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
(5258) <5258> {931394} [931544]: The $filename may only contain alphanumeric characters, dashes (&quot;-&quot;), underscores (&quot;_&quot;), or periods (&quot;.&quot;).
*****************************************************************
========================= CLASS #89 =============================
(766) <766> {147987} [148074]: For example, &quot; ls -1str &quot; uses a cluster of four short flags.
(8481) <8481> {1410777} [1410812]: For example, &quot;0.9.0beta&quot;.
*****************************************************************
========================= CLASS #90 =============================
(770) <770> {148293} [148592]: For example, in &quot; mysql &quot; is a command , &quot; --user=root &quot; is an option , &quot; --user &quot; is a flag , &quot; root &quot; is a parameter to the option, and &quot; mydatabase &quot; is an argument but not an option by our definition.
(8481) <8481> {1410777} [1410812]: For example, &quot;0.9.0beta&quot;.
*****************************************************************
========================= CLASS #91 =============================
(806) <806> {154053} [154232]: Zend_Controller&#39;s routing and dispatch handling will autodiscover any methods ending in &#39;Action&#39; in your class as potential controller actions.
(1414) <1414> {265005} [265127]: First, look at your action methods (the methods ending in &#39;Action&#39;), and determine what each is doing.
*****************************************************************
========================= CLASS #92 =============================
(844) <844> {162101} [162317]: If your action method contains camelCasing, please remember that this will result in &#39;-&#39; separated words when determining the view script file name.
(6906) <6906> {1170604} [1170652]: &#39;-&#39; is used to define a prohibited term.
(6910) <6910> {1171156} [1171197]: false is used to define prohibited term.
(6919) <6919> {1172520} [1172572]: &#39;-&#39; is used to define a prohibited subquery.
(6923) <6923> {1173087} [1173132]: false is used to define prohibited subquery.
*****************************************************************
========================= CLASS #93 =============================
(850) <850> {163238} [163388]: You may set this option globally within the controller using the setRedirectExit() accessor.
(852) <852> {163633} [163790]: You may set this option globally within the controller using the setRedirectPrependBase() accessor.
(855) <855> {164055} [164205]: You may set this option globally within the controller using the setRedirectCode() accessor.
*****************************************************************
========================= CLASS #94 =============================
(871) <871> {167496} [167981]: Adding a task using action, controller and module names Often, it&#39;s simplest to simply specify the action, controller, and module (and optional request parameters), much as you would when calling Zend_Controller_Action::_forward() : Adding a task using a request object Sometimes the OOP nature of a request object makes most sense; you can pass such an object to the ActionStack helper as well.
(1436) <1436> {270260} [270345]: Zend_Controller_Action::_forward() &#39;s arguments have changed.
*****************************************************************
========================= CLASS #95 =============================
(881) <881> {169277} [169352]: Typically, this is called within prepareAutoCompletion() .
(882) <882> {169327} [169352]: prepareAutoCompletion() .
*****************************************************************
========================= CLASS #96 =============================
(894) <894> {171603} [171713]: We simply define a method by which to request, and assigning it to the &#39;test&#39; element.
(902) <902> {173101} [173196]: Next, we check for a &#39;test&#39; parameter, and compare it against our data.
*****************************************************************
========================= CLASS #97 =============================
(895) <895> {171744} [171939]: Next, let&#39;s create the form element for which we want AutoCompletion: Here, we simply create a form with &#39;test&#39; and &#39;go&#39; methods.
(902) <902> {173101} [173196]: Next, we check for a &#39;test&#39; parameter, and compare it against our data.
(1014) <1014> {188874} [189245]: On the client end, your AJAX library will simply request the endpoints &#39;/comment/view&#39;, &#39;/comment/form&#39;, and &#39;/comment/process&#39;, and pass the &#39;format&#39; parameter: &#39;/comment/view/format/html&#39;, &#39;/comment/form/format/html&#39;, &#39;/comment/process/format/json&#39;.
(1127) <1127> {208854} [209063]: Keys for this array may include any of the path specification keys (&#39;moduleDir&#39;, &#39;module&#39;, &#39;controller&#39;, &#39;action&#39;, and &#39;suffix&#39;).
(1468) <1468> {276407} [276582]: The above example contains three module controllers, &#39;Blog_IndexController&#39;, &#39;News_IndexController&#39;, and &#39;News_ListController&#39;.
(1514) <1514> {283848} [284068]: setErrorHandler() takes an associative array, which may contain any of the keys &#39;module&#39;, &#39;controller&#39;, or &#39;action&#39;, with which it will set the appropriate values.
(1682) <1682> {313565} [313665]: Each array element is an array with the keys &#39;name&#39; and &#39;value&#39;.
(1807) <1807> {334424} [334565]: There are three special variables which can be used in your routes - &#39;module&#39;, &#39;controller&#39; and &#39;action&#39;.
(1908) <1908> {348527} [348662]: For example is in english the &#39;,&#39; sign used as seperator for thousands, and in german the &#39;.&#39; sign.
(2069) <2069> {379028} [379202]: So, if you are using &#39;dd.MM.yyyy&#39; you will get &#39;31.December.2007&#39; but if you use &#39;dd.MM.YYYY&#39; you will get &#39;31.December.2008&#39;.
(2620) <2620> {471798} [471950]: The argument can be an associative array containing any or all of the keys &#39; enabled &#39;, &#39; instance &#39;, and &#39; class &#39;.
(2621) <2621> {471951} [472079]: The &#39; enabled &#39; and &#39; instance &#39; keys correspond to the boolean and instance types documented above.
(2622) <2622> {472080} [472171]: The &#39; class &#39; key is used to name a class to use for a custom profiler.
(2625) <2625> {472293} [472394]: The &#39; class &#39; option is ignored when the &#39; instance &#39; option is supplied.
(2899) <2899> {514234} [514422]: In the example PHP code above, the rule keys in the Bugs table class are: &#39;Reporter&#39; , &#39;Engineer&#39; , &#39;Verifier&#39; , and &#39;Product&#39; .
(2927) <2927> {518096} [518146]: This is the rule &#39;Reporter&#39; .
(2949) <2949> {521748} [521786]: This is the rule &#39;Reporter&#39; .
(2974) <2974> {525800} [525895]: In this case, $rule1 is &#39;Reporter&#39; and $rule2 is &#39;Product&#39; .
(3442) <3442> {604308} [604543]: For example, assuming the two rule names &#39;moduleDir&#39; and &#39;module&#39;, the &#39;moduleDir&#39; rule should appear before module since &#39;module&#39; is contained within &#39;moduleDir&#39;.
(3443) <3443> {604545} [604762]: If &#39;module&#39; were added before &#39;moduleDir&#39;, &#39;module&#39; will match part of &#39;moduleDir&#39; and process it leaving &#39;Dir&#39; inside of the target uninflected.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(3704) <3704> {649251} [649371]: We&#39;ll need a landing page for the form, and then a &#39;process&#39; action for processing the form.
(3773) <3773> {660893} [661016]: As a result, &#39;My_Decorator_Label&#39; will now be used when the &#39;Label&#39; decorator is requested.
(4923) <4923> {871068} [871219]: This method takes the GET parameter&#39;s name as it&#39;s first parameter, and the GET parameter&#39;s value as it&#39;s second parameter.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
(5306) <5306> {942379} [942548]: Currently, the only practical difference relates to the specifier for minutes (&#39;m&#39; using the ISO default, and &#39;i&#39; using the PHP date format).
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6063) <6063> {1054038} [1054080]: Memory container &#39;value&#39; property.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6857) <6857> {1163399} [1163474]: Java Lucene uses the &#39;contents&#39; field as a default field to search.
(6886) <6886> {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(6906) <6906> {1170604} [1170652]: &#39;-&#39; is used to define a prohibited term.
(6910) <6910> {1171156} [1171197]: false is used to define prohibited term.
(6919) <6919> {1172520} [1172572]: &#39;-&#39; is used to define a prohibited subquery.
(6923) <6923> {1173087} [1173132]: false is used to define prohibited subquery.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6931) <6931> {1174173} [1174328]: Query string: field1:test~ This query matches documents containing &#39;test&#39; &#39;text&#39; &#39;best&#39; words and others.
(6947) <6947> {1176392} [1176569]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(7134) <7134> {1204150} [1204357]: Values specifically specified in the API include &#39;comment&#39;, &#39;trackback&#39;, &#39;pingback&#39;, and an empty string (&#39;&#39;), but it may be any value.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8266) <8266> {1380587} [1380724]: The first one is the point &#39;.&#39;, the second is the underline &#39;_&#39; and the third the hyphen &#39;-&#39;.
(8533) <8533> {1420110} [1420334]: Meta tags may be either of the &#39;http-equiv&#39; or &#39;name&#39; types, must contain a &#39;content&#39; attribute, and can also have either of the &#39;lang&#39; or &#39;scheme&#39; modifier attributes.
(8534) <8534> {1420349} [1420751]: The HeadMeta helper supports the following methods for setting and adding meta tags: The $keyValue item is used to define a value for the &#39;name&#39; or &#39;http-equiv&#39; key; $content is the value for the &#39;content&#39; key, and $modifiers is an optional associative array that can contain keys for &#39;lang&#39; and/or &#39;scheme&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8709) <8709> {1449161} [1449296]: You may also pass an associative array with the keys &#39;checked&#39; and &#39;unChecked&#39;.
*****************************************************************
========================= CLASS #98 =============================
(896) <896> {171940} [172094]: The &#39;test&#39; method adds several special, Dojo-specific attributes: dojoType, store, autoComplete, and hasDownArrow.
(902) <902> {173101} [173196]: Next, we check for a &#39;test&#39; parameter, and compare it against our data.
*****************************************************************
========================= CLASS #99 =============================
(901) <901> {172857} [173084]: First, we look to make sure we have a post request, and that there is a &#39;format&#39; parameter set to the value &#39;ajax&#39;; these are simply to help reduce spurious queries to the action.
(925) <925> {176363} [176458]: By default, it looks for the &#39;format&#39; parameter, though this may be configured.
(1502) <1502> {281910} [281988]: Default value is &#39;Zend_Controller_Plugin_ActionStack&#39;.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
*****************************************************************
========================= CLASS #100 =============================
(919) <919> {175532} [175698]: As an example, let&#39;s consider the following controller: Let&#39;s say that we want the listAction() to also be available in an XML format.
(8687) <8687> {1445632} [1445686]: Let&#39;s say we want a helper named &#39;fooBar&#39;.
*****************************************************************
========================= CLASS #101 =============================
(920) <922> {175699} [176082]: Instead of creating a different action, we can hint that it can return an XML response: What this will do is: Set the &#39;Content-Type&#39; response header to &#39;text/xml&#39;. Change the view suffix to &#39;xml.phtml&#39; (or, if you use an alternate view suffix, &#39;xml. [your suffix]&#39;).
(933) <935> {177900} [178259]: The XML context sets the &#39;Content-Type&#39; response header to &#39;text/xml&#39;, and the view script suffix to &#39;xml.phtml&#39;. You will need to create a new view script for the context. Creating Custom Contexts Sometimes, the default contexts are not enough.
*****************************************************************
========================= CLASS #102 =============================
(923) <923> {176101} [176227]: Now, you&#39;ll need to create a new view script, &#39;news/list.xml.phtml&#39;, which will create and render the XML.
(934) <934> {178078} [178156]: You will need to create a new view script for the context.
*****************************************************************
========================= CLASS #103 =============================
(929) <930> {177258} [177532]: The JSON context sets the &#39;Content-Type&#39; response header to &#39;application/json&#39;, and the view script suffix to &#39;json.phtml&#39;. By default, however, no view script is required.
(1026) <1027> {191015} [191233]: Sets the &#39;Content-Type&#39; response header to &#39;application/json&#39;. By default, immediately returns the response, without waiting for the action to finish execution.
*****************************************************************
========================= CLASS #104 =============================
(933) <933> {177900} [178077]: The XML context sets the &#39;Content-Type&#39; response header to &#39;text/xml&#39;, and the view script suffix to &#39;xml.phtml&#39;.
(1026) <1026> {191015} [191093]: Sets the &#39;Content-Type&#39; response header to &#39;application/json&#39;.
(4900) <4900> {866655} [866771]: As a matter of fact, only the &#39;Content-length&#39; and &#39;Content-type&#39; headers are reset.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #105 =============================
(938) <938> {178431} [178513]: The easiest way to add a new context is via the addContext() method.
(951) <951> {180158} [180173]: addContexts() .
*****************************************************************
========================= CLASS #106 =============================
(942) <942> {178905} [179139]: callbacks : an array containing one or more of the keys &#39;init&#39; or &#39;post&#39;, pointing to valid PHP callbacks that can be used for context initialization and post processing.
(1127) <1127> {208854} [209063]: Keys for this array may include any of the path specification keys (&#39;moduleDir&#39;, &#39;module&#39;, &#39;controller&#39;, &#39;action&#39;, and &#39;suffix&#39;).
(1468) <1468> {276407} [276582]: The above example contains three module controllers, &#39;Blog_IndexController&#39;, &#39;News_IndexController&#39;, and &#39;News_ListController&#39;.
(1514) <1514> {283848} [284068]: setErrorHandler() takes an associative array, which may contain any of the keys &#39;module&#39;, &#39;controller&#39;, or &#39;action&#39;, with which it will set the appropriate values.
(1682) <1682> {313565} [313665]: Each array element is an array with the keys &#39;name&#39; and &#39;value&#39;.
(1807) <1807> {334424} [334565]: There are three special variables which can be used in your routes - &#39;module&#39;, &#39;controller&#39; and &#39;action&#39;.
(1908) <1908> {348527} [348662]: For example is in english the &#39;,&#39; sign used as seperator for thousands, and in german the &#39;.&#39; sign.
(2620) <2620> {471798} [471950]: The argument can be an associative array containing any or all of the keys &#39; enabled &#39;, &#39; instance &#39;, and &#39; class &#39;.
(2621) <2621> {471951} [472079]: The &#39; enabled &#39; and &#39; instance &#39; keys correspond to the boolean and instance types documented above.
(2622) <2622> {472080} [472171]: The &#39; class &#39; key is used to name a class to use for a custom profiler.
(2625) <2625> {472293} [472394]: The &#39; class &#39; option is ignored when the &#39; instance &#39; option is supplied.
(3442) <3442> {604308} [604543]: For example, assuming the two rule names &#39;moduleDir&#39; and &#39;module&#39;, the &#39;moduleDir&#39; rule should appear before module since &#39;module&#39; is contained within &#39;moduleDir&#39;.
(3443) <3443> {604545} [604762]: If &#39;module&#39; were added before &#39;moduleDir&#39;, &#39;module&#39; will match part of &#39;moduleDir&#39; and process it leaving &#39;Dir&#39; inside of the target uninflected.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(4923) <4923> {871068} [871219]: This method takes the GET parameter&#39;s name as it&#39;s first parameter, and the GET parameter&#39;s value as it&#39;s second parameter.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6063) <6063> {1054038} [1054080]: Memory container &#39;value&#39; property.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6857) <6857> {1163399} [1163474]: Java Lucene uses the &#39;contents&#39; field as a default field to search.
(6886) <6886> {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6947) <6947> {1176392} [1176569]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(7134) <7134> {1204150} [1204357]: Values specifically specified in the API include &#39;comment&#39;, &#39;trackback&#39;, &#39;pingback&#39;, and an empty string (&#39;&#39;), but it may be any value.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8266) <8266> {1380587} [1380724]: The first one is the point &#39;.&#39;, the second is the underline &#39;_&#39; and the third the hyphen &#39;-&#39;.
(8533) <8533> {1420110} [1420334]: Meta tags may be either of the &#39;http-equiv&#39; or &#39;name&#39; types, must contain a &#39;content&#39; attribute, and can also have either of the &#39;lang&#39; or &#39;scheme&#39; modifier attributes.
(8534) <8534> {1420349} [1420751]: The HeadMeta helper supports the following methods for setting and adding meta tags: The $keyValue item is used to define a value for the &#39;name&#39; or &#39;http-equiv&#39; key; $content is the value for the &#39;content&#39; key, and $modifiers is an optional associative array that can contain keys for &#39;lang&#39; and/or &#39;scheme&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8709) <8709> {1449161} [1449296]: You may also pass an associative array with the keys &#39;checked&#39; and &#39;unChecked&#39;.
*****************************************************************
========================= CLASS #107 =============================
(948) <948> {179878} [179963]: There are a variety of methods for interacting with contexts: addContext() .
(951) <951> {180158} [180173]: addContexts() .
*****************************************************************
========================= CLASS #108 =============================
(964) <964> {181323} [181560]: As an example, consider the following controller class: Let&#39;s say we wanted to add an XML context to the &#39;list&#39; action, and XML and JSON contexts to the &#39;comments&#39; action.
(8687) <8687> {1445632} [1445686]: Let&#39;s say we want a helper named &#39;fooBar&#39;.
*****************************************************************
========================= CLASS #109 =============================
(966) <966> {181823} [181976]: The following methods can be used to build the context mappings: $context may be a single context, or an array of contexts.
(969) <969> {182282} [182361]: $context may be a single context, or an array of contexts.
(973) <973> {182712} [182790]: $context may be a single context or an array of contexts.
*****************************************************************
========================= CLASS #110 =============================
(974) <974> {182804} [183147]: Initializizing Context Switching To initialize context switching, you need to call initContext() in your action controller: In some cases, you may want to force the context used; for instance, you may only want to allow the XML context if context switching is activated.
(998) <998> {186683} [186775]: You should do this before calling initContext() .
*****************************************************************
========================= CLASS #111 =============================
(975) <975> {183148} [183424]: You can do so by passing the context to initContext() : &lt;?php $contextSwitch-&gt;initContext(&#39;xml&#39;); ?&gt; Additional Functionality A variety of methods can be used to alter the behaviour of the ContextSwitch helper.
(978) <978> {183835} [184050]: &lt;?php $contextSwitch-&gt;setAutoJsonSerialization(false); $contextSwitch-&gt;initContext(); ?&gt; You can retrieve the value of the flag with getAutoJsonSerialization() .
*****************************************************************
========================= CLASS #112 =============================
(977) <977> {183631} [183817]: If you wish to create your own response, you should turn this off; this needs to be done prior to the call to initContext() .
(998) <998> {186683} [186775]: You should do this before calling initContext() .
*****************************************************************
========================= CLASS #113 =============================
(1127) <1128> {208854} [209202]: Keys for this array may include any of the path specification keys (&#39;moduleDir&#39;, &#39;module&#39;, &#39;controller&#39;, &#39;action&#39;, and &#39;suffix&#39;). Any variables passed will be used; otherwise, values based on the current request will be utlized.
(1514) <1515> {283848} [284221]: setErrorHandler() takes an associative array, which may contain any of the keys &#39;module&#39;, &#39;controller&#39;, or &#39;action&#39;, with which it will set the appropriate values. Additionally, you may pass an optional associative array to the constructor, which will then proxy to setErrorHandler() .
(1807) <1808> {334424} [334700]: There are three special variables which can be used in your routes - &#39;module&#39;, &#39;controller&#39; and &#39;action&#39;. These special variables are used by Zend_Controller_Dispatcher to find a controller and action to dispatch to.
(8165) <8166> {1368383} [1368506]: Change &#39;array&#39; to &#39;gettext&#39;. All other usages are exactly the same as with all other adapters.
*****************************************************************
========================= CLASS #114 =============================
(1013) <1013> {188653} [188843]: In the first two cases, &#39;view&#39; and &#39;form&#39;, we&#39;ll return HTML snippets with which to update the page; in the latter, we&#39;ll return JSON.
(1127) <1127> {208854} [209063]: Keys for this array may include any of the path specification keys (&#39;moduleDir&#39;, &#39;module&#39;, &#39;controller&#39;, &#39;action&#39;, and &#39;suffix&#39;).
(1468) <1468> {276407} [276582]: The above example contains three module controllers, &#39;Blog_IndexController&#39;, &#39;News_IndexController&#39;, and &#39;News_ListController&#39;.
(1514) <1514> {283848} [284068]: setErrorHandler() takes an associative array, which may contain any of the keys &#39;module&#39;, &#39;controller&#39;, or &#39;action&#39;, with which it will set the appropriate values.
(1647) <1647> {306876} [306923]: If it doesn&#39;t, an exception will be raised.
(1682) <1682> {313565} [313665]: Each array element is an array with the keys &#39;name&#39; and &#39;value&#39;.
(1807) <1807> {334424} [334565]: There are three special variables which can be used in your routes - &#39;module&#39;, &#39;controller&#39; and &#39;action&#39;.
(1908) <1908> {348527} [348662]: For example is in english the &#39;,&#39; sign used as seperator for thousands, and in german the &#39;.&#39; sign.
(1965) <1965> {355658} [355694]: In our case &#39;03.March.2000&#39;.
(2620) <2620> {471798} [471950]: The argument can be an associative array containing any or all of the keys &#39; enabled &#39;, &#39; instance &#39;, and &#39; class &#39;.
(2621) <2621> {471951} [472079]: The &#39; enabled &#39; and &#39; instance &#39; keys correspond to the boolean and instance types documented above.
(2622) <2622> {472080} [472171]: The &#39; class &#39; key is used to name a class to use for a custom profiler.
(2625) <2625> {472293} [472394]: The &#39; class &#39; option is ignored when the &#39; instance &#39; option is supplied.
(3442) <3442> {604308} [604543]: For example, assuming the two rule names &#39;moduleDir&#39; and &#39;module&#39;, the &#39;moduleDir&#39; rule should appear before module since &#39;module&#39; is contained within &#39;moduleDir&#39;.
(3443) <3443> {604545} [604762]: If &#39;module&#39; were added before &#39;moduleDir&#39;, &#39;module&#39; will match part of &#39;moduleDir&#39; and process it leaving &#39;Dir&#39; inside of the target uninflected.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(4923) <4923> {871068} [871219]: This method takes the GET parameter&#39;s name as it&#39;s first parameter, and the GET parameter&#39;s value as it&#39;s second parameter.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
(5510) <5510> {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) <5514> {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6063) <6063> {1054038} [1054080]: Memory container &#39;value&#39; property.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6857) <6857> {1163399} [1163474]: Java Lucene uses the &#39;contents&#39; field as a default field to search.
(6886) <6886> {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6947) <6947> {1176392} [1176569]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(7134) <7134> {1204150} [1204357]: Values specifically specified in the API include &#39;comment&#39;, &#39;trackback&#39;, &#39;pingback&#39;, and an empty string (&#39;&#39;), but it may be any value.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8266) <8266> {1380587} [1380724]: The first one is the point &#39;.&#39;, the second is the underline &#39;_&#39; and the third the hyphen &#39;-&#39;.
(8533) <8533> {1420110} [1420334]: Meta tags may be either of the &#39;http-equiv&#39; or &#39;name&#39; types, must contain a &#39;content&#39; attribute, and can also have either of the &#39;lang&#39; or &#39;scheme&#39; modifier attributes.
(8534) <8534> {1420349} [1420751]: The HeadMeta helper supports the following methods for setting and adding meta tags: The $keyValue item is used to define a value for the &#39;name&#39; or &#39;http-equiv&#39; key; $content is the value for the &#39;content&#39; key, and $modifiers is an optional associative array that can contain keys for &#39;lang&#39; and/or &#39;scheme&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8709) <8709> {1449161} [1449296]: You may also pass an associative array with the keys &#39;checked&#39; and &#39;unChecked&#39;.
*****************************************************************
========================= CLASS #115 =============================
(1034) <1034> {192593} [192694]: setGoto() can be used to set a default URL to use if none is passed to goto() .
(1037) <1037> {193179} [193286]: setGotoUrl() can be used to set a default URL to use if none is passed to gotoUrl() .
*****************************************************************
========================= CLASS #116 =============================
(1041) <1041> {193719} [194016]: When this option is set, it uses the value of $_SERVER[&#39;HTTP_HOST&#39;] , $_SERVER[&#39;SERVER_PORT&#39;] , and $_SERVER[&#39;HTTPS&#39;] to form a full URI to the URL specified by one of the redirect methods.
(5847) <5847> {1023091} [1023281]: This can be enabled be passing the &#39;ssl&#39; parameter to the configuration array in the Zend_Mail_Transport_Smtp constructor with a value of either &#39;ssl&#39; or &#39;tls&#39;.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #117 =============================
(1047) <1047> {195158} [195278]: Using goto()&#39;s _forward() API goto() &#39;s API mimics that of Zend_Controller_Action::_forward() .
(1436) <1436> {270260} [270345]: Zend_Controller_Action::_forward() &#39;s arguments have changed.
*****************************************************************
========================= CLASS #118 =============================
(1067) <1067> {199750} [199871]: postDispatch() will not automatically call render() in the current controller.
(1069) <1069> {199958} [200059]: postDispatch() will not automatically call render() in the current controller.
*****************************************************************
========================= CLASS #119 =============================
(1068) <1068> {199874} [199940]: getNeverRender() retrieves the current value.
(1071) <1071> {200308} [200351]: getNoRender() retrieves the current value.
(1073) <1073> {200533} [200600]: getNoController() retrieves the current value.
(1075) <1075> {200765} [200835]: getNeverController() retrieves the current value.
(1079) <1079> {201289} [201356]: getScriptAction() retrieves the current value.
(1082) <1082> {201592} [201662]: getResponseSegment() retrieves the current value.
*****************************************************************
========================= CLASS #120 =============================
(1094) <1094> {203708} [203776]: The default specification is :moduleDir/views .
(1101) <1101> {204661} [204719]: The default specification is :action.
*****************************************************************
========================= CLASS #121 =============================
(1095) <1096> {203777} [204124]: You may retrieve the current specification at any time using getViewBasePathSpec() . setViewScriptPathSpec($spec) allows you to change the path specification used to determine the path to an individual view script (minus the base view script path).
(1099) <1100> {204225} [204659]: You may retrieve the current specification at any time using getViewScriptPathSpec() . setViewScriptPathNoControllerSpec($spec) allows you to change the path specification used to determine the path to an individual view script when noController is in effect (minus the base view script path).
*****************************************************************
========================= CLASS #122 =============================
(1097) <1098> {204145} [204224]: The default specification is :controller/:action. :suffix .
(1101) <1102> {204661} [204728]: The default specification is :action. :suffix .
*****************************************************************
========================= CLASS #123 =============================
(1114) <1115> {206337} [206622]: : &quot;FooBarBaz&quot; becomes &quot;foo-bar-baz&quot;. Internally, the inflector uses the filters Zend_Filter_Word_CamelCaseToDash and Zend_Filter_StringToLower .
(1120) <1121> {207546} [207940]: Examples: &quot;fooBar&quot; becomes &quot;foo-bar&quot;; &quot;foo-barBaz&quot; becomes &quot;foo-bar-baz&quot;. Internally, the inflector uses the filters Zend_Filter_Word_CamelCaseToDash , Zend_Filter_PregReplace , and Zend_Filter_StringToLower .
*****************************************************************
========================= CLASS #124 =============================
(1117) <1117> {206878} [207019]: Examples: &quot;FooBar&quot; becomes &quot;foo-bar&quot;; &quot;FooBar_Admin&quot; becomes &quot;foo-bar/admin&quot;.
(1120) <1120> {207546} [207683]: Examples: &quot;fooBar&quot; becomes &quot;foo-bar&quot;; &quot;foo-barBaz&quot; becomes &quot;foo-bar-baz&quot;.
*****************************************************************
========================= CLASS #125 =============================
(1118) <1118> {207066} [207291]: Internally, the inflector uses the filters Zend_Filter_Word_CamelCaseToDash , Zend_Filter_Word_UnderscoreToSeparator , and Zend_Filter_StringToLower .
(1121) <1121> {207730} [207940]: Internally, the inflector uses the filters Zend_Filter_Word_CamelCaseToDash , Zend_Filter_PregReplace , and Zend_Filter_StringToLower .
*****************************************************************
========================= CLASS #126 =============================
(1125) <1125> {208639} [208824]: By default, Zend_Controller_Action::renderScript() proxies to the ViewRenderer &#39;s renderScript() method.
(1132) <1132> {209889} [210076]: By default, Zend_Controller_Action::getViewScript() proxies to the ViewRenderer &#39;s getViewScript() method.
(1138) <1138> {210919} [211092]: By default, Zend_Controller_Action::render() proxies to the ViewRenderer &#39;s render() method.
*****************************************************************
========================= CLASS #127 =============================
(1127) <1127> {208854} [209063]: Keys for this array may include any of the path specification keys (&#39;moduleDir&#39;, &#39;module&#39;, &#39;controller&#39;, &#39;action&#39;, and &#39;suffix&#39;).
(1468) <1468> {276407} [276582]: The above example contains three module controllers, &#39;Blog_IndexController&#39;, &#39;News_IndexController&#39;, and &#39;News_ListController&#39;.
(1514) <1514> {283848} [284068]: setErrorHandler() takes an associative array, which may contain any of the keys &#39;module&#39;, &#39;controller&#39;, or &#39;action&#39;, with which it will set the appropriate values.
(1682) <1682> {313565} [313665]: Each array element is an array with the keys &#39;name&#39; and &#39;value&#39;.
(1807) <1807> {334424} [334565]: There are three special variables which can be used in your routes - &#39;module&#39;, &#39;controller&#39; and &#39;action&#39;.
(1908) <1908> {348527} [348662]: For example is in english the &#39;,&#39; sign used as seperator for thousands, and in german the &#39;.&#39; sign.
(2620) <2620> {471798} [471950]: The argument can be an associative array containing any or all of the keys &#39; enabled &#39;, &#39; instance &#39;, and &#39; class &#39;.
(2621) <2621> {471951} [472079]: The &#39; enabled &#39; and &#39; instance &#39; keys correspond to the boolean and instance types documented above.
(2622) <2622> {472080} [472171]: The &#39; class &#39; key is used to name a class to use for a custom profiler.
(2625) <2625> {472293} [472394]: The &#39; class &#39; option is ignored when the &#39; instance &#39; option is supplied.
(3442) <3442> {604308} [604543]: For example, assuming the two rule names &#39;moduleDir&#39; and &#39;module&#39;, the &#39;moduleDir&#39; rule should appear before module since &#39;module&#39; is contained within &#39;moduleDir&#39;.
(3443) <3443> {604545} [604762]: If &#39;module&#39; were added before &#39;moduleDir&#39;, &#39;module&#39; will match part of &#39;moduleDir&#39; and process it leaving &#39;Dir&#39; inside of the target uninflected.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(4923) <4923> {871068} [871219]: This method takes the GET parameter&#39;s name as it&#39;s first parameter, and the GET parameter&#39;s value as it&#39;s second parameter.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6063) <6063> {1054038} [1054080]: Memory container &#39;value&#39; property.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6857) <6857> {1163399} [1163474]: Java Lucene uses the &#39;contents&#39; field as a default field to search.
(6886) <6886> {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6947) <6947> {1176392} [1176569]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(7134) <7134> {1204150} [1204357]: Values specifically specified in the API include &#39;comment&#39;, &#39;trackback&#39;, &#39;pingback&#39;, and an empty string (&#39;&#39;), but it may be any value.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8266) <8266> {1380587} [1380724]: The first one is the point &#39;.&#39;, the second is the underline &#39;_&#39; and the third the hyphen &#39;-&#39;.
(8533) <8533> {1420110} [1420334]: Meta tags may be either of the &#39;http-equiv&#39; or &#39;name&#39; types, must contain a &#39;content&#39; attribute, and can also have either of the &#39;lang&#39; or &#39;scheme&#39; modifier attributes.
(8534) <8534> {1420349} [1420751]: The HeadMeta helper supports the following methods for setting and adding meta tags: The $keyValue item is used to define a value for the &#39;name&#39; or &#39;http-equiv&#39; key; $content is the value for the &#39;content&#39; key, and $modifiers is an optional associative array that can contain keys for &#39;lang&#39; and/or &#39;scheme&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8709) <8709> {1449161} [1449296]: You may also pass an associative array with the keys &#39;checked&#39; and &#39;unChecked&#39;.
*****************************************************************
========================= CLASS #128 =============================
(1142) <1142> {211864} [212124]: The ViewRenderer replaces any path delimiter found in the controller name with an actual path delimiter (&#39;/&#39;), and any word delimiter found with a dash (&#39;-&#39;) when creating paths.
(6906) <6906> {1170604} [1170652]: &#39;-&#39; is used to define a prohibited term.
(6910) <6910> {1171156} [1171197]: false is used to define prohibited term.
(6919) <6919> {1172520} [1172572]: &#39;-&#39; is used to define a prohibited subquery.
(6923) <6923> {1173087} [1173132]: false is used to define prohibited subquery.
*****************************************************************
========================= CLASS #129 =============================
(1158) <1158> {215639} [215821]: :suffix&#39;; if the noController flag has been set, you want to render out of the top level instead of in a subdirectory (&#39;:action.:suffix&#39;).
(3422) <3422> {600699} [600774]: These are specified by prefixing with a &#39;:&#39;: :script .
(5101) <5101> {903958} [904118]: :suffix&#39;; &#39;:script&#39; is passed the registered layout name, while &#39;:suffix&#39; is a static rule of the inflector.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #130 =============================
(1159) <1159> {215822} [215912]: Finally, you want to use &#39;tpl&#39; as the view script filename suffix.
(4168) <4168> {741015} [741099]: Zend_Form_Element_Checkbox uses the &#39;formCheckbox&#39; view helper.
(4171) <4171> {741324} [741432]: Zend_Form_Element_Hidden accomplishes this through use of the &#39;formHidden&#39; view helper.
(4178) <4178> {742456} [742547]: The &#39;formHidden&#39; view helper is used to render the element in the form.
*****************************************************************
========================= CLASS #131 =============================
(1182) <1182> {219789} [220130]: To determine if a helper exists in the helper broker, use hasHelper($name) , where $name is the short name of the helper (minus the prefix): There are also two static methods for retrieving helpers from the helper broker: getExistingHelper() and getStaticHelper() .
(1186) <1186> {220654} [220769]: Both methods take a single argument, $name , which is the short name of the helper (minus the prefix).
*****************************************************************
========================= CLASS #132 =============================
(1216) <1216> {226441} [226592]: Routing occurs only once: when the request is initially received and before the first controller is dispatched.
(1785) <1785> {330737} [330860]: Routing occurs only once: when the request is initially received and before the first controller is dispatched.
*****************************************************************
========================= CLASS #133 =============================
(1232) <1232> {229558} [229904]: If you wish to have your controller class or action method name have multiple MixedCasedWords or camelCasedWords, you will need to separate those words on the url with either a &#39;-&#39; or &#39;.&#39; (though you can configure the character used).
(1468) <1468> {276407} [276582]: The above example contains three module controllers, &#39;Blog_IndexController&#39;, &#39;News_IndexController&#39;, and &#39;News_ListController&#39;.
(1647) <1647> {306876} [306923]: If it doesn&#39;t, an exception will be raised.
(1807) <1807> {334424} [334565]: There are three special variables which can be used in your routes - &#39;module&#39;, &#39;controller&#39; and &#39;action&#39;.
(1908) <1908> {348527} [348662]: For example is in english the &#39;,&#39; sign used as seperator for thousands, and in german the &#39;.&#39; sign.
(1965) <1965> {355658} [355694]: In our case &#39;03.March.2000&#39;.
(2620) <2620> {471798} [471950]: The argument can be an associative array containing any or all of the keys &#39; enabled &#39;, &#39; instance &#39;, and &#39; class &#39;.
(2621) <2621> {471951} [472079]: The &#39; enabled &#39; and &#39; instance &#39; keys correspond to the boolean and instance types documented above.
(2622) <2622> {472080} [472171]: The &#39; class &#39; key is used to name a class to use for a custom profiler.
(2625) <2625> {472293} [472394]: The &#39; class &#39; option is ignored when the &#39; instance &#39; option is supplied.
(3442) <3442> {604308} [604543]: For example, assuming the two rule names &#39;moduleDir&#39; and &#39;module&#39;, the &#39;moduleDir&#39; rule should appear before module since &#39;module&#39; is contained within &#39;moduleDir&#39;.
(3443) <3443> {604545} [604762]: If &#39;module&#39; were added before &#39;moduleDir&#39;, &#39;module&#39; will match part of &#39;moduleDir&#39; and process it leaving &#39;Dir&#39; inside of the target uninflected.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5510) <5510> {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) <5514> {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6886) <6886> {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(6906) <6906> {1170604} [1170652]: &#39;-&#39; is used to define a prohibited term.
(6910) <6910> {1171156} [1171197]: false is used to define prohibited term.
(6919) <6919> {1172520} [1172572]: &#39;-&#39; is used to define a prohibited subquery.
(6923) <6923> {1173087} [1173132]: false is used to define prohibited subquery.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6947) <6947> {1176392} [1176569]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8266) <8266> {1380587} [1380724]: The first one is the point &#39;.&#39;, the second is the underline &#39;_&#39; and the third the hyphen &#39;-&#39;.
(8533) <8533> {1420110} [1420334]: Meta tags may be either of the &#39;http-equiv&#39; or &#39;name&#39; types, must contain a &#39;content&#39; attribute, and can also have either of the &#39;lang&#39; or &#39;scheme&#39; modifier attributes.
(8534) <8534> {1420349} [1420751]: The HeadMeta helper supports the following methods for setting and adding meta tags: The $keyValue item is used to define a value for the &#39;name&#39; or &#39;http-equiv&#39; key; $content is the value for the &#39;content&#39; key, and $modifiers is an optional associative array that can contain keys for &#39;lang&#39; and/or &#39;scheme&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #134 =============================
(1335) <1336> {250581} [250865]: (set|get)DefaultControllerName() let you specify a different name to use for the default controller (&#39;index&#39; is used otherwise) and retrieve the current value. They proxy to the dispatcher .
(1337) <1338> {250883} [251160]: (set|get)DefaultActionName() let you specify a different name to use for the default action (&#39;index&#39; is used otherwise) and retrieve the current value. They proxy to the dispatcher .
*****************************************************************
========================= CLASS #135 =============================
(1341) <1343> {251553} [252123]: (set|get)Router() let you specify the router class or object to use during the dispatch process and to retrieve the current object. When setting the router object, you may pass in a router class name, in which case the method will load the class file and instantiate it. When retrieving the router object, it first checks to see if one is present, and if not, instantiates the default router (rewrite router).
(1346) <1348> {252406} [253004]: (set|get)Dispatcher() let you specify the dispatcher class or object to use during the dispatch process and retrieve the current object. When setting the dispatcher object, you may pass in a dispatcher class name, in which case the method will load the class file and instantiate it. When retrieving the dispatcher object, it first checks to see if one is present, and if not, instantiates the default dispatcher.
(1349) <1351> {253022} [253417]: (set|get)Response() let you specify the response class or object to use during the dispatch process and to retrieve the current object. When setting the response object, you may pass in a response class name, in which case the method will load the class file and instantiate it. plugin objects .
*****************************************************************
========================= CLASS #136 =============================
(1340) <1340> {251355} [251535]: When setting the request object, you may pass in a request class name, in which case the method will load the class file and instantiate it.
(1342) <1342> {251728} [251906]: When setting the router object, you may pass in a router class name, in which case the method will load the class file and instantiate it.
(1347) <1347> {252590} [252796]: When setting the dispatcher object, you may pass in a dispatcher class name, in which case the method will load the class file and instantiate it.
(1350) <1350> {253201} [253383]: When setting the response object, you may pass in a response class name, in which case the method will load the class file and instantiate it.
*****************************************************************
========================= CLASS #137 =============================
(1356) <1356> {253957} [254132]: By default, exceptions are caught and placed in the response object ; turning on throwExceptions() will override this behaviour.
(3464) <3464> {608473} [608530]: By default, no exceptions are thrown.
*****************************************************************
========================= CLASS #138 =============================
(1375) <1375> {257233} [257274]: Set this parameter to true to disable it.
(1377) <1377> {257379} [257440]: Set this parameter to true to disable it.
*****************************************************************
========================= CLASS #139 =============================
(1387) <1387> {259524} [259805]: For example, &#39;camel-cased&#39; would become &#39;camelCasedAction&#39; by the dispatcher, whereas &#39;camelCased&#39; would become &#39;camelcasedAction&#39;; however, due to the case insensitivity of PHP, both will execute the same method.
(5266) <5266> {932434} [932518]: In the example above, &#39;Container_Tree&#39; becomes &#39;Container/Tree.php&#39;.
*****************************************************************
========================= CLASS #140 =============================
(1413) <1413> {264848} [265004]: When you&#39;re ready to start using the ViewRenderer functionality, there are several things to look for in your controller code.
(1647) <1647> {306876} [306923]: If it doesn&#39;t, an exception will be raised.
(1965) <1965> {355658} [355694]: In our case &#39;03.March.2000&#39;.
(5510) <5510> {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) <5514> {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #141 =============================
(1415) <1415> {265128} [266034]: If none of the following is happening, you&#39;ll need to make changes: Calls to $this-&gt;render() Calls to $this-&gt;_forward() Calls to $this-&gt;_redirect() Calls to the Redirector action helper The easiest change is to disable auto-rendering for that method: If you find that none of your action methods are rendering, forwarding, or redirecting, you will likely want to put the above line in your preDispatch() or init() methods: If you are calling render() , and you&#39;re using the Conventional Modular directory structure , you&#39;ll want to change your code to make use of autorendering: If you&#39;re rendering multiple view scripts in a single action, you don&#39;t need to change a thing.
(1423) <1423> {267628} [267799]: If you aren&#39;t using the conventional modular directory structure, you can even associate different path specifications with the ViewRenderer .
(1647) <1647> {306876} [306923]: If it doesn&#39;t, an exception will be raised.
(1965) <1965> {355658} [355694]: In our case &#39;03.March.2000&#39;.
(5510) <5510> {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) <5514> {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8502) <8502> {1414390} [1414427]: Do so by calling the render() method.
*****************************************************************
========================= CLASS #142 =============================
(1416) <1416> {266073} [266178]: If you&#39;re simply calling render() with no arguments, you can remove such lines.
(1647) <1647> {306876} [306923]: If it doesn&#39;t, an exception will be raised.
(1965) <1965> {355658} [355694]: In our case &#39;03.March.2000&#39;.
(5510) <5510> {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) <5514> {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #143 =============================
(1417) <1417> {266217} [266476]: If you&#39;re calling render() with arguments, and not doing any processing afterwards or rendering multiple view scripts, you can change these calls to read $this-&gt;_helper-&gt;viewRenderer() .
(1647) <1647> {306876} [306923]: If it doesn&#39;t, an exception will be raised.
(1965) <1965> {355658} [355694]: In our case &#39;03.March.2000&#39;.
(5510) <5510> {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) <5514> {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #144 =============================
(1418) <1418> {266507} [266753]: If you&#39;re not using the conventional modular directory structure, there are a variety of methods for setting the view base path and script path specifications so that you can make use of the ViewRenderer .
(1423) <1423> {267628} [267799]: If you aren&#39;t using the conventional modular directory structure, you can even associate different path specifications with the ViewRenderer .
(1647) <1647> {306876} [306923]: If it doesn&#39;t, an exception will be raised.
(1965) <1965> {355658} [355694]: In our case &#39;03.March.2000&#39;.
(5510) <5510> {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) <5514> {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #145 =============================
(1420) <1420> {266871} [267085]: If you&#39;re using a view object from the registry, or customizing your view object, or using a different view implementation, you&#39;ll want to inject the ViewRenderer with this object.
(1647) <1647> {306876} [306923]: If it doesn&#39;t, an exception will be raised.
(1965) <1965> {355658} [355694]: In our case &#39;03.March.2000&#39;.
(5510) <5510> {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) <5514> {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #146 =============================
(1449) <1449> {272276} [272741]: You can override this in several ways: Set throwExceptions() in the front controller: Set renderExceptions() in the response object: Zend_Controller_Dispatcher_Interface::dispatch() now accepts and returns a object instead of a dispatcher token.
(1450) <1450> {272755} [272895]: Zend_Controller_Router_Interface::route() now accepts and returns a object instead of a dispatcher token.
(1465) <1465> {275842} [275949]: All methods now accept and return a object instead of a dispatcher token.
*****************************************************************
========================= CLASS #147 =============================
(1453) <1453> {273535} [273739]: run() is no longer defined as final, but is also no longer used by the front controller; it&#39;s sole purpose is for using the class as a page controller.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #148 =============================
(1469) <1469> {276583} [276739]: Two global controllers, &#39;IndexController&#39; and &#39;FooController&#39; are also defined; neither of these will be namespaced.
(1807) <1807> {334424} [334565]: There are three special variables which can be used in your routes - &#39;module&#39;, &#39;controller&#39; and &#39;action&#39;.
(1908) <1908> {348527} [348662]: For example is in english the &#39;,&#39; sign used as seperator for thousands, and in german the &#39;.&#39; sign.
(2620) <2620> {471798} [471950]: The argument can be an associative array containing any or all of the keys &#39; enabled &#39;, &#39; instance &#39;, and &#39; class &#39;.
(2621) <2621> {471951} [472079]: The &#39; enabled &#39; and &#39; instance &#39; keys correspond to the boolean and instance types documented above.
(2622) <2622> {472080} [472171]: The &#39; class &#39; key is used to name a class to use for a custom profiler.
(2625) <2625> {472293} [472394]: The &#39; class &#39; option is ignored when the &#39; instance &#39; option is supplied.
(3442) <3442> {604308} [604543]: For example, assuming the two rule names &#39;moduleDir&#39; and &#39;module&#39;, the &#39;moduleDir&#39; rule should appear before module since &#39;module&#39; is contained within &#39;moduleDir&#39;.
(3443) <3443> {604545} [604762]: If &#39;module&#39; were added before &#39;moduleDir&#39;, &#39;module&#39; will match part of &#39;moduleDir&#39; and process it leaving &#39;Dir&#39; inside of the target uninflected.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6886) <6886> {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6947) <6947> {1176392} [1176569]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8533) <8533> {1420110} [1420334]: Meta tags may be either of the &#39;http-equiv&#39; or &#39;name&#39; types, must contain a &#39;content&#39; attribute, and can also have either of the &#39;lang&#39; or &#39;scheme&#39; modifier attributes.
(8534) <8534> {1420349} [1420751]: The HeadMeta helper supports the following methods for setting and adding meta tags: The $keyValue item is used to define a value for the &#39;name&#39; or &#39;http-equiv&#39; key; $content is the value for the &#39;content&#39; key, and $modifiers is an optional associative array that can contain keys for &#39;lang&#39; and/or &#39;scheme&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #149 =============================
(1472) <1472> {276976} [277258]: Thus, in the example above, the controllers in the default module do not need a prefix of &#39;Default_&#39; -- they are simply dispatched according to their base controller name: &#39;IndexController&#39; and &#39;FooController&#39;.
(1908) <1908> {348527} [348662]: For example is in english the &#39;,&#39; sign used as seperator for thousands, and in german the &#39;.&#39; sign.
(2620) <2620> {471798} [471950]: The argument can be an associative array containing any or all of the keys &#39; enabled &#39;, &#39; instance &#39;, and &#39; class &#39;.
(2621) <2621> {471951} [472079]: The &#39; enabled &#39; and &#39; instance &#39; keys correspond to the boolean and instance types documented above.
(2622) <2622> {472080} [472171]: The &#39; class &#39; key is used to name a class to use for a custom profiler.
(2625) <2625> {472293} [472394]: The &#39; class &#39; option is ignored when the &#39; instance &#39; option is supplied.
(2899) <2899> {514234} [514422]: In the example PHP code above, the rule keys in the Bugs table class are: &#39;Reporter&#39; , &#39;Engineer&#39; , &#39;Verifier&#39; , and &#39;Product&#39; .
(2927) <2927> {518096} [518146]: This is the rule &#39;Reporter&#39; .
(2949) <2949> {521748} [521786]: This is the rule &#39;Reporter&#39; .
(2974) <2974> {525800} [525895]: In this case, $rule1 is &#39;Reporter&#39; and $rule2 is &#39;Product&#39; .
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #150 =============================
(1490) <1490> {280289} [280572]: With modular controllers, if a module has been specified but no controller, the dispatcher first looks for this default controller in the module path, and then falls back on the default controller found in the &#39;default&#39;, global, namespace.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #151 =============================
(1495) <1495> {281203} [281364]: You can retrieve the plugin from the front controller at any time using Zend_Controller_Front::getPlugin(&#39;Zend_Controller_Plugin_ActionStack&#39;) .
(1502) <1502> {281910} [281988]: Default value is &#39;Zend_Controller_Plugin_ActionStack&#39;.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
*****************************************************************
========================= CLASS #152 =============================
(1536) <1538> {288017} [288441]: preDispatch() is called before an action is dispatched by the dispatcher . This callback allows for proxy or filter behavior. By altering the request and resetting its dispatched flag (via Zend_Controller_Request_Abstract::setDispatched(false) ), the current action may be skipped and/or replaced.
(1539) <1541> {288459} [288879]: postDispatch() is called after an action is dispatched by the dispatcher . This callback allows for proxy or filter behavior. By altering the request and resetting its dispatched flag (via Zend_Controller_Request_Abstract::setDispatched(false) ), a new action may be specified for dispatching.
*****************************************************************
========================= CLASS #153 =============================
(1606) <1606> {300280} [300465]: The request object is passed to the front controller, or if none is provided, it is instantiated at the beginning of the dispatch process, before routing occurs.
(1829) <1829> {339207} [339271]: The request object is then passed to the dispatcher.
*****************************************************************
========================= CLASS #154 =============================
(1636) <1636> {304394} [304809]: setParamSources() allows you to specify an empty array or an array with one or more of the values &#39;_GET&#39; or &#39;_POST&#39; indicating which parameter sources are allowed (by default, both are allowed); if you wish to restrict access to only &#39;_GET&#39; specify setParamSources(array(&#39;_GET&#39;)) .
(1682) <1682> {313565} [313665]: Each array element is an array with the keys &#39;name&#39; and &#39;value&#39;.
(1908) <1908> {348527} [348662]: For example is in english the &#39;,&#39; sign used as seperator for thousands, and in german the &#39;.&#39; sign.
(2620) <2620> {471798} [471950]: The argument can be an associative array containing any or all of the keys &#39; enabled &#39;, &#39; instance &#39;, and &#39; class &#39;.
(2621) <2621> {471951} [472079]: The &#39; enabled &#39; and &#39; instance &#39; keys correspond to the boolean and instance types documented above.
(2622) <2622> {472080} [472171]: The &#39; class &#39; key is used to name a class to use for a custom profiler.
(2625) <2625> {472293} [472394]: The &#39; class &#39; option is ignored when the &#39; instance &#39; option is supplied.
(3429) <3429> {601410} [601692]: As an example, you can use any Zend_Filter concrete implementations; however, instead of referring to them as &#39;Zend_Filter_Alpha&#39; or &#39;Zend_Filter_StringToLower&#39;, you&#39;d specify only &#39;Alpha&#39; or &#39;StringToLower&#39;.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(4923) <4923> {871068} [871219]: This method takes the GET parameter&#39;s name as it&#39;s first parameter, and the GET parameter&#39;s value as it&#39;s second parameter.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6063) <6063> {1054038} [1054080]: Memory container &#39;value&#39; property.
(6857) <6857> {1163399} [1163474]: Java Lucene uses the &#39;contents&#39; field as a default field to search.
(6886) <6886> {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(7134) <7134> {1204150} [1204357]: Values specifically specified in the API include &#39;comment&#39;, &#39;trackback&#39;, &#39;pingback&#39;, and an empty string (&#39;&#39;), but it may be any value.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8533) <8533> {1420110} [1420334]: Meta tags may be either of the &#39;http-equiv&#39; or &#39;name&#39; types, must contain a &#39;content&#39; attribute, and can also have either of the &#39;lang&#39; or &#39;scheme&#39; modifier attributes.
(8534) <8534> {1420349} [1420751]: The HeadMeta helper supports the following methods for setting and adding meta tags: The $keyValue item is used to define a value for the &#39;name&#39; or &#39;http-equiv&#39; key; $content is the value for the &#39;content&#39; key, and $modifiers is an optional associative array that can contain keys for &#39;lang&#39; and/or &#39;scheme&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8709) <8709> {1449161} [1449296]: You may also pass an associative array with the keys &#39;checked&#39; and &#39;unChecked&#39;.
*****************************************************************
========================= CLASS #155 =============================
(1653) <1653> {308129} [308292]: This method looks for an HTTP request header X-Requested-With with the value &#39;XMLHttpRequest&#39;; if found, it returns true.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
*****************************************************************
========================= CLASS #156 =============================
(1696) <1696> {315989} [316151]: If no named segment is passed to appendBody(), the content is appended to the value in the &#39;default&#39; name segment.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(6886) <6886> {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #157 =============================
(1700) <1702> {316449} [316813]: If the segment exists already, it will be removed prior to the operation (i.e., overwritten and replaced). $name . If provided with a $parent segment, the new segment will be placed either before or after that segment (based on the value of $before ) in the array.
(1703) <1705> {316814} [317126]: If the segment exists already, it will be removed prior to the operation (i.e., overwritten and replaced). $name is provided (and the entire array otherwise). $spec is the name of a named segment.
*****************************************************************
========================= CLASS #158 =============================
(1713) <1713> {318239} [318392]: hasExceptionOfMessage($message) allows you to determine if an exception with a specific message is in the stack.
(1717) <1717> {318828} [318958]: getExceptionByMessage($message) allows you to retrieve all exceptions with a specific message from the stack.
*****************************************************************
========================= CLASS #159 =============================
(1714) <1714> {318410} [318554]: hasExceptionOfCode($code) allows you to determine if an exception with a specific code is in the stack.
(1719) <1719> {319094} [319215]: getExceptionByCode($code) allows you to retrieve all exceptions with a specific code from the stack.
*****************************************************************
========================= CLASS #160 =============================
(1716) <1716> {318713} [318810]: It will return false if none are found, and an array of exceptions otherwise.
(1718) <1718> {318979} [319076]: It will return false if none are found, and an array of exceptions otherwise.
(1720) <1720> {319236} [319333]: It will return false if none are found, and an array of exceptions otherwise.
*****************************************************************
========================= CLASS #161 =============================
(1733) <1733> {321602} [321745]: Line start and line end anchors (&#39;^&#39; and &#39;$&#39;, respectively) are automatically pre- and appended to all expressions.
(1908) <1908> {348527} [348662]: For example is in english the &#39;,&#39; sign used as seperator for thousands, and in german the &#39;.&#39; sign.
(2620) <2620> {471798} [471950]: The argument can be an associative array containing any or all of the keys &#39; enabled &#39;, &#39; instance &#39;, and &#39; class &#39;.
(2621) <2621> {471951} [472079]: The &#39; enabled &#39; and &#39; instance &#39; keys correspond to the boolean and instance types documented above.
(2622) <2622> {472080} [472171]: The &#39; class &#39; key is used to name a class to use for a custom profiler.
(2625) <2625> {472293} [472394]: The &#39; class &#39; option is ignored when the &#39; instance &#39; option is supplied.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(7134) <7134> {1204150} [1204357]: Values specifically specified in the API include &#39;comment&#39;, &#39;trackback&#39;, &#39;pingback&#39;, and an empty string (&#39;&#39;), but it may be any value.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #162 =============================
(1736) <1736> {321962} [322108]: This means that you will need to escape hash characters (&#39;#&#39;) but not forward slashes (&#39;/&#39;) in your route definitions.
(1763) <1763> {326442} [326559]: Route definitions consist of static and dynamic parts separated by the slash (&#39;/&#39;) character.
*****************************************************************
========================= CLASS #163 =============================
(1738) <1738> {322292} [322431]: You can get the contents of the defined subpatterns the usual way: Notice the key is an integer (1) instead of a string (&#39;1&#39;).
(5354) <5354> {950313} [950405]: To get only territories and continents use &#39;1&#39; as value.
(5513) <5513> {973006} [973098]: Yesterday would be &#39;-1&#39;, tomorrow &#39;1&#39; and so on.
*****************************************************************
========================= CLASS #164 =============================
(1770) <1770> {327728} [328022]: There you will be able to access all variables by means of the Zend_Controller_Action::_getParam() or Zend_Controller_Request::getParam() methods: Route definition can contain one more special character - a wildcard - represented by &#39;*&#39; symbol.
(1806) <1806> {334229} [334397]: These variables are later accessible through the Zend_Controller_Request::getParam() or Zend_Controller_Action::_getParam() methods.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
*****************************************************************
========================= CLASS #165 =============================
(1777) <1777> {329172} [329458]: To make it more usable, you have to provide a valid controller and a valid action as the route&#39;s defaults: This route will then result in dispatching to the method showAction() of the class ArchiveController .
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #166 =============================
(1813) <1813> {335523} [335758]: Some examples of how such routes are matched: The default route is simply a Zend_Controller_Router_Route_Module object stored under the name (index) of &#39;default&#39; in RewriteRouter.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #167 =============================
(1814) <1814> {335759} [336497]: It&#39;s created more-or-less like below: If you do not want this particular default route in your routing schema, you may override it by creating your own &#39;default&#39; route (i.e., storing it under the name of &#39;default&#39;) or removing it altogether by using removeDefaultRoutes() : Base URL and subdirectories The rewrite router can be used in subdirectories (e.g., http://domain.com/~user/application-root/ ) in which case the base URL of the application ( /~user/application-root ) should be automatically detected by Zend_Controller_Request_Http and used accordingly.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #168 =============================
(1819) <1819> {337459} [337634]: Each first-level key under that section will be used to define a route name; the above example defines the routes &#39;archive&#39; and &#39;news&#39;.
(1823) <1823> {338185} [338312]: In the example above, the &#39;news&#39; route is defined to use Zend_Controller_Router_Route_Static .
(1908) <1908> {348527} [348662]: For example is in english the &#39;,&#39; sign used as seperator for thousands, and in german the &#39;.&#39; sign.
(2620) <2620> {471798} [471950]: The argument can be an associative array containing any or all of the keys &#39; enabled &#39;, &#39; instance &#39;, and &#39; class &#39;.
(2621) <2621> {471951} [472079]: The &#39; enabled &#39; and &#39; instance &#39; keys correspond to the boolean and instance types documented above.
(2622) <2622> {472080} [472171]: The &#39; class &#39; key is used to name a class to use for a custom profiler.
(2625) <2625> {472293} [472394]: The &#39; class &#39; option is ignored when the &#39; instance &#39; option is supplied.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5266) <5266> {932434} [932518]: In the example above, &#39;Container_Tree&#39; becomes &#39;Container/Tree.php&#39;.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #169 =============================
(1820) <1820> {337635} [337862]: Each route then requires, at minimum, a &#39;route&#39; entry and one or more &#39;defaults&#39; entries; optionally one or more &#39;reqs&#39; (short for &#39;required&#39;) may be provided.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #170 =============================
(1851) <1851> {341749} [341903]: The following options has been integrated: position : Replacement for the old &#39;rules&#39; parameter.
(1852) <1852> {341925} [342009]: script : Replacement for the old &#39;script&#39; parameter.
(1854) <1854> {342222} [342306]: display : Replacement for the old &#39;rules&#39; parameter.
(1856) <1856> {342400} [342481]: name : Replacement for the ole &#39;rules&#39; parameter.
(2927) <2927> {518096} [518146]: This is the rule &#39;Reporter&#39; .
(2949) <2949> {521748} [521786]: This is the rule &#39;Reporter&#39; .
*****************************************************************
========================= CLASS #171 =============================
(1853) <1853> {342031} [342200]: format : Replacement for the old &#39;locale&#39; parameter which does not set new currencies but only the number format.
(1854) <1854> {342222} [342306]: display : Replacement for the old &#39;rules&#39; parameter.
(1856) <1856> {342400} [342481]: name : Replacement for the ole &#39;rules&#39; parameter.
(2927) <2927> {518096} [518146]: This is the rule &#39;Reporter&#39; .
(2949) <2949> {521748} [521786]: This is the rule &#39;Reporter&#39; .
(5468) <5468> {966895} [966973]: For most locales this will be &#39;gregorian&#39;.
(5470) <5470> {967154} [967222]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5472) <5472> {967402} [967470]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5478) <5478> {968070} [968138]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5480) <5480> {968314} [968382]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5489) <5489> {969506} [969607]: If you omit the value then the &#39;gregorian&#39; calendar will be used.
(5492) <5492> {969845} [969946]: If you omit the value then the &#39;gregorian&#39; calendar will be used.
(5497) <5497> {970513} [970581]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5499) <5499> {970747} [970881]: If you omit the value then the &#39;gregorian&#39; calendar will be used with the &#39;medium&#39; format.
(5500) <5500> {970882} [971004]: If you give a string then the &#39;gregorian&#39; calendar will be used with the given format.
(5502) <5502> {971238} [971306]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5504) <5504> {971472} [971606]: If you omit the value then the &#39;gregorian&#39; calendar will be used with the &#39;medium&#39; format.
(5505) <5505> {971607} [971729]: If you give a string then the &#39;gregorian&#39; calendar will be used with the given format.
(5507) <5507> {972029} [972125]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5510) <5510> {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) <5514> {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
*****************************************************************
========================= CLASS #172 =============================
(1860) <1860> {342722} [342845]: The toCurrency() method does no longer support the optional &#39;script&#39; and &#39;locale&#39; parameters.
(1908) <1908> {348527} [348662]: For example is in english the &#39;,&#39; sign used as seperator for thousands, and in german the &#39;.&#39; sign.
(1982) <1982> {357916} [358041]: Therefor a &#39; latitude &#39; and a &#39; longitude &#39; has to be given and optional the &#39; horizon &#39;.
(2620) <2620> {471798} [471950]: The argument can be an associative array containing any or all of the keys &#39; enabled &#39;, &#39; instance &#39;, and &#39; class &#39;.
(2621) <2621> {471951} [472079]: The &#39; enabled &#39; and &#39; instance &#39; keys correspond to the boolean and instance types documented above.
(2622) <2622> {472080} [472171]: The &#39; class &#39; key is used to name a class to use for a custom profiler.
(2625) <2625> {472293} [472394]: The &#39; class &#39; option is ignored when the &#39; instance &#39; option is supplied.
(3614) <3614> {632727} [632787]: The default value of this metacommand is &#39;optional&#39;.
(3629) <3629> {635311} [635360]: The default value of this metacommand is false .
(3636) <3636> {636819} [636868]: The default value of this metacommand is false .
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5468) <5468> {966895} [966973]: For most locales this will be &#39;gregorian&#39;.
(5470) <5470> {967154} [967222]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5472) <5472> {967402} [967470]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5478) <5478> {968070} [968138]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5480) <5480> {968314} [968382]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5489) <5489> {969506} [969607]: If you omit the value then the &#39;gregorian&#39; calendar will be used.
(5492) <5492> {969845} [969946]: If you omit the value then the &#39;gregorian&#39; calendar will be used.
(5497) <5497> {970513} [970581]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5499) <5499> {970747} [970881]: If you omit the value then the &#39;gregorian&#39; calendar will be used with the &#39;medium&#39; format.
(5500) <5500> {970882} [971004]: If you give a string then the &#39;gregorian&#39; calendar will be used with the given format.
(5502) <5502> {971238} [971306]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5504) <5504> {971472} [971606]: If you omit the value then the &#39;gregorian&#39; calendar will be used with the &#39;medium&#39; format.
(5505) <5505> {971607} [971729]: If you give a string then the &#39;gregorian&#39; calendar will be used with the given format.
(5507) <5507> {972029} [972125]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5510) <5510> {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) <5514> {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5665) <5665> {996327} [996437]: The &#39;locale&#39; option helps when parsing numbers and dates using separators and month names.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6063) <6063> {1054038} [1054080]: Memory container &#39;value&#39; property.
(6886) <6886> {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8533) <8533> {1420110} [1420334]: Meta tags may be either of the &#39;http-equiv&#39; or &#39;name&#39; types, must contain a &#39;content&#39; attribute, and can also have either of the &#39;lang&#39; or &#39;scheme&#39; modifier attributes.
(8534) <8534> {1420349} [1420751]: The HeadMeta helper supports the following methods for setting and adding meta tags: The $keyValue item is used to define a value for the &#39;name&#39; or &#39;http-equiv&#39; key; $content is the value for the &#39;content&#39; key, and $modifiers is an optional associative array that can contain keys for &#39;lang&#39; and/or &#39;scheme&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #173 =============================
(1862) <1862> {342978} [343176]: The methods getSymbol() , getShortName() , getName() , getRegionList() and getCurrencyList() are no longer static and can be called from within the object.
(1940) <1940> {352917} [353021]: The function getSymbol() , getShortName() and getName() accept two optional parameters.
*****************************************************************
========================= CLASS #174 =============================
(1867) <1867> {343731} [343888]: By using no parameter while creating the instance you say Zend_Currency to use the actual currency from the locale &#39;en_US&#39;.
(5468) <5468> {966895} [966973]: For most locales this will be &#39;gregorian&#39;.
(5470) <5470> {967154} [967222]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5472) <5472> {967402} [967470]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5478) <5478> {968070} [968138]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5480) <5480> {968314} [968382]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5489) <5489> {969506} [969607]: If you omit the value then the &#39;gregorian&#39; calendar will be used.
(5492) <5492> {969845} [969946]: If you omit the value then the &#39;gregorian&#39; calendar will be used.
(5497) <5497> {970513} [970581]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5499) <5499> {970747} [970881]: If you omit the value then the &#39;gregorian&#39; calendar will be used with the &#39;medium&#39; format.
(5500) <5500> {970882} [971004]: If you give a string then the &#39;gregorian&#39; calendar will be used with the given format.
(5502) <5502> {971238} [971306]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5504) <5504> {971472} [971606]: If you omit the value then the &#39;gregorian&#39; calendar will be used with the &#39;medium&#39; format.
(5505) <5505> {971607} [971729]: If you give a string then the &#39;gregorian&#39; calendar will be used with the given format.
(5507) <5507> {972029} [972125]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5510) <5510> {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) <5514> {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
*****************************************************************
========================= CLASS #175 =============================
(1868) <1868> {343889} [344012]: This leads to an instance with US Dollar set as actual currency with the formatting rules from &#39;en_US&#39;.
(2927) <2927> {518096} [518146]: This is the rule &#39;Reporter&#39; .
(2949) <2949> {521748} [521786]: This is the rule &#39;Reporter&#39; .
*****************************************************************
========================= CLASS #176 =============================
(1875) <1875> {344670} [344848]: Therefor the first parameter &#39;currency&#39; can define which currency should be used by giving the short name or full name of that currency.
(1891) <1891> {346341} [346437]: If the &#39; currency &#39; parameter is supressed the actual currency will be used.
(1965) <1965> {355658} [355694]: In our case &#39;03.March.2000&#39;.
(5510) <5510> {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) <5514> {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #177 =============================
(1880) <1880> {345197} [345355]: locale : The third parameter &#39;locale&#39; defines which locale should be used for formatting the currency.
(5468) <5468> {966895} [966973]: For most locales this will be &#39;gregorian&#39;.
(5470) <5470> {967154} [967222]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5472) <5472> {967402} [967470]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5478) <5478> {968070} [968138]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5480) <5480> {968314} [968382]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5489) <5489> {969506} [969607]: If you omit the value then the &#39;gregorian&#39; calendar will be used.
(5492) <5492> {969845} [969946]: If you omit the value then the &#39;gregorian&#39; calendar will be used.
(5497) <5497> {970513} [970581]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5499) <5499> {970747} [970881]: If you omit the value then the &#39;gregorian&#39; calendar will be used with the &#39;medium&#39; format.
(5500) <5500> {970882} [971004]: If you give a string then the &#39;gregorian&#39; calendar will be used with the given format.
(5502) <5502> {971238} [971306]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5504) <5504> {971472} [971606]: If you omit the value then the &#39;gregorian&#39; calendar will be used with the &#39;medium&#39; format.
(5505) <5505> {971607} [971729]: If you give a string then the &#39;gregorian&#39; calendar will be used with the given format.
(5507) <5507> {972029} [972125]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5510) <5510> {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) <5514> {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
*****************************************************************
========================= CLASS #178 =============================
(1892) <1892> {346438} [346653]: The region &#39; de &#39; for example knows the currencies &#39; EUR &#39; and &#39; DEM &#39;... &#39; EUR &#39; is the actual one and will be used if the parameter is supressed.
(1908) <1908> {348527} [348662]: For example is in english the &#39;,&#39; sign used as seperator for thousands, and in german the &#39;.&#39; sign.
(2620) <2620> {471798} [471950]: The argument can be an associative array containing any or all of the keys &#39; enabled &#39;, &#39; instance &#39;, and &#39; class &#39;.
(2621) <2621> {471951} [472079]: The &#39; enabled &#39; and &#39; instance &#39; keys correspond to the boolean and instance types documented above.
(2622) <2622> {472080} [472171]: The &#39; class &#39; key is used to name a class to use for a custom profiler.
(2625) <2625> {472293} [472394]: The &#39; class &#39; option is ignored when the &#39; instance &#39; option is supplied.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5518) <5518> {973864} [974002]: The currency has to be given in ISO format which is for example &#39;EUR&#39; for the currency &#39;euro&#39;.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5532) <5532> {975556} [975664]: The currency has to be given as ISO4217 code for example &#39;EUR&#39; for euro.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #179 =============================
(1914) <1914> {349229} [349339]: The default script for most locales is &#39;Latn&#39; , which includes the digits 0 to 9.
(5468) <5468> {966895} [966973]: For most locales this will be &#39;gregorian&#39;.
(5470) <5470> {967154} [967222]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5472) <5472> {967402} [967470]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5478) <5478> {968070} [968138]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5480) <5480> {968314} [968382]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5489) <5489> {969506} [969607]: If you omit the value then the &#39;gregorian&#39; calendar will be used.
(5492) <5492> {969845} [969946]: If you omit the value then the &#39;gregorian&#39; calendar will be used.
(5497) <5497> {970513} [970581]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5499) <5499> {970747} [970881]: If you omit the value then the &#39;gregorian&#39; calendar will be used with the &#39;medium&#39; format.
(5500) <5500> {970882} [971004]: If you give a string then the &#39;gregorian&#39; calendar will be used with the given format.
(5502) <5502> {971238} [971306]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5504) <5504> {971472} [971606]: If you omit the value then the &#39;gregorian&#39; calendar will be used with the &#39;medium&#39; format.
(5505) <5505> {971607} [971729]: If you give a string then the &#39;gregorian&#39; calendar will be used with the given format.
(5507) <5507> {972029} [972125]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5510) <5510> {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) <5514> {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
*****************************************************************
========================= CLASS #180 =============================
(1932) <1933> {351823} [352069]: For example $ for the US Dollar within the locale &#39; en_US . getShortName() : Returns the abbreviation of the actual currency or a given currency.
(1934) <1935> {352071} [352311]: For example USD for the US Dollar within the locale &#39; en_US . getName() : Returns the full name of the actual currency of a given currency.
*****************************************************************
========================= CLASS #181 =============================
(1936) <1936> {352312} [352425]: For example US Dollar for the US Dollar within the locale &#39; en_US .
(5468) <5468> {966895} [966973]: For most locales this will be &#39;gregorian&#39;.
(5470) <5470> {967154} [967222]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5472) <5472> {967402} [967470]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5478) <5478> {968070} [968138]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5480) <5480> {968314} [968382]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5489) <5489> {969506} [969607]: If you omit the value then the &#39;gregorian&#39; calendar will be used.
(5492) <5492> {969845} [969946]: If you omit the value then the &#39;gregorian&#39; calendar will be used.
(5497) <5497> {970513} [970581]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5499) <5499> {970747} [970881]: If you omit the value then the &#39;gregorian&#39; calendar will be used with the &#39;medium&#39; format.
(5500) <5500> {970882} [971004]: If you give a string then the &#39;gregorian&#39; calendar will be used with the given format.
(5502) <5502> {971238} [971306]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5504) <5504> {971472} [971606]: If you omit the value then the &#39;gregorian&#39; calendar will be used with the &#39;medium&#39; format.
(5505) <5505> {971607} [971729]: If you give a string then the &#39;gregorian&#39; calendar will be used with the given format.
(5507) <5507> {972029} [972125]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5510) <5510> {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) <5514> {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
*****************************************************************
========================= CLASS #182 =============================
(1961) <1961> {355191} [355352]: So with the third parameter we are able to recognise dates like &#39;01.JÃ¤nner.2000&#39; or &#39;01.January.2000&#39; depending on the given locale.
(2620) <2620> {471798} [471950]: The argument can be an associative array containing any or all of the keys &#39; enabled &#39;, &#39; instance &#39;, and &#39; class &#39;.
(2621) <2621> {471951} [472079]: The &#39; enabled &#39; and &#39; instance &#39; keys correspond to the boolean and instance types documented above.
(2622) <2622> {472080} [472171]: The &#39; class &#39; key is used to name a class to use for a custom profiler.
(2625) <2625> {472293} [472394]: The &#39; class &#39; option is ignored when the &#39; instance &#39; option is supplied.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #183 =============================
(1977) <1977> {357309} [357379]: The &#39; horizon &#39; parameter is always optional in all functions.
(1982) <1982> {357916} [358041]: Therefor a &#39; latitude &#39; and a &#39; longitude &#39; has to be given and optional the &#39; horizon &#39;.
(2620) <2620> {471798} [471950]: The argument can be an associative array containing any or all of the keys &#39; enabled &#39;, &#39; instance &#39;, and &#39; class &#39;.
(2621) <2621> {471951} [472079]: The &#39; enabled &#39; and &#39; instance &#39; keys correspond to the boolean and instance types documented above.
(2622) <2622> {472080} [472171]: The &#39; class &#39; key is used to name a class to use for a custom profiler.
(2625) <2625> {472293} [472394]: The &#39; class &#39; option is ignored when the &#39; instance &#39; option is supplied.
(3614) <3614> {632727} [632787]: The default value of this metacommand is &#39;optional&#39;.
(3629) <3629> {635311} [635360]: The default value of this metacommand is false .
(3636) <3636> {636819} [636868]: The default value of this metacommand is false .
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #184 =============================
(2025) <2025> {362843} [362996]: Ouput a Date The date in a Zend_Date object may be obtained as a localized integer or string using the get() method.
(2256) <2256> {415017} [415037]: Use get() instead.
*****************************************************************
========================= CLASS #185 =============================
(2043) <2043> {366600} [369152]: Day Constants Constant Description Date Affected part/example Zend_Date::DAY Day (as a number, two digit) 2009-02-06T14:53:27+01:00 2009-02- 06 T14:53:27+01:00 (06) Zend_Date::DAY_SHORT Day (as a number, one or two digit) 2009-02-06T14:53:27+01:00 2009-02-0 6 T14:53:27+01:00 (6) Zend_Date::WEEKDAY Weekday (Name of the day, localized, complete) 2009-02-06T14:53:27+01:00 Friday Zend_Date::WEEKDAY_SHORT Weekday (Name of the day, localized, abbreviated, the first three digits) 2009-02-06T14:53:27+01:00 Fre for Friday Zend_Date::WEEKDAY_NAME Weekday (Name of the day, localized, abbreviated, the first two digits) 2009-02-06T14:53:27+01:00 Fr for Friday Zend_Date::WEEKDAY_NARROW Weekday (Name of the day, localized, abbreviated, only the first digit) 2009-02-06T14:53:27+01:00 F for Friday Zend_Date::WEEKDAY_DIGIT Weekday (0 = Sunday, 6 = Saturday) 2009-02-06T14:53:27+01:00 5 for Friday Zend_Date::WEEKDAY_8601 Weekday according to ISO 8601 (1 = Monday, 7 = Sunday) 2009-02-06T14:53:27+01:00 5 for Friday Zend_Date::DAY_OF_YEAR Day (as a number, one or two digit) 2009-02-06T14:53:27+01:00 43 Zend_Date::DAY_SUFFIX English addendum for the day (st, nd, rd, th) 2009-02-06T14:53:27+01:00 th Week Constants Constant Description Date Affected part/example Zend_Date::WEEK Week (as a number, 1-53) 2009-02-06T14:53:27+01:00 7 Month Constants Constant Description Date Affected part/example Zend_Date::MONTH_NAME Month (Name of the month, localized, complete) 2009-02-06T14:53:27+01:00 February Zend_Date::MONTH_NAME_SHORT Month (Name of the month, localized, abbreviated, three digit) 2009-02-06T14:53:27+01:00 Feb Zend_Date::MONTH_NAME_NARROW Month (Name of the month, localized, abbreviated, one digit) 2009-02-06T14:53:27+01:00 F Zend_Date::MONTH Month (Number of the month, two digit) 2009-02-06T14:53:27+01:00 2009- 02 -06T14:53:27+01:00 (02) Zend_Date::MONTH_SHORT Month (Number of the month, one or two digit) 2009-02-06T14:53:27+01:00 2009-0 2 -06T14:53:27+01:00 (2) Zend_Date::MONTH_DAYS Number of days for this month (number) 2009-02-06T14:53:27+01:00 28 Year Constants Constant Description Date Affected part/example Zend_Date::YEAR Year (number) 2009-02-06T14:53:27+01:00 2009 -02-06T14:53:27+01:00 Zend_Date::YEAR_8601 Year according to ISO 8601 (number) 2009-02-06T14:53:27+01:00 2009 Zend_Date::YEAR_SHORT Year (number, two digit) 2009-02-06T14:53:27+01:00 20 09 -02-06T14:53:27+01:00 Zend_Date::YEAR_SHORT_8601 Year according to ISO 8601 (number, two digit) 2009-02-06T14:53:27+01:00 09 Zend_Date::LEAPYEAR Is the year a leap year?
(2246) <2246> {410396} [410420]: Is the year a leap year?
*****************************************************************
========================= CLASS #186 =============================
(2053) <2053> {374341} [374466]: The following examples illustrate the usage of constants from the table below to create self-defined ISO formats.
(2078) <2078> {380276} [380397]: The following examples illustrate the usage of constants from the table below to create self-defined formats.
*****************************************************************
========================= CLASS #187 =============================
(2074) <2074> {379599} [379864]: Self-defined OUTPUT formats using PHP&#39;s date() format specifiers If you are more comfortable with PHP&#39;s date format specifier than with ISO format specifiers, then you can use the PHP&#39;s date() format specifiers .
(2148) <2148> {393418} [393569]: If you are more comfortable with PHP&#39;s date format specifier than with ISO format specifiers, then you can use $format parameter.
*****************************************************************
========================= CLASS #188 =============================
(2080) <2080> {380640} [380996]: In most cases, when the CLDR/ISO format does not have an equivalent format specifier, the PHP format specifier is not altered by Zend_Locale_Format::convertPhpToIsoFormat() , and the Zend_Date methods then recognize these &quot;peculiar&quot; PHP format specifiers, even when in the default &quot;ISO&quot; format mode.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #189 =============================
(2081) <2081> {381006} [382418]: Constants for PHP date output Constant Description Corresponds best to closest CLDR equivalent Affected part/example d Day of the month, two digit Zend_Date::DAY dd 09 D Day of the week, localized, abbreviated, three digit Zend_Date::WEEKDAY_SHORT EEE Mon j Day of the month, one or two digit Zend_Date::DAY_SHORT d 9 l (lowercase L) Day of the week, localized, complete Zend_Date::WEEKDAY EEEE Monday N Number of the weekday, one digit Zend_Date::WEEKDAY_8601 e 4 S English suffixes for day of month, two chars no equivalent no equivalent st w Number of the weekday, 0=sunday, 6=saturday Zend_Date::WEEKDAY_DIGIT no equivalent 4 z Day of the year, one, two or three digit Zend_Date::DAY_OF_YEAR D 7 W Week, one or two digit Zend_Date::WEEK w 5 F Month, localized, complete Zend_Date::MONTH_NAME MMMM February m Month, two digit Zend_Date::MONTH MM 02 M Month, localized, abbreviated Zend_Date::MONTH_NAME_SHORT MMM Feb n Month, one or two digit Zend_Date::MONTH_SHORT M 2 t Number of days per month, one or two digits Zend_Date::MONTH_DAYS no equivalent 30 L Leapyear, boolean Zend_Date::LEAPYEAR no equivalent true o Year according to ISO 8601, at least four digit Zend_Date::YEAR_8601 YYYY 2009 Y Year, at least four digit Zend_Date::YEAR yyyy 2009 y Year, at least two digit Zend_Date::YEAR_SHORT yy 09 a Time of day, localized Zend_Date::MERIDIEM a (sort of, but likely to be uppercase) vorm.
(2082) <2082> {382419} [382528]: A Time of day, localized Zend_Date::MERIDIEM a (sort of, but no guarantee that the format is uppercase) VORM.
*****************************************************************
========================= CLASS #190 =============================
(2145) <2145> {392540} [392740]: When date strings conform to &quot;Y/m/d&quot; or &quot;Y-m-d H:i:s&quot;, according to PHP date() format tokens, use Zend_Date&#39;s built-in support for ISO 8601 formatted dates.
(2230) <2230> {405641} [405677]: Zend_Date&#39;s results are correct.
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #191 =============================
(2173) <2173> {397969} [398026]: To examine an object&#39;s timezone use getTimeZone()) .
(2174) <2174> {398027} [398096]: To change an object&#39;s timezone, use setTimeZone()) .
*****************************************************************
========================= CLASS #192 =============================
(2201) <2201> {402028} [402141]: In the list below, all combinations of &quot;Date Parts&quot; and &quot;Basic Operations&quot; exist.
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #193 =============================
(2205) <2205> {402603} [402734]: &quot;Year&quot; or &quot;Minute&quot;) identify the units of the $date operand, when $date is a string or integer.
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #194 =============================
(2216) <2219> {403770} [404433]: Day Zend_Date::DAY_SHORT is extracted from $date if the $date operand is an instance of Zend_Date or a numeric string. Otherwise, an attempt is made to extract the day according to the conventions documented for these constants: Zend_Date::WEEKDAY_NARROW , Zend_Date::WEEKDAY_NAME , Zend_Date::WEEKDAY_SHORT , Zend_Date::WEEKDAY (Gregorian calendar assumed) Week Zend_Date::WEEK is extracted from $date if the $date operand is an instance of Zend_Date or a numeric string. Otherwise an exception is raised. (Gregorian calendar assumed) Date Zend_Date::DAY_MEDIUM is extracted from $date if the $date operand is an instance of Zend_Date .
(2223) <2226> {404708} [405369]: Zend_Date::WEEKDAY_DIGIT is extracted from $date , if the $date operand is an instance of Zend_Date or a numeric string. Otherwise, an attempt is made to extract the day according to the conventions documented for these constants: Zend_Date::WEEKDAY_NARROW , Zend_Date::WEEKDAY_NAME , Zend_Date::WEEKDAY_SHORT , Zend_Date::WEEKDAY (Gregorian calendar assumed) DayOfYear In Zend_Date , the day of the year represents the number of calendar days elapsed since the start of the year (0-365). As with other units above, fractions are rounded down to the nearest whole number. (Gregorian calendar assumed) Arpa Arpa dates (i.e.
*****************************************************************
========================= CLASS #195 =============================
(2228) <2228> {405410} [405525]: Output uses either a &quot;GMT&quot; or &quot;Local differential hours+min&quot; format (see section 5 of RFC 822).
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #196 =============================
(2233) <2234> {406083} [406546]: Basic Operations Basic Operation Explanation get() get($part = null, $locale = null) Use get($part) to retrieve the date $part of this object&#39;s date localized to $locale as a formatted string or integer. When using the BCMath extension, numeric strings might be returned instead of integers for large values.
(2257) <2258> {415067} [415373]: get() get($part = null, $locale = null) This method returns the $part of object&#39;s date localized to $locale as a formatted string or integer. See for more information.
*****************************************************************
========================= CLASS #197 =============================
(2237) <2237> {407140} [407347]: add() add($date, $part = null, $locale = null) Adds the $part of $date having a locale $locale to the current object&#39;s date.
(2238) <2238> {407381} [407595]: sub() sub($date, $part = null, $locale = null) Subtracts the $part of $date having a locale $locale from the current object&#39;s date.
*****************************************************************
========================= CLASS #198 =============================
(2242) <2242> {408520} [409585]: Date Comparison Methods Method Explanation equals() equals($date, $part = null, $locale = null) returns true, if $part of $date having locale $locale is the same as this object&#39;s date $part , otherwise false isEarlier() isEarlier($date, $part = null, $locale = null) returns true, if $part of this object&#39;s date is earlier than $part of $date having a locale $locale isLater() isLater($date, $part = null, $locale = null) returns true, if $part of this object&#39;s date is later than $part of $date having a locale $locale isToday() isToday() Tests if today&#39;s year, month, and day match this object&#39;s date value, using this object&#39;s timezone.
(2243) <2243> {409615} [409820]: isTomorrow() isTomorrow() Tests if tomorrow&#39;s year, month, and day match this object&#39;s date value, using this object&#39;s timezone.
(2244) <2244> {409850} [410058]: isYesterday() isYesterday() Tests if yesterday&#39;s year, month, and day match this object&#39;s date value, using this object&#39;s timezone.
(2257) <2257> {415067} [415281]: get() get($part = null, $locale = null) This method returns the $part of object&#39;s date localized to $locale as a formatted string or integer.
*****************************************************************
========================= CLASS #199 =============================
(2305) <2305> {424329} [424500]: If the database is running on the same host as the PHP application, you may use &#39;localhost&#39; or &#39;127.0.0.1&#39;.
(2620) <2620> {471798} [471950]: The argument can be an associative array containing any or all of the keys &#39; enabled &#39;, &#39; instance &#39;, and &#39; class &#39;.
(2621) <2621> {471951} [472079]: The &#39; enabled &#39; and &#39; instance &#39; keys correspond to the boolean and instance types documented above.
(2622) <2622> {472080} [472171]: The &#39; class &#39; key is used to name a class to use for a custom profiler.
(2625) <2625> {472293} [472394]: The &#39; class &#39; option is ignored when the &#39; instance &#39; option is supplied.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #200 =============================
(2316) <2316> {426135} [426291]: Passing the case-folding option to the factory You can specify this option by the constant Zend_Db::CASE_FOLDING .
(2319) <2319> {426682} [426848]: Passing the auto-quoting option to the factory You can specify this option by the constant Zend_Db::AUTO_QUOTE_IDENTIFIERS .
*****************************************************************
========================= CLASS #201 =============================
(2345) <2345> {430988} [431156]: Reading Query Results This section describes methods of the Adapter class with which you can run SELECT queries and retrieve the query results.
(2390) <2390> {437384} [437450]: This section describes methods to do these operations.
*****************************************************************
========================= CLASS #202 =============================
(2347) <2347> {431359} [431451]: The first argument to this method is a string containing a SELECT statement.
(8456) <8456> {1407038} [1407137]: The first argument of this method is a string containing the error message.
*****************************************************************
========================= CLASS #203 =============================
(2362) <2363> {433575} [433650]: Specify this when instantiating the Adapter. See .
(2491) <2492> {453829} [453912]: Specify this when instantiating the Adapter. See .
*****************************************************************
========================= CLASS #204 =============================
(2378) <2378> {435565} [435619]: Any other columns returned by the query are discarded.
(2383) <2383> {436144} [436214]: Any other columns returned by the query are discarded.
*****************************************************************
========================= CLASS #205 =============================
(2381) <2381> {435943} [436053]: The key of this associative array is taken from the first column returned by the SELECT query.
(2382) <2382> {436055} [436142]: The value is taken from the second column returned by the SELECT query.
*****************************************************************
========================= CLASS #206 =============================
(2391) <2392> {437460} [437757]: Inserting Data You can add new rows to a table in your database using the insert() method. The first argument is a string that names the table, and the second argument is an associative array, mapping column names to data values.
(3067) <3068> {541816} [541945]: Use the insert() method of your Table object. The argument is an associative array, mapping column names to values.
*****************************************************************
========================= CLASS #207 =============================
(2414) <2414> {440995} [441380]: Using lastSequenceId() For RDBMS brands that don&#39;t support sequences, including MySQL, Microsoft SQL Server, and SQLite, the arguments to the lastInsertId() method are ignored, and the value returned is the most recent value generated for any table by INSERT operations during the current connection.
(2733) <2733> {490513} [490564]: Some RDBMS brands don&#39;t support this join type.
(2739) <2739> {491248} [491299]: Some RDBMS brands don&#39;t support this join type.
*****************************************************************
========================= CLASS #208 =============================
(2422) <2422> {442387} [442732]: Using a strong transaction isolation mode such as &quot;repeatable read&quot; can mitigate this risk, but some RDBMS brands don&#39;t support the transaction isolation required for this, or else your application may use a lower transaction isolation mode by design.
(2733) <2733> {490513} [490564]: Some RDBMS brands don&#39;t support this join type.
(2739) <2739> {491248} [491299]: Some RDBMS brands don&#39;t support this join type.
*****************************************************************
========================= CLASS #209 =============================
(2427) <2427> {443779} [444001]: This method takes three arguments: the first is the name of the table; the second is an associative array mapping columns to change to new values to assign to these columns.
(2438) <2438> {445326} [445414]: This method takes two arguments: the first is a string naming the table.
*****************************************************************
========================= CLASS #210 =============================
(2430) <2437> {444221} [445324]: The third argument is a string containing an SQL expression that is used as criteria for the rows to change. The values and identifiers in this argument are not quoted or escaped. You are responsible for ensuring that any dynamic content is interpolated into this string safely. See for methods to help you do this. The return value is the number of rows affected by the update operation. Updating rows If you omit the third argument, then all rows in the database table are updated with the values specified in the data array. If you provide an array of strings as the third argument, these strings are joined together as terms in an expression separated by AND operators. Updating rows using an array of expressions Deleting Data You can delete rows from a database table using the delete() method.
(2439) <2446> {445445} [446536]: The second argument is a string containing an SQL expression that is used as criteria for the rows to delete. The values and identifiers in this argument are not quoted or escaped. You are responsible for ensuring that any dynamic content is interpolated into this string safely. See for methods to help you do this. The return value is the number of rows affected by the delete operation. Deleting rows If you omit the second argument, the result is that all rows in the database table are deleted. If you provide an array of strings as the second argument, these strings are joined together as terms in an expression separated by AND operators. Quoting Values and Identifiers When you form SQL queries, often it is the case that you need to include the values of PHP variables in SQL expressions.
*****************************************************************
========================= CLASS #211 =============================
(2552) <2564> {461440} [463378]: IBM DB2 Specify this Adapter to the factory() method with the name &#39;Db2&#39;. This Adapter uses the PHP extension ibm_db2. IBM DB2 supports both sequences and auto-incrementing keys. Therefore the arguments to lastInsertId() are optional. If you give no arguments, the Adapter returns the last value generated for an auto-increment key. If you give arguments, the Adapter returns the last value generated by the sequence named according to the convention &#39; table _ column _seq&#39;. MySQLi Specify this Adapter to the factory() method with the name &#39;Mysqli&#39;. This Adapter utilizes the PHP extension mysqli. MySQL does not support sequences, so lastInsertId() ignores its arguments and always returns the last value generated for an auto-increment key. The lastSequenceId() method returns null . Oracle Specify this Adapter to the factory() method with the name &#39;Oracle&#39;. This Adapter uses the PHP extension oci8. Oracle does not support auto-incrementing keys, so you should specify the name of a sequence to lastInsertId() or lastSequenceId() .
(2590) <2602> {467169} [469483]: PDO PostgreSQL Specify this Adapter to the factory() method with the name &#39;Pdo_Pgsql&#39;. This Adapter uses the PHP extensions pdo and pdo_pgsql. PostgreSQL supports both sequences and auto-incrementing keys. Therefore the arguments to lastInsertId() are optional. If you give no arguments, the Adapter returns the last value generated for an auto-increment key. If you give arguments, the Adapter returns the last value generated by the sequence named according to the convention &#39; table _ column _seq&#39;. PDO SQLite Specify this Adapter to the factory() method with the name &#39;Pdo_Sqlite&#39;. This Adapter uses the PHP extensions pdo and pdo_sqlite. SQLite does not support sequences, so lastInsertId() ignores its arguments and always returns the last value generated for an auto-increment key. The lastSequenceId() method returns null . To connect to an SQLite2 database, specify &#39;dsnprefix&#39;=&gt;&#39;sqlite2&#39; in the array of parameters when creating an instance of the Pdo_Sqlite Adapter. To connect to an in-memory SQLite database, specify &#39;dbname&#39;=&gt;&#39;:memory:&#39; in the array of parameters when creating an instance of the Pdo_Sqlite Adapter. Older versions of the SQLite driver for PHP do not seem to support the PRAGMA commands necessary to ensure that short column names are used in result sets.
*****************************************************************
========================= CLASS #212 =============================
(2567) <2567> {463588} [463696]: Currently the Zend_Db::CASE_FOLDING option is not supported by the Oracle adapter.
(2606) <2606> {470201} [470321]: Currently the Zend_Db::CASE_FOLDING option is not supported by the Firebird/interbase adapter.
*****************************************************************
========================= CLASS #213 =============================
(2569) <2570> {463808} [464086]: PDO for IBM DB2 and Informix Dynamic Server (IDS) Specify this Adapter to the factory() method with the name &#39;Pdo_Ibm&#39;. This Adapter uses the PHP extensions pdo and pdo_ibm.
(2573) <2574> {464357} [464614]: PDO Microsoft SQL Server Specify this Adapter to the factory() method with the name &#39;Pdo_Mssql&#39;. This Adapter uses the PHP extensions pdo and pdo_mssql.
(2583) <2584> {466054} [466296]: PDO MySQL Specify this Adapter to the factory() method with the name &#39;Pdo_Mysql&#39;. This Adapter uses the PHP extensions pdo and pdo_mysql.
(2587) <2588> {466654} [466893]: PDO Oracle Specify this Adapter to the factory() method with the name &#39;Pdo_Oci&#39;. This Adapter uses the PHP extensions pdo and pdo_oci.
*****************************************************************
========================= CLASS #214 =============================
(2575) <2576> {464661} [464965]: Microsoft SQL Server does not support sequences, so lastInsertId() ignores its arguments and always returns the last value generated for an auto-increment key. The lastSequenceId() method returns null .
(2585) <2586> {466343} [466632]: MySQL does not support sequences, so lastInsertId() ignores its arguments and always returns the last value generated for an auto-increment key. The lastSequenceId() method returns null .
*****************************************************************
========================= CLASS #215 =============================
(2579) <2579> {465323} [465459]: The value can be &quot;mssql&quot; (the default), &quot;dblib&quot;, &quot;freetds&quot;, or &quot;sybase&quot;.
(2581) <2581> {465596} [465804]: Both &quot;freetds&quot; and &quot;sybase&quot; imply a prefix of &quot;sybase:&quot;, which is used for the FreeTDS set of libraries.
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #216 =============================
(2589) <2589> {466940} [467147]: Oracle does not support auto-incrementing keys, so you should specify the name of a sequence to lastInsertId() or lastSequenceId() .
(2605) <2605> {469935} [470154]: Firebird/interbase does not support auto-incrementing keys, so you should specify the name of a sequence to lastInsertId() or lastSequenceId() .
*****************************************************************
========================= CLASS #217 =============================
(2590) <2590> {467169} [467314]: PDO PostgreSQL Specify this Adapter to the factory() method with the name &#39;Pdo_Pgsql&#39;.
(2596) <2596> {468074} [468216]: PDO SQLite Specify this Adapter to the factory() method with the name &#39;Pdo_Sqlite&#39;.
*****************************************************************
========================= CLASS #218 =============================
(2612) <2612> {471079} [471136]: The value of the &#39; profiler &#39; option is flexible.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
*****************************************************************
========================= CLASS #219 =============================
(2616) <2616> {471461} [471556]: The profiler class is the adapter&#39;s default profiler class, Zend_Db_Profiler .
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #220 =============================
(2666) <2668> {479849} [480364]: Example of the using methods to add clauses You also can use most methods of the Zend_Db_Select object with a convenient fluent interface. A fluent interface means that each method returns a reference to the object on which it was called, so you can immediately call another method. Example of the using the fluent interface The examples in this section show usage of the fluent interface, but you can use the non-fluent interface in all cases.
(5824) <5826> {1019539} [1019947]: You also can use most methods of the Zend_Mail object with a convenient fluent interface. A fluent interface means that each method returns a reference to the object on which it was called, so you can immediately call another method. Configuring the default sendmail transport The default transport for a Zend_Mail instance is Zend_Mail_Transport_Sendmail .
*****************************************************************
========================= CLASS #221 =============================
(2678) <2678> {481563} [481763]: You can specify the table name as &quot; schemaName.tableName &quot;, where Zend_Db_Select quotes each part individually, or you may specify the schema name separately.
(2687) <2687> {482978} [483023]: Zend_Db_Select quotes each part individually.
*****************************************************************
========================= CLASS #222 =============================
(2680) <2680> {481939} [482134]: Example of specifying a schema name Adding Columns In the second argument of the from() method, you can specify the columns to select from the respective table.
(2751) <2751> {493138} [493194]: The second argument to the where() method is optional.
*****************************************************************
========================= CLASS #223 =============================
(2681) <2681> {482135} [482255]: If you specify no columns, the default is &quot; * &quot;, the SQL wildcard for &quot;all columns&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #224 =============================
(2688) <2688> {483024} [483194]: If you don&#39;t specify a correlation name for a column, it uses the correlation name for the table named in the current from() method.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #225 =============================
(2713) <2713> {487137} [487381]: No quoting is applied to the expression you specify for the join condition; if you have column names that need to be quoted, you must use quoteIdentifier() as you form the string for the join condition.
(2750) <2750> {492940} [493103]: If you have column names that need to be quoted, you must use quoteIdentifier() as you form the string for the condition.
(2776) <2776> {496901} [497064]: If you have column names that need to be quoted, you must use quoteIdentifier() as you form the string for the condition.
*****************************************************************
========================= CLASS #226 =============================
(2715) <2715> {487531} [487721]: It defaults to &quot; * &quot;, supports correlation names, expressions, and Zend_Db_Expr in the same way as the array of column names in the from() method.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #227 =============================
(2725) <2725> {488859} [488899]: All RDBMS brands support this join type.
(2727) <2727> {489298} [489338]: All RDBMS brands support this join type.
*****************************************************************
========================= CLASS #228 =============================
(2726) <2726> {488921} [489251]: LEFT JOIN with the All rows from the left operand table are included, matching rows from the right operand table included, and the columns from the right operand table are filled with NULLs if no row exists matching the left table.
(2729) <2729> {489486} [489770]: All rows from the right operand table are included, matching rows from the left operand table included, and the columns from the left operand table are filled with NULLs if no row exists matching the right table.
*****************************************************************
========================= CLASS #229 =============================
(2730) <2731> {489817} [490211]: Some RDBMS brands don&#39;t support this join type, but in general any right join can be represented as a left join by reversing the order of the tables. FULL JOIN with the A full outer join is like combining a left outer join and a right outer join.
(2733) <2734> {490513} [490693]: Some RDBMS brands don&#39;t support this join type. CROSS JOIN with the A cross join is a Cartesian product.
*****************************************************************
========================= CLASS #230 =============================
(2738) <2738> {491151} [491247]: The joinCross() method has no parameter to specify the join condition.
(2743) <2743> {491837} [491935]: The joinNatural() method has no parameter to specify the join condition.
*****************************************************************
========================= CLASS #231 =============================
(2746) <2746> {492296} [492474]: Example of the joinUsing() method Each of the applicable join methods in the Zend_Db_Select component has a corresponding &#39;using&#39; method.
(3773) <3773> {660893} [661016]: As a result, &#39;My_Decorator_Label&#39; will now be used when the &#39;Label&#39; decorator is requested.
*****************************************************************
========================= CLASS #232 =============================
(2749) <2749> {492785} [492939]: Example of the where() method No quoting is applied to expressions given to the where() or orWhere() methods.
(2775) <2775> {496743} [496900]: Example of the having() method No quoting is applied to expressions given to the having() or orHaving() methods.
*****************************************************************
========================= CLASS #233 =============================
(2772) <2772> {496297} [496372]: The first argument is a string containing a SQL expression.
(2826) <2826> {504789} [504848]: The first argument is a string containing an SQL statement.
*****************************************************************
========================= CLASS #234 =============================
(2801) <2801> {500409} [500537]: The query() method returns an object of type Zend_Db_Statement or PDOStatement, depending on the adapter type.
(2803) <2803> {500809} [500944]: Both methods return an object of type Zend_Db_Statement or PDOStatement, depending on the adapter type.
*****************************************************************
========================= CLASS #235 =============================
(2812) <2812> {502355} [502572]: For example, the string &#39;from&#39; identifies the part of the Select object that stores information about the tables in the FROM clause, including joined tables.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #236 =============================
(2815) <2815> {502787} [503519]: Constants used by getPart() and reset() Constant String value Zend_Db_Select::DISTINCT &#39;distinct&#39; Zend_Db_Select::FOR_UPDATE &#39;forupdate&#39; Zend_Db_Select::COLUMNS &#39;columns&#39; Zend_Db_Select::FROM &#39;from&#39; Zend_Db_Select::WHERE &#39;where&#39; Zend_Db_Select::GROUP &#39;group&#39; Zend_Db_Select::HAVING &#39;having&#39; Zend_Db_Select::ORDER &#39;order&#39; Zend_Db_Select::LIMIT_COUNT &#39;limitcount&#39; Zend_Db_Select::LIMIT_OFFSET &#39;limitoffset&#39; Example of the getPart() method Resetting Parts of the Select Object The reset() method enables you to clear one specified part of the SQL query, or else clear all parts of the SQL query if you omit the argument.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #237 =============================
(2827) <2827> {504861} [504976]: The optional second argument is an array of values to bind to parameter placeholders in the SQL string.
(2836) <2836> {506084} [506188]: The single argument is an array of value to bind to parameter placeholders in the statement.
*****************************************************************
========================= CLASS #238 =============================
(2889) <2889> {513208} [513279]: Use the class name, not the physical name of the SQL table.
(2904) <2904> {514977} [515036]: Use the class name, not the physical name of the SQL table.
*****************************************************************
========================= CLASS #239 =============================
(2898) <2898> {514108} [514211]: It&#39;s best to use a string that can be part of a PHP method name, as you will see later.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #240 =============================
(2901) <2902> {514546} [514882]: The elements of this rule entry are described below: columns =&gt; A string or an array of strings naming the foreign key column name(s) in the dependent table. It&#39;s common for this to be a single column, but some tables have multi-column keys.
(2908) <2909> {515578} [515852]: refColumns =&gt; A string or an array of strings naming the primary key column name(s) in the parent table. It&#39;s common for this to be a single column, but some tables have multi-column keys.
*****************************************************************
========================= CLASS #241 =============================
(2905) <2905> {515075} [515247]: It&#39;s common for a dependent table to have only one reference to its parent table, but some tables have multiple references to the same parent table.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #242 =============================
(2912) <2912> {516136} [516309]: If you don&#39;t specify the refColumns , the column(s) reported as the primary key columns of the parent table are used by default.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #243 =============================
(2919) <2920> {517157} [517359]: The first argument $table can be a string that specifies the dependent table by its class name. You can also specify the dependent table by using an object of that table class.
(2941) <2942> {520724} [520920]: The first argument $table can be a string that specifies the parent table by its class name. You can also specify the parent table by using an object of that table class.
*****************************************************************
========================= CLASS #244 =============================
(2922) <2926> {517572} [518095]: The second argument $rule is optional. It is a string that names the rule key in the $_referenceMap array of the dependent table class. If you don&#39;t specify a rule, the first rule in the array that references the parent table is used. If you need to use a rule other than the first, you need to specify the key. In the example code above, the rule key is not specified, so the rule used by default is the first one that matches the parent table.
(2944) <2948> {521229} [521747]: The second argument $rule is optional. It is a string that names the rule key in the $_referenceMap array of the dependent table class. If you don&#39;t specify a rule, the first rule in the array that references the parent table is used. If you need to use a rule other than the first, you need to specify the key. In the example above, the rule key is not specified, so the rule used by default is the first one that matches the parent table.
*****************************************************************
========================= CLASS #245 =============================
(2928) <2928> {518156} [518375]: Fetching a Dependent Rowset By a Specific Rule This example shows getting a Row object from the table Accounts , and finding the Bugs assigned to be fixed by the user of that account.
(2931) <2931> {518675} [518976]: Fetching a Dependent Rowset using a Zend_Db_Table_Select This example shows getting a Row object from the table Accounts , and finding the Bugs assigned to be fixed by the user of that account, limited only to 3 rows and ordered by name.
*****************************************************************
========================= CLASS #246 =============================
(2929) <2930> {518376} [518665]: The rule key string that corresponds to this reference relationship in this example is &#39;Engineer&#39; . You can also add criteria, ordering and limits to your relationships using the parent row&#39;s select object.
(2951) <2952> {522000} [522254]: The rule key string that corresponds to this reference relationship in this example is &#39;Engineer&#39; . Alternatively, you can query rows from a parent table using a &quot;magic method&quot;.
*****************************************************************
========================= CLASS #247 =============================
(2932) <2934> {519008} [519729]: Alternatively, you can query rows from a dependent table using a special mechanism called a &quot;magic method&quot;. Zend_Db_Table_Row_Abstract invokes the method: $row-&gt;find&lt;TableClass&gt;() $row-&gt;find&lt;TableClass&gt;By&lt;Rule&gt;() In the patterns above, &lt;TableClass&gt; and &lt;Rule&gt; are strings that correspond to the class name of the dependent table, and the dependent table&#39;s rule key that references the parent table. Some application frameworks, such as Ruby on Rails, use a mechanism called &quot;inflection&quot; to allow the spelling of identifiers to change depending on usage.
(2952) <2954> {522167} [522728]: Alternatively, you can query rows from a parent table using a &quot;magic method&quot;. Zend_Db_Table_Row_Abstract invokes the method: In the patterns above, &lt;TableClass&gt; and &lt;Rule&gt; are strings that correspond to the class name of the parent table, and the dependent table&#39;s rule key that references the parent table. The table identity and the rule key named in the method call must match the spelling of the class and rule key exactly.
*****************************************************************
========================= CLASS #248 =============================
(2936) <2938> {519823} [520293]: The table identity and the rule key named in the method call must match the spelling of the class and rule key exactly. Fetching Dependent Rowsets using the Magic Method This example shows finding dependent Rowsets equivalent to those in the previous examples. In this case, the application uses the magic method invocation instead of specifying the table and rule as strings.
(2954) <2956> {522593} [523038]: The table identity and the rule key named in the method call must match the spelling of the class and rule key exactly. Fetching the Parent Row using the Magic Method This example shows finding parent Rows equivalent to those in the previous examples. In this case, the application uses the magic method invocation instead of specifying the table and rule as strings.
*****************************************************************
========================= CLASS #249 =============================
(2961) <2961> {523962} [524056]: You can also specify the destination table by using an object of that table class.
(2963) <2963> {524277} [524372]: You can also specify the intersection table by using an object of that table class.
*****************************************************************
========================= CLASS #250 =============================
(2964) <2964> {524382} [524650]: Fetching a Rowset with the Many-to-many Method This example shows geting a Row object from from the origin table Bugs , and finding rows from the destination table Products , representing products related to that bug.
(2975) <2975> {525905} [526192]: Fetching a Rowset with the Many-to-many Method By a Specific Rule This example shows geting a Row object from from the origin table Bugs , and finding rows from the destination table Products , representing products related to that bug.
*****************************************************************
========================= CLASS #251 =============================
(2987) <2987> {528687} [528819]: It&#39;s usually not necessary to update the value of a primary key that was generated by a sequence or other mechanism.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #252 =============================
(2990) <2990> {529123} [529290]: Set the associative array keys &#39;onDelete&#39; and &#39;onUpdate&#39; to the string &#39;cascade&#39; (or the constant self::CASCADE ).
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8709) <8709> {1449161} [1449296]: You may also pass an associative array with the keys &#39;checked&#39; and &#39;unChecked&#39;.
*****************************************************************
========================= CLASS #253 =============================
(2993) <2993> {529720} [529838]: The &#39;onDelete&#39; element of the reference map entry is set to self::CASCADE .
(2995) <2995> {529991} [530087]: The &#39;onUpdate&#39; element of the reference map entry is self::RESTRICT .
*****************************************************************
========================= CLASS #254 =============================
(3009) <3009> {532223} [532402]: Cascading deletes and updates defined in your Zend_Db_Table classes are applied if you execute the save() or delete() methods on the Row class.
(3235) <3235> {568477} [568534]: You can do that with the save() method.
*****************************************************************
========================= CLASS #255 =============================
(3019) <3019> {533443} [533549]: The solution also includes a class that implements the Row Data Gateway pattern.
(3219) <3219> {565993} [566078]: Zend_Db_Table_Row is an implementation of the Row Data Gateway pattern.
*****************************************************************
========================= CLASS #256 =============================
(3023) <3023> {534017} [534161]: Declaring a table class with explicit table name If you don&#39;t specify the table name, it defaults to the name of the class.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #257 =============================
(3027) <3027> {534740} [534874]: In some RDBMS brands, the term for schema is &quot;database&quot; or &quot;tablespace,&quot; but it is used similarly.
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #258 =============================
(3030) <3030> {535308} [535514]: Declaring table and schema names upon instantiation If you don&#39;t specify the schema name, it defaults to the schema to which your database adapter instance is connected.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #259 =============================
(3034) <3034> {535915} [536169]: Example of specifying the primary key If you don&#39;t specify the primary key, Zend_Db_Table_Abstract tries to discover the primary key based on the information provided by the describeTable() Â´ method.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #260 =============================
(3049) <3049> {538646} [538793]: This is recommended over the __construct method if you do not need to alter the metadata in any programmatic way.
(3267) <3267> {573654} [573801]: This is recommended over the __construct method if you do not need to alter the metadata in any programmatic way.
*****************************************************************
========================= CLASS #261 =============================
(3096) <3102> {546153} [547184]: This method takes two arguments: an associative array of columns to change and new values to assign to these columns; and an SQL expression that is used in a WHERE clause, as criteria for the rows to change in the UPDATE operation. Example of updating rows in a Table Since the table update() method proxies to the database adapter update() method, the second argument can be an array of SQL expressions. The expressions are combined as Boolean terms using an AND operator. The values and identifiers in the SQL expression are not quoted for you. If you have values or identifiers that require quoting, you are responsible for doing this. Use the quote() , quoteInto() , and quoteIdentifier() methods of the database adapter. Deleting Rows from a Table You can delete rows from a database table using the delete() method.
(3103) <3109> {547185} [548029]: This method takes one argument, which is an SQL expression that is used in a WHERE clause, as criteria for the rows to delete. Example of deleting rows from a Table The second argument can be an array of SQL expressions. The expressions are combined as Boolean terms using an AND operator. Since the table delete() method proxies to the database adapter delete() method, the second argument can be an array of SQL expressions. The expressions are combined as Boolean terms using an AND operator. The values and identifiers in the SQL expression are not quoted for you. If you have values or identifiers that require quoting, you are responsible for doing this.
*****************************************************************
========================= CLASS #262 =============================
(3115) <3115> {548914} [549110]: The find() method might return fewer rows than the number of values you specify for the primary key, if some of the values don&#39;t match any rows in the database table.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
*****************************************************************
========================= CLASS #263 =============================
(3117) <3117> {549149} [549300]: Because the number of rows returned is variable, the find() method returns an object of type Zend_Db_Table_Rowset_Abstract .
(3140) <3140> {552989} [553075]: This method returns an object of type Zend_Db_Table_Rowset_Abstract .
*****************************************************************
========================= CLASS #264 =============================
(3149) <3149> {554348} [554466]: If a save() method is called on a partial row then only the fields available will be modified.
(3235) <3235> {568477} [568534]: You can do that with the save() method.
*****************************************************************
========================= CLASS #265 =============================
(3162) <3162> {556375} [556522]: If the search criteria you specified match no rows in the database table, then fetchRow() returns PHP&#39;s null value.
(3298) <3298> {578733} [578822]: If the Rowset contains zero rows, current() returns PHP&#39;s null value.
*****************************************************************
========================= CLASS #266 =============================
(3166) <3166> {557008} [557084]: cols =&gt; an array, naming the column(s) of the table.
(3167) <3167> {557102} [557187]: primary =&gt; an array, naming the column(s) in the primary key.
*****************************************************************
========================= CLASS #267 =============================
(3170) <3171> {557421} [557608]: rowClass =&gt; the name of the concrete class used for Row objects returned by methods of this table instance. This defaults to Zend_Db_Table_Row.
(3172) <3173> {557626} [557822]: rowsetClass =&gt; the name of the concrete class used for Rowset objects returned by methods of this table instance. This defaults to Zend_Db_Table_Rowset.
*****************************************************************
========================= CLASS #268 =============================
(3180) <3180> {558472} [558673]: That is, when a new table object is created, the object&#39;s default behavior is to fetch the table metadata from the database using the adapter&#39;s describeTable() method.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #269 =============================
(3192) <3192> {561489} [561663]: You can specify Row and Rowset classes using the Table constructor&#39;s options array, in keys &#39;rowClass&#39; and &#39;rowsetClass&#39; respectively.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8709) <8709> {1449161} [1449296]: You may also pass an associative array with the keys &#39;checked&#39; and &#39;unChecked&#39;.
*****************************************************************
========================= CLASS #270 =============================
(3204) <3206> {563374} [564090]: Custom method to find bugs by status Define Inflection in Zend_Db_Table Some people prefer that the table class name match a table name in the RDBMS by using a string transformation called inflection . For example, if your table class name is &quot; BugsProducts &quot;, it would match the physical table in the database called &quot; bugs_products ,&quot; if you omit the explicit declaration of the $_name class property. In this inflection mapping, the class name spelled in &quot;CamelCase&quot; format would be transformed to lower case, and words are separated with an underscore.
(3279) <3281> {576033} [576394]: Define Inflection in Zend_Db_Table_Row Some people prefer that the table class name match a table name in the RDBMS by using a string transformation called inflection . Zend_Db classes do not implement inflection by default. See for an explanation of this policy.
*****************************************************************
========================= CLASS #271 =============================
(3214) <3215> {565372} [565599]: Example of an abstract table class that implements inflection You are responsible for writing the functions to perform inflection transformation. Zend Framework does not provide such a function.
(3285) <3286> {577060} [577208]: You are responsible for writing the functions to perform inflection transformation. Zend Framework does not provide such a function.
*****************************************************************
========================= CLASS #272 =============================
(3220) <3220> {566088} [566344]: Fetching a Row Zend_Db_Table_Abstract provides methods find() and fetchAll() , which each return an object of type Zend_Db_Table_Rowset, and the method fetchRow() , which returns an object of type Zend_Db_Table_Row.
(3290) <3290> {577675} [577845]: Fetching a Rowset Zend_Db_Table_Abstract provides methods find() and fetchAll() , each of which returns an object of type Zend_Db_Table_Rowset_Abstract .
*****************************************************************
========================= CLASS #273 =============================
(3229) <3229> {567502} [567611]: Example of using the toArray() method The array returned from toArray() is not updateable.
(3315) <3315> {580901} [580984]: Using toArray() The array returned from toArray() is not updateable.
*****************************************************************
========================= CLASS #274 =============================
(3249) <3266> {570718} [573653]: Serializing a Row Simply use PHP&#39;s serialize() function to create a string containing a byte-stream representation of the Row object argument. Example of serializing a row Unserializing Row Data Use PHP&#39;s unserialize() function to restore a string containing a byte-stream representation of an object. The function returns the original object. Note that the Row object returned is in a disconnected state. You can read the Row object and its properties, but you cannot change values in the Row or execute other methods that require a database connection (for example, queries against related tables). Example of unserializing a serialized row Why do Rows unserialize in a disconnected state? A serialized object is a string that is readable to anyone who possesses it. It could be a security risk to store parameters such as database account and password in plain, unencrypted text in the serialized string. You would not want to store such data to a text file that is not protected, or send it in an email or other medium that is easily read by potential attackers. The reader of the serialized object should not be able to use it to gain access to your database without knowing valid credentials. Reactivating a Row as Live Data You can reactivate a disconnected Row, using the setTable() method. The argument to this method is a valid object of type Zend_Db_Table_Abstract, which you create. Creating a Table object requires a live connection to the database, so by reassociating the Table with the Row, the Row gains access to the database. Subsequently, you can change values in the Row object and save the changes to the database. Example of reactivating a row Extending the Row class Zend_Db_Table_Row is the default concrete class that extends Zend_Db_Table_Row_Abstract. You can define your own concrete class for instances of Row by extending Zend_Db_Table_Row_Abstract. To use your new Row class to store results of Table queries, specify the custom Row class by name either in the $_rowClass protected member of a Table class, or in the array argument of the constructor of a Table object. Specifying a custom Row class Row initialization If application-specific logic needs to be initialized when a row is constructed, you can select to move your tasks to the init() method, which is called after all row metadata has been processed.
(3319) <3336> {581397} [584068]: Serializing a Rowset Simply use PHP&#39;s serialize() function to create a string containing a byte-stream representation of the Rowset object argument. Unserializing a Serialized Rowset Use PHP&#39;s unserialize() function to restore a string containing a byte-stream representation of an object. The function returns the original object. Note that the Rowset object returned is in a disconnected state. You can iterate through the Rowset and read the Row objects and their properties, but you cannot change values in the Rows or execute other methods that require a database connection (for example, queries against related tables). Why do Rowsets unserialize in a disconnected state? A serialized object is a string that is readable to anyone who possesses it. It could be a security risk to store parameters such as database account and password in plain, unencrypted text in the serialized string. You would not want to store such data to a text file that is not protected, or send it in an email or other medium that is easily read by potential attackers. The reader of the serialized object should not be able to use it to gain access to your database without knowing valid credentials. You can reactivate a disconnected Rowset using the setTable() method. The argument to this method is a valid object of type Zend_Db_Table_Abstract , which you create. Creating a Table object requires a live connection to the database, so by reassociating the Table with the Rowset, the Rowset gains access to the database. Subsequently, you can change values in the Row objects contained in the Rowset and save the changes to the database. Reactivating a Rowset as Live Data Reactivating a Rowset with setTable() also reactivates all the Row objects contained in that Rowset. Extending the Rowset class You can use an alternative concrete class for instances of Rowsets by extending Zend_Db_Table_Rowset_Abstract. Specify the custom Rowset class by name either in the $_rowsetClass protected member of a Table class, or in the array argument of the constructor of a Table object. Specifying a custom Rowset class Typically, the standard Zend_Db_Rowset concrete class is sufficient for most usage.
*****************************************************************
========================= CLASS #275 =============================
(3306) <3306> {579788} [579946]: getRow() allows you to get a specific row in the Rowset, knowing its position; don&#39;t forget however that positions start with index zero.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #276 =============================
(3360) <3360> {587748} [587925]: If the link is to an alternate version of the same content that&#39;s in the feed, it would have a rel=&quot;alternate&quot; attribute.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
*****************************************************************
========================= CLASS #277 =============================
(3361) <3361> {587943} [588851]: subtitle - The feed&#39;s description, equivalent to RSS&#39; channel description author-&gt;name() - The feed author&#39;s name author-&gt;email() - The feed author&#39;s email address Atom entries commonly have the following properties: id - The entry&#39;s unique identifier title - The entry&#39;s title, same as RSS item titles link - A link to another format or an alternate view of this entry summary - A summary of this entry&#39;s content content - The full content of the entry; can be skipped if the feed just contains summaries author - with name and email sub-tags like feeds have published - the date the entry was published, in RFC 3339 format updated - the date the entry was last updated, in RFC 3339 format For more information on Atom and plenty of resources, see http://www.atomenabled.org/ .
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
(6886) <6886> {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
*****************************************************************
========================= CLASS #278 =============================
(3369) <3369> {590366} [590582]: If channel properties have attributes, they are accessible using PHP&#39;s array syntax: Since XML attributes cannot have children, method syntax is not necessary for accessing attribute values.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #279 =============================
(3417) <3417> {599991} [600243]: As an example, you may find you need to transform MixedCase or camelCasedWords into a path; for readability, OS policies, or other reasons, you also need to lower case this, and you want to separate the words using a dash (&#39;-&#39;).
(6906) <6906> {1170604} [1170652]: &#39;-&#39; is used to define a prohibited term.
(6910) <6910> {1171156} [1171197]: false is used to define prohibited term.
(6919) <6919> {1172520} [1172572]: &#39;-&#39; is used to define a prohibited subquery.
(6923) <6923> {1173087} [1173132]: false is used to define prohibited subquery.
*****************************************************************
========================= CLASS #280 =============================
(3475) <3476> {610028} [610206]: Alnum Returns the string $value , removing all but alphabetic and digit characters. This filter includes an option to also allow white space characters.
(3477) <3478> {610216} [610384]: Alpha Returns the string $value , removing all but alphabetic characters. This filter includes an option to also allow white space characters.
*****************************************************************
========================= CLASS #281 =============================
(3482) <3482> {610855} [611120]: Int Returns (int) $value RealPath Expands all symbolic links and resolves references to &#39;/./&#39;, &#39;/../&#39; and extra &#39;/&#39; characters in the input path and return the canonicalized absolute pathname.
(3483) <3483> {611121} [611223]: The resulting path will have no symbolic link, &#39;/./&#39; or &#39;/../&#39; components.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #282 =============================
(3487) <3487> {611512} [611627]: StringToLower Returns the string $value , converting alphabetic characters to lowercase as necessary.
(3488) <3488> {611637} [611752]: StringToUpper Returns the string $value , converting alphabetic characters to uppercase as necessary.
*****************************************************************
========================= CLASS #283 =============================
(3497) <3498> {613070} [613244]: It also provides a simple filter chaining mechanism by which multiple filters may be applied to a single datum in a user-defined order. What is a filter?
(8440) <8441> {1404193} [1404376]: It also provides a simple validator chaining mechanism by which multiple validators may be applied to a single datum in a user-defined order. What is a validator?
*****************************************************************
========================= CLASS #284 =============================
(3508) <3508> {614621} [614798]: A filter that escapes the HTML entities, however, transforms the input (e.g., &quot; &amp; &quot; is transformed to &quot; &amp;amp; &quot;).
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
(7028) <7028> {1187232} [1187280]: operators &amp;&amp;, ||, and !
*****************************************************************
========================= CLASS #285 =============================
(3511) <3517> {615284} [616805]: Following is a basic example of using a filter upon two input data, the ampersand ( &amp; ) and double quote ( &quot; ) characters: Using the static get() method If it&#39;s inconvenient to load a given filter class and create an instance of the filter, you can use the static method Zend_Filter::get() as an alternative invocation style. The first argument of this method is a data input value, that you would pass to the filter() method. The second argument is a string, which corresponds to the basename of the filter class, relative to the Zend_Filter namespace. The get() method automatically loads the class, creates an instance, and applies the filter() method to the data input. You can also pass an array of constructor arguments, if they are needed for the filter class. The static usage can be convenient for invoking a filter ad hoc, but if you have the need to run a filter for multiple inputs, it&#39;s more efficient to follow the first example above, creating an instance of the filter object and calling its filter() method. Also, the Zend_Filter_Input class allows you to instantiate and run multiple filter and validator classes on demand to process sets of input data.
(8470) <8476> {1408971} [1410032]: Using the static is() method If it&#39;s inconvenient to load a given validation class and create an instance of the validator, you can use the static method Zend_Validate::is() as an alternative invocation style. The first argument of this method is a data input value, that you would pass to the isValid() method. The second argument is a string, which corresponds to the basename of the validation class, relative to the Zend_Validate namespace. The is() method automatically loads the class, creates an instance, and applies the isValid() method to the data input. You can also pass an array of constructor arguments, if they are needed for the validator. The is() method returns a boolean value, the same as the isValid() method. When using the static is() method, validation failure messages are not available.
*****************************************************************
========================= CLASS #286 =============================
(3536) <3536> {619008} [619318]: For example, the characters &#39;&lt;&#39; and &#39;&gt;&#39; delimit HTML tags, and if a string containing those characters is output in an HTML context, the content between them might affect the output or functionality of the HTML presentation.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8715) <8715> {1450678} [1450780]: setElementSeparator($string) ; default is &#39;&lt;/li&gt;&lt;li&gt;&#39;.
(8716) <8716> {1450802} [1450899]: setElementEnd($string) ; default is &#39;&lt;/li&gt;&lt;/ul&gt;&#39;.
*****************************************************************
========================= CLASS #287 =============================
(3541) <3541> {620197} [620404]: The following example filter rule set that declares the field &#39;month&#39; is filtered by Zend_Filter_Digits, and the field &#39;account&#39; is filtered by Zend_Filter_StringTrim.
(3542) <3542> {620406} [620557]: Then a validation rule set declares that the field &#39;account&#39; is valid only if it contains only alphabetical characters.
*****************************************************************
========================= CLASS #288 =============================
(3551) <3551> {621886} [622016]: You can use a special &quot;wildcard&quot; rule key &#39;*&#39; in either the filters array or the validators array.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
*****************************************************************
========================= CLASS #289 =============================
(3571) <3571> {624636} [624947]: Missing fields are those that are not present in the input data, but were declared with the metacommand &#39;presence&#39;=&gt;&#39;required&#39; (see the later section on metacommands).
(5845) <5845> {1022857} [1022981]: to use CRAM-MD5 you would pass &#39;auth&#39; =&gt; &#39;crammd5&#39; in the Zend_Mail_Transport_Smtp constructor.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #290 =============================
(3580) <3580> {626277} [626510]: You can specify the message returned by getMissing() using the &#39;missingMessage&#39; option, as an argument to the Zend_Filter_Input constructor or using the setOptions() method.
(3631) <3631> {635737} [635945]: You can specify this message using the &#39;notEmptyMessage&#39; option, as an argument to the Zend_Filter_Input constructor or using the setOptions() method.
*****************************************************************
========================= CLASS #291 =============================
(3600) <3600> {630055} [630295]: The FIELDS metacommand If the rule name for a filter or validator is different than the field to which it should apply, you can specify the field name with the &#39;fields&#39; metacommand.
(3604) <3604> {630918} [631021]: The default value of the &#39;fields&#39; metacommand is the index of the current rule.
(3605) <3605> {631023} [631193]: In the example above, if the &#39;fields&#39; metacommand is not specified, the rule would apply to the input field named &#39;month&#39;.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
(5266) <5266> {932434} [932518]: In the example above, &#39;Container_Tree&#39; becomes &#39;Container/Tree.php&#39;.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6063) <6063> {1054038} [1054080]: Memory container &#39;value&#39; property.
(6857) <6857> {1163399} [1163474]: Java Lucene uses the &#39;contents&#39; field as a default field to search.
(6886) <6886> {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8533) <8533> {1420110} [1420334]: Meta tags may be either of the &#39;http-equiv&#39; or &#39;name&#39; types, must contain a &#39;content&#39; attribute, and can also have either of the &#39;lang&#39; or &#39;scheme&#39; modifier attributes.
(8534) <8534> {1420349} [1420751]: The HeadMeta helper supports the following methods for setting and adding meta tags: The $keyValue item is used to define a value for the &#39;name&#39; or &#39;http-equiv&#39; key; $content is the value for the &#39;content&#39; key, and $modifiers is an optional associative array that can contain keys for &#39;lang&#39; and/or &#39;scheme&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #292 =============================
(3601) <3601> {630326} [630466]: You can specify this metacommand using the class constant Zend_Filter_Input::FIELDS instead of the string.
(3613) <3613> {632554} [632696]: You can specify this metacommand using the class constant Zend_Filter_Input::PRESENCE instead of the string.
(3616) <3616> {633080} [633227]: You can specify this metacommand using the class constant Zend_Filter_Input::DEFAULT_VALUE instead of the string.
(3628) <3628> {635135} [635280]: You can specify this metacommand using the class constant Zend_Filter_Input::ALLOW_EMPTY instead of the string.
(3635) <3635> {636643} [636788]: You can specify this metacommand using the class constant Zend_Filter_Input::BREAK_CHAIN instead of the string.
(3642) <3642> {638025} [638167]: You can specify this metacommand using the class constant Zend_Filter_Input::MESSAGES instead of the string.
*****************************************************************
========================= CLASS #293 =============================
(3603) <3603> {630627} [630887]: The string &#39;month&#39; simply becomes a mnemonic key for this filtering rule; it is not used as the field name if the field is specified with the &#39;fields&#39; metacommand, but it is used as the rule name.
(3604) <3604> {630918} [631021]: The default value of the &#39;fields&#39; metacommand is the index of the current rule.
(3605) <3605> {631023} [631193]: In the example above, if the &#39;fields&#39; metacommand is not specified, the rule would apply to the input field named &#39;month&#39;.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
(5266) <5266> {932434} [932518]: In the example above, &#39;Container_Tree&#39; becomes &#39;Container/Tree.php&#39;.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6063) <6063> {1054038} [1054080]: Memory container &#39;value&#39; property.
(6857) <6857> {1163399} [1163474]: Java Lucene uses the &#39;contents&#39; field as a default field to search.
(6886) <6886> {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8533) <8533> {1420110} [1420334]: Meta tags may be either of the &#39;http-equiv&#39; or &#39;name&#39; types, must contain a &#39;content&#39; attribute, and can also have either of the &#39;lang&#39; or &#39;scheme&#39; modifier attributes.
(8534) <8534> {1420349} [1420751]: The HeadMeta helper supports the following methods for setting and adding meta tags: The $keyValue item is used to define a value for the &#39;name&#39; or &#39;http-equiv&#39; key; $content is the value for the &#39;content&#39; key, and $modifiers is an optional associative array that can contain keys for &#39;lang&#39; and/or &#39;scheme&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #294 =============================
(3606) <3606> {631224} [631389]: Another use of the &#39;fields&#39; metacommand is to specify fields for filters or validators that require multiple fields as input.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #295 =============================
(3607) <3607> {631391} [631568]: If the &#39;fields&#39; metacommand is an array, the argument to the corresponding filter or validator is an array of the values of those fields.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #296 =============================
(3610) <3610> {631957} [632190]: If the validation of this rule fails, the rule key ( &#39;password&#39; ) is used in the return value of getInvalid() , not any of the fields named in the &#39;fields&#39; metacommand.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6886) <6886> {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(7134) <7134> {1204150} [1204357]: Values specifically specified in the API include &#39;comment&#39;, &#39;trackback&#39;, &#39;pingback&#39;, and an empty string (&#39;&#39;), but it may be any value.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8533) <8533> {1420110} [1420334]: Meta tags may be either of the &#39;http-equiv&#39; or &#39;name&#39; types, must contain a &#39;content&#39; attribute, and can also have either of the &#39;lang&#39; or &#39;scheme&#39; modifier attributes.
(8534) <8534> {1420349} [1420751]: The HeadMeta helper supports the following methods for setting and adding meta tags: The $keyValue item is used to define a value for the &#39;name&#39; or &#39;http-equiv&#39; key; $content is the value for the &#39;content&#39; key, and $modifiers is an optional associative array that can contain keys for &#39;lang&#39; and/or &#39;scheme&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #297 =============================
(3612) <3612> {632349} [632523]: If the value of this metacommand is &#39;required&#39; then the field must exist in the input data, or else it is reported as a missing field.
(3614) <3614> {632727} [632787]: The default value of this metacommand is &#39;optional&#39;.
(3629) <3629> {635311} [635360]: The default value of this metacommand is false .
(3636) <3636> {636819} [636868]: The default value of this metacommand is false .
*****************************************************************
========================= CLASS #298 =============================
(3615) <3615> {632801} [633049]: The DEFAULT_VALUE metacommand If a field is not present in the input data, and you specify a value for the &#39;default&#39; metacommand for that rule, the field takes the value of the metacommand.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6063) <6063> {1054038} [1054080]: Memory container &#39;value&#39; property.
(6857) <6857> {1163399} [1163474]: Java Lucene uses the &#39;contents&#39; field as a default field to search.
(6886) <6886> {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8533) <8533> {1420110} [1420334]: Meta tags may be either of the &#39;http-equiv&#39; or &#39;name&#39; types, must contain a &#39;content&#39; attribute, and can also have either of the &#39;lang&#39; or &#39;scheme&#39; modifier attributes.
(8534) <8534> {1420349} [1420751]: The HeadMeta helper supports the following methods for setting and adding meta tags: The $keyValue item is used to define a value for the &#39;name&#39; or &#39;http-equiv&#39; key; $content is the value for the &#39;content&#39; key, and $modifiers is an optional associative array that can contain keys for &#39;lang&#39; and/or &#39;scheme&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #299 =============================
(3623) <3624> {634275} [634571]: The ALLOW_EMPTY metacommand By default, if a field exists in the input data, then validators are applied to it, even if the value of the field is an empty string ( &#39;&#39; ). This is likely to result in a failure to validate.
(7134) <7135> {1204150} [1204451]: Values specifically specified in the API include &#39;comment&#39;, &#39;trackback&#39;, &#39;pingback&#39;, and an empty string (&#39;&#39;), but it may be any value. comment_author , name of the person submitting the data.
*****************************************************************
========================= CLASS #300 =============================
(3633) <3633> {636234} [636417]: Alternatively, if the value of the &#39;breakChainOnFailure&#39; metacommand is true , the validator chain terminates after the first validator fails.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
*****************************************************************
========================= CLASS #301 =============================
(3639) <3639> {637210} [637392]: With the latter class, the defined value of the &#39;breakChainOnFailure&#39; metacommand for a rule applies uniformly for all validators in the rule.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
*****************************************************************
========================= CLASS #302 =============================
(3644) <3644> {638331} [638516]: If you have multiple validators for which you want to set the error message, you should use an array for the value of the &#39;messages&#39; metacommand.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6063) <6063> {1054038} [1054080]: Memory container &#39;value&#39; property.
(6857) <6857> {1163399} [1163474]: Java Lucene uses the &#39;contents&#39; field as a default field to search.
(6886) <6886> {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8533) <8533> {1420110} [1420334]: Meta tags may be either of the &#39;http-equiv&#39; or &#39;name&#39; types, must contain a &#39;content&#39; attribute, and can also have either of the &#39;lang&#39; or &#39;scheme&#39; modifier attributes.
(8534) <8534> {1420349} [1420751]: The HeadMeta helper supports the following methods for setting and adding meta tags: The $keyValue item is used to define a value for the &#39;name&#39; or &#39;http-equiv&#39; key; $content is the value for the &#39;content&#39; key, and $modifiers is an optional associative array that can contain keys for &#39;lang&#39; and/or &#39;scheme&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #303 =============================
(3651) <3651> {639341} [639486]: You can use these keys in the &#39;messages&#39; metacommand by passing an associative array instead of a string.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8709) <8709> {1449161} [1449296]: You may also pass an associative array with the keys &#39;checked&#39; and &#39;unChecked&#39;.
*****************************************************************
========================= CLASS #304 =============================
(3653) <3653> {639745} [640064]: Using options to set metacommands for all rules The default value for &#39;allowEmpty&#39;, &#39;breakChainOnFailure&#39;, and &#39;presence&#39; metacommands can be set for all rules using the $options argument to the constructor of Zend_Filter_Input.
(3655) <3655> {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6063) <6063> {1054038} [1054080]: Memory container &#39;value&#39; property.
(6857) <6857> {1163399} [1163474]: Java Lucene uses the &#39;contents&#39; field as a default field to search.
(6886) <6886> {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(6927) <6927> {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8533) <8533> {1420110} [1420334]: Meta tags may be either of the &#39;http-equiv&#39; or &#39;name&#39; types, must contain a &#39;content&#39; attribute, and can also have either of the &#39;lang&#39; or &#39;scheme&#39; modifier attributes.
(8534) <8534> {1420349} [1420751]: The HeadMeta helper supports the following methods for setting and adding meta tags: The $keyValue item is used to define a value for the &#39;name&#39; or &#39;http-equiv&#39; key; $content is the value for the &#39;content&#39; key, and $modifiers is an optional associative array that can contain keys for &#39;lang&#39; and/or &#39;scheme&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #305 =============================
(3668) <3668> {642379} [642621]: In the submitted form, we&#39;ll now have three elements, the &#39;save&#39; element for the submit, and then two arrays, &#39;shipping&#39; and &#39;billing&#39;, each with keys for their various elements.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #306 =============================
(3685) <3685> {645438} [645560]: The key to creating a multi-page form is to utilize sub forms, but to display only one such sub form per page.
(3941) <3941> {698500} [698526]: Creating multi-page forms.
*****************************************************************
========================= CLASS #307 =============================
(3720) <3720> {651601} [651795]: Before each decorator&#39;s render() method is called, the current item is set in the decorator using setElement() , giving the decorator awareness of the item being rendered.
(3738) <3738> {654061} [654141]: Each decorator&#39;s render() method accepts a string, $content .
*****************************************************************
========================= CLASS #308 =============================
(3724) <3725> {652360} [652740]: Standard options include: placement : Placement can be either &#39;append&#39; or &#39;prepend&#39; (case insensitive), and indicates whether content passed to render() will be appended or prepended, respectively. In the case that a decorator replaces the content, this setting is ignored.
(8551) <8552> {1423993} [1424236]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;. HeadScript overrides each of append() , offsetSet() , prepend() , and set() to enforce usage of the special methods as listed above.
(8575) <8576> {1428487} [1428861]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;. HeadStyle overrides each of append() , offsetSet() , prepend() , and set() to enforce usage of the special methods as listed above.
*****************************************************************
========================= CLASS #309 =============================
(3745) <3745> {655192} [655457]: As an example, let&#39;s say you wanted to reduce the number of decorators you use, and build a &quot;composite&quot; decorator that took care of rendering the label, element, any error messages, and description in an HTML div .
(8687) <8687> {1445632} [1445686]: Let&#39;s say we want a helper named &#39;fooBar&#39;.
*****************************************************************
========================= CLASS #310 =============================
(3746) <3746> {655458} [656078]: You might build such a &#39;Composite&#39; decorator as follows: You can then place this in the decorator path: You can then specify this decorator as &#39;Composite&#39; and attach it to an element: While this example showed how to create a decorator that renders complex output from several element properties, you can also create decorators that handle a single aspect of an element; the &#39;Decorator&#39; and &#39;Label&#39; decorators are excellent examples of this practice.
(3759) <3759> {658384} [658534]: The following loader types are used with the various plugin loader methods: &#39;validate&#39;, &#39;filter&#39;, and &#39;decorator&#39;.
(3773) <3773> {660893} [661016]: As a result, &#39;My_Decorator_Label&#39; will now be used when the &#39;Label&#39; decorator is requested.
(3892) <3892> {686360} [686490]: The following loader types are used with the various plugin loader methods: &#39;element&#39; and &#39;decorator&#39;.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #311 =============================
(3748) <3748> {656278} [656864]: For example, if you wanted to simply display that an error occurred when validating an element, but not display each of the individual validation error messages, you might create your own &#39;Errors&#39; decorator: In this particular example, because the decorator&#39;s final segment, &#39;Errors&#39;, matches the same as Zend_Form_Decorator_Errors , it will be rendered in place of that decorator -- meaning you would not need to change any decorators to modify the output.
(4007) <4007> {713793} [713819]: Validation error messages.
(4008) <4008> {713821} [713885]: Validation error messages may be translated.
*****************************************************************
========================= CLASS #312 =============================
(3757) <3758> {658038} [658361]: Plugin Loaders Zend_Form_Element makes use of Zend_Loader_PluginLoader to allow developers to specify locations of alternate validators, filters, and decorators. Each has its own plugin loader associated with it, and general accessors are used to retrieve and modify each.
(3890) <3891> {686034} [686337]: Plugin Loaders Zend_Form makes use of Zend_Loader_PluginLoader to allow developers to specify locations of alternate elements and decorators. Each has its own plugin loader associated with it, and general accessors are used to retrieve and modify each.
*****************************************************************
========================= CLASS #313 =============================
(3760) <3760> {658535} [658583]: The type names are case insensitive.
(3893) <3893> {686491} [686539]: The type names are case insensitive.
*****************************************************************
========================= CLASS #314 =============================
(3763) <3763> {658923} [659016]: getPluginLoader($type) : retrieves the plugin loader associated with $type .
(3894) <3894> {686562} [686727]: The methods used to interact with plugin loaders are as follows: getPluginLoader($type) : retrieves the plugin loader associated with $type.
*****************************************************************
========================= CLASS #315 =============================
(3765) <3765> {659038} [659378]: If $type is null, it will attempt to add the path to all loaders, by appending the prefix with each of &quot;_Validate&quot;, &quot;_Filter&quot;, and &quot;_Decorator&quot;; and appending the path with &quot;Validate/&quot;, &quot;Filter/&quot;, and &quot;Decorator/&quot;.
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #316 =============================
(3767) <3767> {659578} [659723]: Custom validators, filters, and decorators are an easy way to share functionality between forms and encapsulate custom functionality.
(3899) <3899> {687602} [687735]: Custom elements and decorators are an easy way to share functionality between forms and encapsulate custom functionality.
*****************************************************************
========================= CLASS #317 =============================
(3769) <3769> {659860} [660182]: For instance, if you want to provide a different implementation of the &#39;Label&#39; decorator -- for instance, to always append a colon -- you could create your own &#39;Label&#39; decorator with your own class prefix, and then add it to your prefix path.
(3773) <3773> {660893} [661016]: As a result, &#39;My_Decorator_Label&#39; will now be used when the &#39;Label&#39; decorator is requested.
*****************************************************************
========================= CLASS #318 =============================
(3774) <3774> {661030} [661313]: Filters It&#39;s often useful and/or necessary to perform some normalization on input prior to validation -- for instance, you may want to strip out all HTML, but run your validations on what remains to ensure the submission is valid.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #319 =============================
(3777) <3782> {661671} [663078]: Filtering happens both during validation and when you retrieve the element value via getValue() : Filters may be added to the chain in two ways: passing in a concrete filter instance providing a filter name -- either a short name or fully qualified class name Let&#39;s see some examples: Short names are typically the filter name minus the prefix. In the default case, this will mean minus the &#39;Zend_Filter_&#39; prefix. Additionally, the first letter need not be upper-cased. Using Custom Filter Classes If you have your own set of filter classes, you can tell Zend_Form_Element about these using addPrefixPath() . For instance, if you have validators under the &#39;My_Filter&#39; prefix, you can tell Zend_Form_Element about this as follows: (Recall that the third argument indicates which plugin loader on which to perform the action.) If at any time you need the unfiltered value, use the getUnfilteredValue() method: For more information on filters, see the Zend_Filter documentation .
(3785) <3790> {663720} [665315]: Validators may be added to the chain in two ways: passing in a concrete validator instance providing a validator name -- either a short name or fully qualified class name Let&#39;s see some examples: Short names are typically the validator name minus the prefix. In the default case, this will mean minus the &#39;Zend_Validate_&#39; prefix. Additionally, the first letter need not be upper-cased. Using Custom Validator Classes If you have your own set of validator classes, you can tell Zend_Form_Element about these using addPrefixPath() . For instance, if you have validators under the &#39;My_Validator&#39; prefix, you can tell Zend_Form_Element about this as follows: (Recall that the third argument indicates which plugin loader on which to perform the action.) If failing a particular validation should prevent later validators from firing, pass boolean true as the second parameter: If you are using a string name to add a validator, and the validator class accepts arguments to the constructor, you may pass these to the third parameter of addValidator() as an array: Arguments passed in this way should be in the order in which they are defined in the constructor.
*****************************************************************
========================= CLASS #320 =============================
(3783) <3783> {663101} [663566]: Methods associated with filters include: getFilter($name) (retrieve a filter object by name) getFilters() (retrieve all filters) removeFilter($name) (remove filter by name) clearFilters() (remove all filters) Validators If you subscribe to the security mantra of &quot;filter input, escape output,&quot; you&#39;ll want to validate (&quot;filter input&quot;) your form input.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #321 =============================
(3791) <3791> {665316} [665610]: The above example will instantiate the Zend_Validate_StringLenth class with its $min and $max parameters: Providing Custom Validator Error Messages Some developers may wish to provide custom error messages for a validator.
(4007) <4007> {713793} [713819]: Validation error messages.
*****************************************************************
========================= CLASS #322 =============================
(3797) <3797> {666480} [667168]: The basic usage is to pass an array of arrays, with each array containing 1 to 3 values, matching the constructor of addValidator() : If you want to be more verbose or explicit, you can use the array keys &#39;validator&#39;, &#39;breakChainOnFailure&#39;, and &#39;options&#39;: This usage is good for illustrating how you could then configure validators in a config file: Notice that every item has a key, whether or not it needs one; this is a limitation of using configuration files -- but it also helps make explicit what the arguments are for.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8709) <8709> {1449161} [1449296]: You may also pass an associative array with the keys &#39;checked&#39; and &#39;unChecked&#39;.
*****************************************************************
========================= CLASS #323 =============================
(3811) <3811> {669139} [669335]: You can modify this behavior in a number of ways: By default, when an element is required, a flag, &#39;allowEmpty&#39;, is also true.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #324 =============================
(3816) <3816> {670310} [670612]: If you do not want this behavior, you can turn it off by passing a false value to setAutoInsertNotEmptyValidator($flag) ; this will prevent isValid() from placing the &#39;NotEmpty&#39; validator in the validator chain.
(3823) <3823> {671753} [671990]: setAutoInsertNotEmptyValidator($flag) allows you to specify whether or not a &#39;NotEmpty&#39; validator will be prepended to the validator chain when the element is required.
*****************************************************************
========================= CLASS #325 =============================
(3822) <3822> {671599} [671739]: When the &#39;allow empty&#39; flag is true, empty values will not be passed to the validator chain.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #326 =============================
(3824) <3824> {671991} [672021]: By default, this flag is true.
(3869) <3869> {678723} [678753]: By default, this flag is true.
*****************************************************************
========================= CLASS #327 =============================
(3826) <3826> {672416} [672645]: For each element, the developer needs to create markup for the element itself, typically a label, and, if they&#39;re being nice to their users, markup for displaying validation error messages.
(4007) <4007> {713793} [713819]: Validation error messages.
*****************************************************************
========================= CLASS #328 =============================
(3833) <3833> {673324} [673486]: By default, Zend_Form_Element specifies the &#39;formText&#39; view helper, but individual subclasses specify different helpers.
(4154) <4154> {739022} [739099]: It specifies the &#39;formButton&#39; view helper for decoration.
(4168) <4168> {741015} [741099]: Zend_Form_Element_Checkbox uses the &#39;formCheckbox&#39; view helper.
(4171) <4171> {741324} [741432]: Zend_Form_Element_Hidden accomplishes this through use of the &#39;formHidden&#39; view helper.
(4178) <4178> {742456} [742547]: The &#39;formHidden&#39; view helper is used to render the element in the form.
(4214) <4214> {748995} [749101]: Zend_Form_Element_Text simply uses the &#39;formText&#39; view helper to display the element.
(4216) <4216> {749371} [749537]: Zend_Form_Element_Textarea uses the &#39;textArea&#39; view helper to display such elements, placing the value as the content of the element.
*****************************************************************
========================= CLASS #329 =============================
(3839) <3843> {674004} [675180]: Default Decorators Do Not Need to Be Loaded By default, the default decorators are loaded during object initialization. You can disable this by passing the &#39;disableLoadDefaultDecorators&#39; option to the constructor: This option may be mixed with any other options you pass, both as array options or in a Zend_Config object. Since the order in which decorators are registered matters -- first decorator registered is executed first -- you will need to make sure you register your decorators in an appropriate order, or ensure that you set the placement options in a sane fashion. To give an example, here is the code that registers the default decorators: The initial content is created by the &#39;ViewHelper&#39; decorator, which creates the form element itself. Next, the &#39;Errors&#39; decorator fetches error messages from the element, and, if any are present, passes them to the &#39;FormErrors&#39; view helper to render.
(3963) <3967> {703075} [703956]: Default Decorators Do Not Need to Be Loaded By default, the default decorators are loaded during object initialization. You can disable this by passing the &#39;disableLoadDefaultDecorators&#39; option to the constructor: This option may be mixed with any other options you pass, both as array options or in a Zend_Config object. Using Multiple Decorators of the Same Type Internally, Zend_Form uses a decorator&#39;s class as the lookup mechanism when retrieving decorators. As a result, you cannot register multiple decorators of the same type; subsequent decorators will simply overwrite those that existed before. To get around this, you can use aliases.
*****************************************************************
========================= CLASS #330 =============================
(3845) <3845> {675302} [675560]: Finally, the last decorator, &#39;label&#39;, retrieves the element&#39;s label and passes it to the &#39;FormLabel&#39; view helper, wrapping it in an HTML &lt;dt&gt; tag; the value is prepended to the content by default.
(4168) <4168> {741015} [741099]: Zend_Form_Element_Checkbox uses the &#39;formCheckbox&#39; view helper.
(4171) <4171> {741324} [741432]: Zend_Form_Element_Hidden accomplishes this through use of the &#39;formHidden&#39; view helper.
(4178) <4178> {742456} [742547]: The &#39;formHidden&#39; view helper is used to render the element in the form.
*****************************************************************
========================= CLASS #331 =============================
(3847) <3847> {675744} [675932]: Using Multiple Decorators of the Same Type Internally, Zend_Form_Element uses a decorator&#39;s class as the lookup mechanism when retrieving decorators.
(3965) <3965> {703515} [703695]: Using Multiple Decorators of the Same Type Internally, Zend_Form uses a decorator&#39;s class as the lookup mechanism when retrieving decorators.
*****************************************************************
========================= CLASS #332 =============================
(3848) <3848> {675933} [676122]: As a result, you cannot register multiple decorators of the same type; subsequent decorators will simply overwrite those that existed before.
(3966) <3966> {703696} [703885]: As a result, you cannot register multiple decorators of the same type; subsequent decorators will simply overwrite those that existed before.
*****************************************************************
========================= CLASS #333 =============================
(3849) <3852> {676153} [677217]: To get around this, you can use aliases . Instead of passing a decorator or decorator name as the first argument to addDecorator() , pass an array with a single element, with the alias pointing to the decorator object or name: In the addDecorators() and setDecorators() methods, you will need to pass the &#39;decorator&#39; option in the array representing the decorator: Methods associated with decorators include: getDecorator($name) (retrieve a decorator object by name) getDecorators() (retrieve all decorators) removeDecorator($name) (remove decorator by name) clearDecorators() (remove all decorators) Metadata and Attributes Zend_Form_Element handles a variety of attributes and element metadata. Basic attributes include: name : the element name. Uses the setName() and getName() accessors.
(3967) <3970> {703916} [705015]: To get around this, you can use aliases. Instead of passing a decorator or decorator name as the first argument to addDecorator() , pass an array with a single element, with the alias pointing to the decorator object or name: In the addDecorators() and setDecorators() methods, you will need to pass the &#39;decorator&#39; option in the array representing the decorator: You may create your own decorators for generating the form. One common use case is if you know the exact HTML you wish to use; your decorator could create the exact HTML and simply return it, potentially using the decorators from individual elements or display groups. The following methods may be used to interact with decorators: getDecorator($name) getDecorators() removeDecorator($name) clearDecorators() Validation A primary use case for forms is validating submitted data.
*****************************************************************
========================= CLASS #334 =============================
(3877) <3877> {681480} [681698]: Generally speaking, keys are named as follows: If &#39;set&#39; + key refers to a Zend_Form_Element method, then the value provided will be passed to that method.
(3985) <3985> {708818} [708981]: As a general rule, if &#39;set&#39; + the option key refers to a Zend_Form method, then the value provided will be passed to that method.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #335 =============================
(3881) <3881> {683023} [683517]: As an example, let&#39;s say that all text elements in a form you are creating need to be filtered with StringTrim , validated with a common regular expression, and that you want to use a custom decorator you&#39;ve created for displaying them, &#39;My_Decorator_TextItem&#39;; additionally, you have a number of standard attributes, including &#39;size&#39;, &#39;maxLength&#39;, and &#39;class&#39; you wish to specify.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(7134) <7134> {1204150} [1204357]: Values specifically specified in the API include &#39;comment&#39;, &#39;trackback&#39;, &#39;pingback&#39;, and an empty string (&#39;&#39;), but it may be any value.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #336 =============================
(3882) <3882> {683518} [683851]: You could define such an element as follows: You could then inform your form object about the prefix path for such elements, and start creating elements: The &#39;foo&#39; element will now be of type My_Element_Text , and exhibit the behaviour you&#39;ve outlined.
(5095) <5095> {902900} [903005]: As some examples: &#39;foo&#39; will be transformed to &#39;foo.phtml&#39;.
(5096) <5096> {903040} [903111]: &#39;FooBarBaz&#39; will be transformed to &#39;foo-bar-baz.phtml&#39;.
(8687) <8687> {1445632} [1445686]: Let&#39;s say we want a helper named &#39;fooBar&#39;.
*****************************************************************
========================= CLASS #337 =============================
(3886) <3886> {684530} [685343]: It can then perform the following actions on those items: Validation, including retrieving error codes and messages Value aggregation, including populating items and retrieving both filtered and unfiltered values from all items Iteration over all items, in the order in which they are entered or based on the order hints retrieved from each item Rendering of the entire form, either via a single decorator that peforms custom rendering or by iterating over each item in the form While forms created with Zend_Form may be complex, probably the best use case is for simple forms; it&#39;s best use is for Rapid Application Development and prototyping.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #338 =============================
(3918) <3918> {691487} [691677]: setElementDecorators() accepts an array of decorators, just like setDecorators() , and will overwrite any previously set decorators in each element.
(3934) <3934> {695799} [696020]: setDisplayGroupDecorators() accepts an array of decorators, just like setDecorators() , and will overwrite any previously set decorators in each display group.
*****************************************************************
========================= CLASS #339 =============================
(3929) <3929> {694223} [694757]: Assuming that the elements &#39;username&#39; and &#39;password&#39; are already set in the form, the following code would group these elements in a &#39;login&#39; display group: You can access display groups using the getDisplayGroup() method, or via overloading using the display group&#39;s name: Default Decorators Do Not Need to Be Loaded By default, the default decorators are loaded during object initialization.
(3963) <3963> {703075} [703227]: Default Decorators Do Not Need to Be Loaded By default, the default decorators are loaded during object initialization.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(5842) <5842> {1022515} [1022689]: The available built-in Authentication methods are PLAIN, LOGIN and CRAM-MD5 which all expect a &#39;username&#39; and &#39;password&#39; value in the configuration array.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #340 =============================
(3930) <3930> {694758} [695058]: You can disable this by passing the &#39;disableLoadDefaultDecorators&#39; option when creating a display group: This option may be mixed with any other options you pass, both as array options or in a Zend_Config object.
(3964) <3964> {703228} [703501]: You can disable this by passing the &#39;disableLoadDefaultDecorators&#39; option to the constructor: This option may be mixed with any other options you pass, both as array options or in a Zend_Config object.
*****************************************************************
========================= CLASS #341 =============================
(3939) <3940> {697300} [698469]: Methods for Interacting With Display Groups The following methods may be used to interact with display groups: getDisplayGroup($name) getDisplayGroups() removeDisplayGroup($name) clearDisplayGroups() setDefaultDisplayGroupClass($class) getDefaultDisplayGroupClass($class) Zend_Form_DisplayGroup Methods Zend_Form_DisplayGroup has the following methods, grouped by type: Configuration: Metadata: getAttrib($key) getAttribs() removeAttrib($key) clearAttribs() setName($name) getName() setDescription($value) getDescription() setLegend($legend) getLegend() setOrder($order) getOrder() Elements: getElement($name) getElements() removeElement($name) clearElements() Plugin loaders: getPluginLoader() Decorators: getDecorator($name) getDecorators() removeDecorator($name) clearDecorators() Rendering: getView() I18N: getTranslator() setDisableTranslator($flag) translatorIsDisabled() Sub Forms Sub forms serve several purposes: Creating logical element groups. Since sub forms are simply forms, you can validate subforms as individual entities.
(3983) <3984> {707625} [708795]: Methods The following is a full list of methods available to Zend_Form , grouped by type: Configuration and Options: Plugin Loaders and paths: Metadata: getAttrib($key) getAttribs() removeAttrib($key) clearAttribs() setAction($action) getAction() setMethod($method) getMethod() setName($name) getName() Elements: getElement($name) getElements() removeElement($name) clearElements() getValue($name) getValues() getUnfilteredValue($name) getUnfilteredValues() Sub forms: getSubForm($name) getSubForms() removeSubForm($name) clearSubForms() Display groups: getDisplayGroup($name) getDisplayGroups() removeDisplayGroup($name) clearDisplayGroups() Validation persistData() Rendering: getView() getDecorator($name) getDecorators() removeDecorator($name) clearDecorators() I18N: getTranslator() setDisableTranslator($flag) translatorIsDisabled() Configuration Zend_Form is fully configurable via setOptions() and setConfig() (or by passing options or a Zend_Config object to the constructor). Using these methods, you can specify form elements, display groups, decorators, and metadata.
*****************************************************************
========================= CLASS #342 =============================
(3945) <3945> {698852} [698970]: Like display groups, sub forms, when rendered as part of a larger form, can be used to group elements.
(4014) <4014> {714295} [714375]: Display groups and sub forms render in fieldsets by default.
*****************************************************************
========================= CLASS #343 =============================
(3954) <3954> {701162} [701589]: You can set and retrieve a form&#39;s name using the name accessors: To set the action (url to which the form submits) and method (method by which it should submit, e.g., &#39;POST&#39; or &#39;GET&#39;), use the action and method accessors: The method and action are only used internally for rendering, and not for any sort of validation.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(7134) <7134> {1204150} [1204357]: Values specifically specified in the API include &#39;comment&#39;, &#39;trackback&#39;, &#39;pingback&#39;, and an empty string (&#39;&#39;), but it may be any value.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #344 =============================
(3978) <3978> {706324} [706487]: If not, it will be a javascript object containing key/message pairs, where each &#39;message&#39; is an array of validation error messages.
(4007) <4007> {713793} [713819]: Validation error messages.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #345 =============================
(4005) <4005> {713005} [713324]: If all you are worried about is translating validation error messages, you can register the translation object with Zend_Validate_Abstract : Alternatively, you can attach to the Zend_Form object as a global translator.
(4007) <4007> {713793} [713819]: Validation error messages.
*****************************************************************
========================= CLASS #346 =============================
(4006) <4006> {713325} [713783]: This has the side effect of also translating validation error messages: Finally, you can attach a translator to a specific form instance or to specific elements using their setTranslator() methods: Standard I18N Targets Now that you&#39;ve attached a translation object to, what exactly can you translate by default?
(4007) <4007> {713793} [713819]: Validation error messages.
*****************************************************************
========================= CLASS #347 =============================
(4088) <4088> {727906} [728265]: As an example callback: This callback would be specified as The Callback decorator allows specifying a null value for the placement option, which will replace the original content with the callback return value; &#39;prepend&#39; and &#39;append&#39; are still valid as well.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #348 =============================
(4095) <4095> {729263} [729406]: You can disable this by passing a false value to the decorator&#39;s &#39;escape&#39; option or setEscape() method.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #349 =============================
(4114) <4114> {731898} [732168]: Zend_Form_Decorator_HtmlTag The HtmlTag decorator allows you to utilize HTML tags to decorate content; the tag utilized is passed in the &#39;tag&#39; option, and any other options are used as HTML attributes to that tag.
(4125) <4125> {733702} [733824]: If the &#39;tag&#39; option is present, and no label present, the tag is rendered with no content.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #350 =============================
(4119) <4119> {732931} [733093]: To specify an HTML tag with which to wrap the element, either pass a &#39;tag&#39; option to the decorator, or explicitly call setTag() .
(4125) <4125> {733702} [733824]: If the &#39;tag&#39; option is present, and no label present, the tag is rendered with no content.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #351 =============================
(4124) <4124> {733582} [733701]: You may optionally specify a &#39;tag&#39; option; if provided, it wraps the label in that block-level tag.
(4125) <4125> {733702} [733824]: If the &#39;tag&#39; option is present, and no label present, the tag is rendered with no content.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #352 =============================
(4128) <4128> {734151} [734275]: Common use cases would be to append a &#39;:&#39; to the label, or a &#39;*&#39; indicating an item is required.
(6928) <6928> {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
*****************************************************************
========================= CLASS #353 =============================
(4129) <4129> {734276} [734455]: You can do so with the following options and methods: optionalPrefix : set the text to prefix the label with when the element is optional.
(4133) <4133> {734835} [734939]: requiredPrefix : set the text to prefix the label with when the element is required.
*****************************************************************
========================= CLASS #354 =============================
(4131) <4131> {734593} [734697]: optionalSuffix : set the text to append the label with when the element is optional.
(4135) <4135> {735077} [735181]: requiredSuffix : set the text to append the label with when the element is required.
*****************************************************************
========================= CLASS #355 =============================
(4137) <4137> {735332} [735509]: By default, the Label decorator prepends to the provided content; specify a &#39;placement&#39; option of &#39;append&#39; to place it after the content.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #356 =============================
(4149) <4149> {738112} [738402]: You can do so by specifying a boolean false value for the decorator&#39;s &#39;placement&#39; option: Using the ViewScript decorator is recommended for when you want to have very fine-grained control over how your elements are rendered.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #357 =============================
(4159) <4159> {739745} [739987]: Zend_Form_Element_Checkbox HTML checkboxes allow you return a specific value, but basically operate as booleans: when it is checked, the value is submitted; when it&#39;s not checked, nothing is submitted.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #358 =============================
(4161) <4161> {740082} [740164]: By default, the checked value is &#39;1&#39;, and the unchecked value &#39;0&#39;.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
(5354) <5354> {950313} [950405]: To get only territories and continents use &#39;1&#39; as value.
(5513) <5513> {973006} [973098]: Yesterday would be &#39;-1&#39;, tomorrow &#39;1&#39; and so on.
(6063) <6063> {1054038} [1054080]: Memory container &#39;value&#39; property.
(6857) <6857> {1163399} [1163474]: Java Lucene uses the &#39;contents&#39; field as a default field to search.
(6886) <6886> {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(8533) <8533> {1420110} [1420334]: Meta tags may be either of the &#39;http-equiv&#39; or &#39;name&#39; types, must contain a &#39;content&#39; attribute, and can also have either of the &#39;lang&#39; or &#39;scheme&#39; modifier attributes.
(8534) <8534> {1420349} [1420751]: The HeadMeta helper supports the following methods for setting and adding meta tags: The $keyValue item is used to define a value for the &#39;name&#39; or &#39;http-equiv&#39; key; $content is the value for the &#39;content&#39; key, and $modifiers is an optional associative array that can contain keys for &#39;lang&#39; and/or &#39;scheme&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8705) <8705> {1448587} [1448779]: By default, when no $value is provided and no $options are present, &#39;0&#39; is assumed to be the unchecked value, and &#39;1&#39; the checked value.
(8709) <8709> {1449161} [1449296]: You may also pass an associative array with the keys &#39;checked&#39; and &#39;unChecked&#39;.
*****************************************************************
========================= CLASS #359 =============================
(4191) <4191> {744199} [744600]: You may manipulate the various checkbox options using the following methods: getMultiOption($option) getMultiOptions() removeMultiOption($option) clearMultiOptions() Zend_Form_Element_Multiselect XHTML select elements allow a &#39;multiple&#39; attribute, indicating multiple options may be selected for submission, instead of the usual one.
(4192) <4192> {744602} [744749]: Zend_Form_Element_Multiselect extends Zend_Form_Element_Select , and sets the multiple attribute to &#39;multiple&#39;.
*****************************************************************
========================= CLASS #360 =============================
(4202) <4202> {746852} [747045]: It utilizes only the &#39;ViewHelper&#39; and &#39;DtDdWrapper&#39; decorators, as there should never be error messages for such elements, nor will a label be necessary.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #361 =============================
(8565) <8570> {1426780} [1427881]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() . The script MIME type is assumed to be &#39;text/javascript&#39;; if you wish to specify a different type, you will need to pass it as the second argument to captureStart() . If you wish to specify any additional attributes for the &lt;script&gt; tag, pass them in an array as the third argument to captureStart() . HeadStyle Helper The HTML &lt;style&gt; element is used to include CSS stylesheets inline in the HTML &lt;head&gt; element. Use HeadLink to link CSS files HeadLink should be used to create &lt;link&gt; elements for including external stylesheets. HeadScript is used when you wish to define your stylesheets inline.
(8583) <8588> {1430330} [1431366]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() . If you wish to specify any additional attributes for the &lt;style&gt; tag, pass them in an array as the second argument to captureStart() . HeadTitle Helper The HTML &lt;title&gt; element is used to provide a title for an HTML document. The HeadTitle helper allows you to programmatically create and store the title for later retrieval and output. The HeadTitle helper is a concrete implementation of the Placeholder helper . It overrides the toString() method to enforce generating a &lt;title&gt; element, and adds a headTitle() method for quick and easy setting and aggregation of title elements.
*****************************************************************
========================= CLASS #362 =============================
(4225) <4225> {750858} [751073]: Google Provisioning provides the ability to create, retrieve, update, and delete user accounts, nicknames, and email lists on a Google Apps hosted domain.
(4525) <4525> {800877} [801032]: Specifically, this API allows administrators the ability to create, retrieve, update, and delete user accounts, nicknames, and email lists.
*****************************************************************
========================= CLASS #363 =============================
(4277) <4277> {760261} [760444]: If you don&#39;t pass this parameter, Zend_Gdata creates a default Zend_Http_Client object, which will not have associated credentials to access private feeds.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #364 =============================
(4291) <4291> {762014} [762107]: If you don&#39;t specify this parameter, the default feed type is atom .
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #365 =============================
(4328) <4328> {767407} [767580]: To post entries, you must be using an authenticated Zend_Http_Client that you created using the Zend_Gdata_AuthSub or Zend_Gdata_ClientLogin classes.
(4332) <4332> {768023} [768198]: To delete entries, you must be using an authenticated Zend_Http_Client that you created using the Zend_Gdata_AuthSub or Zend_Gdata_ClientLogin classes.
*****************************************************************
========================= CLASS #366 =============================
(4335) <4340> {768599} [769716]: The Google documentation says the ClientLogin mechanism is appropriate for &quot;installed applications&quot; whereas the AuthSub mechanism is for &quot;web applications.&quot; The difference is that AuthSub requires interaction from the user, and a browser interface that can react to redirection requests. The ClientLogin solution uses PHP code to supply the account credentials; the user is not required to enter her credentials interactively. The account credentials supplied via the AuthSub mechanism are entered by the user of the web application. Therefore they must be account credentials that are known to that user. Registered applications Zend_Gdata currently does not support use of secure tokens, because the AuthSub authentication does not support passing a digital certificate to acquire a secure token. Creating an AuthSub authenticated Http Client Your PHP application should provide a hyperlink to the Google URL that performs authentication.
(4471) <4476> {791947} [793184]: The Google documentation says the ClientLogin mechanism is appropriate for &quot;installed applications&quot; whereas the AuthSub mechanism is for &quot;web applications.&quot; The difference is that AuthSub requires interaction from the user, and a browser interface that can react to redirection requests. The ClientLogin solution uses PHP code to supply the account credentials; the user is not required to enter her credentials interactively. The account credentials supplied via the ClientLogin mechanism must be valid credentials for Google services, but they are not required to be those of the user who is using the PHP application. Creating a ClientLogin authenticated Http Client The process of creating an authenticated Http client using the ClientLogin mechanism is to call the static function Zend_Gdata_ClientLogin::getHttpClient() and pass the Google account credentials in plain text. The return value of this function is an object of class Zend_Http_Client. The optional third parameter is the name of the Google Data service.
*****************************************************************
========================= CLASS #367 =============================
(4348) <4349> {770841} [771269]: Below is an example of PHP code for a web application to acquire authentication to use the Google Calendar service and create a Zend_Gdata client object using that authenticated Http Client. Revoking AuthSub authentication To terminate the authenticated status of a given token, use the Zend_Gdata_AuthSub::AuthSubRevokeToken() static function.
(4487) <4488> {794481} [794903]: Below is an example of PHP code for a web application to acquire authentication to use the Google Calendar service and create a Zend_Gdata client object using that authenticated Zend_Http_Client. Terminating a ClientLogin authenticated Http Client There is no method to revoke ClientLogin authentication as there is in the AuthSub token-based solution.
*****************************************************************
========================= CLASS #368 =============================
(4357) <4387> {772313} [777917]: Connecting To The Calendar Service The Google Calendar API, like all GData APIs, is based off of the Atom Publishing Protoco (APP), an XML based format for managing web-based resources. Traffic between a client and the Google Calendar servers occurs over HTTP and allows for both authenticated and unauthenticated connections. Before any transactions can occur, this connection needs to be made. Creating a connection to the calendar servers involves two steps: creating an HTTP client and binding a Zend_Gdata_Calendar service instance to that client. Authentication The Google Calendar API allows access to both public and private calendar feeds. Public feeds do not require authentication, but are read-only and offer reduced functionality. Private feeds offers the most complete functionality but requires an authenticated connection to the calendar servers. There are three authentication schemes that are supported by Google Calendar: ClientAuth provides direct username/password authentication to the calendar servers. Since this scheme requires that users provide your application with their password, this authentication is only recommended when other authentication schemes are insufficient. AuthSub allows authentication to the calendar servers via a Google proxy server. This provides the same level of convenience as ClientAuth but without the security risk, making this an ideal choice for web-based applications. MagicCookie allows authentication based on a semi-random URL available from within the Google Calendar interface. This is the simplest authentication scheme to implement, but requires that users manually retrieve their secure URL before they can authenticate, doesn&#39;t provide access to calendar lists, and is limited to read-only access. The Zend_Gdata library provides support for all three authentication schemes. The rest of this chapter will assume that you are familiar the authentication schemes available and how to create an appropriate authenticated connection. For more information, please see section the Authentication section of this manual or the Authentication Overview in the Google Data API Developer&#39;s Guide . Creating A Service Instance In order to interact with Google Calendar, this library provides the Zend_Gdata_Calendar service class. This class provides a common interface to the Google Data and Atom Publishing Protocol models and assists in marshaling requests to and from the calendar servers. Once deciding on an authentication scheme, the next step is to create an instance of Zend_Gdata_Calendar . The class constructor takes an instance of Zend_Http_Client as a single argument. This provides an interface for AuthSub and ClientAuth authentication, as both of these require creation of a special authenticated HTTP client. If no arguments are provided, an unauthenticated instance of Zend_Http_Client will be automatically created. The example below shows how to create a Calendar service class using ClientAuth authentication: A Calendar service using AuthSub can be created in a similar, though slightly more lengthy fashion: Finally, an unauthenticated server can be created for use with either public feeds or MagicCookie authentication: Note that MagicCookie authentication is not supplied with the HTTP connection, but is instead specified along with the desired visibility when submitting queries. See the section on retrieving events below for an example. Retrieving A Calendar List The calendar service supports retrieving a list of calendars for the authenticated user. This is the same list of calendars which are displayed in the Google Calendar UI, except those marked as &quot; hidden &quot; are also available. The calendar list is always private and must be accessed over an authenticated connection. It is not possible to retrieve another user&#39;s calendar list and it cannot be accessed using MagicCookie authentication. Attempting to access a calendar list without holding appropriate credentials will fail and result in a 401 (Authentication Required) status code. Calling getCalendarListFeed() creates a new instance of Zend_Gdata_Calendar_ListFeed containing each available calendar as an instance of Zend_Gdata_Calendar_ListEntry . After retrieving the feed, you can use the iterator and accessors contained within the feed to inspect the enclosed calendars.
(4651) <4681> {824152} [829217]: Connecting To The Service The Picasa Web Albums API, like all GData APIs, is based off of the Atom Publishing Protocol (APP), an XML based format for managing web-based resources. Traffic between a client and the servers occurs over HTTP and allows for both authenticated and unauthenticated connections. Before any transactions can occur, this connection needs to be made. Creating a connection to the Picasa servers involves two steps: creating an HTTP client and binding a Zend_Gdata_Photos service instance to that client. Authentication The Google Picasa API allows access to both public and private photo feeds. Public feeds do not require authentication, but are read-only and offer reduced functionality. Private feeds offers the most complete functionality but requires an authenticated connection to the Picasa servers. There are three authentication schemes that are supported by Google Picasa : ClientAuth provides direct username/password authentication to the Picasa servers. Since this scheme requires that users provide your application with their password, this authentication is only recommended when other authentication schemes are insufficient. AuthSub allows authentication to the Picasa servers via a Google proxy server. This provides the same level of convenience as ClientAuth but without the security risk, making this an ideal choice for web-based applications. The Zend_Gdata library provides support for both authentication schemes. The rest of this chapter will assume that you are familiar the authentication schemes available and how to create an appropriate authenticated connection. For more information, please see section the Authentication section of this manual or the Authentication Overview in the Google Data API Developer&#39;s Guide . Creating A Service Instance In order to interact with the servers, this library provides the Zend_Gdata_Photos service class. This class provides a common interface to the Google Data and Atom Publishing Protocol models and assists in marshaling requests to and from the servers. Once deciding on an authentication scheme, the next step is to create an instance of Zend_Gdata_Photos . The class constructor takes an instance of Zend_Http_Client as a single argument. This provides an interface for AuthSub and ClientAuth authentication, as both of these require creation of a special authenticated HTTP client. If no arguments are provided, an unauthenticated instance of Zend_Http_Client will be automatically created. The example below shows how to create a service class using ClientAuth authentication: A service instance using AuthSub can be created in a similar, though slightly more lengthy fashion: Finally, an unauthenticated server can be created for use with public feeds: Understanding and Constructing Queries The primary method to request data from the service is by constructing a query. There are query classes for each of the following types: User is used to specify the user whose data is being searched for, and is specified as a username. If no user is provided, &quot;default&quot; will be used instead to indicate the currently authenticated user (if authenticated). Album is used to specify the album which is being searched for, and is specified as either an id, or an album name. Photo is used to specify the photo which is being searched for, and is specified as an id. A new UserQuery can be constructed as followed: For each query, a number of parameters limiting the search can be requested, or specified, with get(Parameter) and set(Parameter), respectively. They are as follows: Projection sets the format of the data returned in the feed, as either &quot;api&quot; or &quot;base&quot;. Normally, &quot;api&quot; is desired. The default is &quot;api&quot;. Type sets the type of element to be returned, as either &quot;feed&quot; or &quot;entry&quot;. The default is &quot;feed&quot;.
*****************************************************************
========================= CLASS #369 =============================
(4391) <4392> {778377} [778718]: Queries When retrieving events using the Calendar API, specially constructed query URLs are used to describe what events should be returned. The Zend_Gdata_Calendar_EventQuery class simplifies this task by automatically constructing a query URL based on provided parameters.
(4635) <4636> {820681} [820978]: When retrieveing items using the Base API, specially constructed query URLs are used to describe what events should be returned. The Zend_Gdata_Gbase_ItemQuery and Zend_Gdata_Gbase_SnippetQuery classes simplify this task by automatically constructing a query URL based on provided parameters.
*****************************************************************
========================= CLASS #370 =============================
(4395) <4395> {779107} [779308]: If no user is provided, &quot;default&quot; will be used instead to indicate the currently authenticated user (if authenticated).
(4673) <4673> {828108} [828257]: If no user is provided, &quot;default&quot; will be used instead to indicate the currently authenticated user (if authenticated).
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #371 =============================
(4400) <4400> {779870} [780214]: Also available is the &quot;basic&quot; projection, which places most meta-data into each event&#39;s content field as human readable text, and the &quot;composite&quot; projection which includes complete text for any comments alongside each event.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
*****************************************************************
========================= CLASS #372 =============================
(4406) <4406> {781264} [781434]: Refer to the Zend Framework API Documentation and the Calendar Protocol Reference for a complete list.
(4430) <4430> {785136} [785311]: For a complete list of event attributes, refer to the Zend Framework API Documentation and the Calendar Protocol Reference .
*****************************************************************
========================= CLASS #373 =============================
(4444) <4444> {787258} [787380]: Method can accept one of the following strings: &quot;alert&quot;, &quot;email&quot;, or &quot;sms&quot;.
(4682) <4682> {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #374 =============================
(4478) <4478> {793258} [793372]: The default is &quot;xapi&quot;, which is recognized by Google Data servers as a generic service name.
(4679) <4679> {829019} [829050]: The default is &quot;api&quot;.
(4681) <4681> {829185} [829217]: The default is &quot;feed&quot;.
(4683) <4683> {829373} [829424]: The default is &quot;all&quot;.
(4694) <4694> {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #375 =============================
(4484) <4484> {794046} [794172]: It is only necessary when logging in after receiving a CAPTCHA challenge from a previous login attempt.
(4486) <4486> {794332} [794458]: It is only necessary when logging in after receiving a CAPTCHA challenge from a previous login attempt.
*****************************************************************
========================= CLASS #376 =============================
(4496) <4496> {796123} [796295]: This feed contains a list of Zend_Gdata_Docs_DocumentListEntry objects ( $feed-&gt;entries ), each of which represents a single Google Document.
(4732) <4732> {836759} [836910]: Among other things, this feed contains a list of $feed-&gt;entries ), each of which represents a single worksheet.
*****************************************************************
========================= CLASS #377 =============================
(4557) <4557> {806081} [806340]: Forcing a user to change their password A user can be forced to change their password at their next login by setting the login-&gt;changePasswordAtNextLogin property to true .
(4558) <4558> {806379} [806522]: Similarly, this can be undone by setting the login-&gt;changePasswordAtNextLogin property to false .
*****************************************************************
========================= CLASS #378 =============================
(4560) <4560> {806767} [807174]: Accounts can be suspended or restored by using the suspendUser() and restoreUser() convenience methods: &lt;?php $gdata-&gt;suspendUser(&#39;foo&#39;); $gdata-&gt;restoreUser(&#39;foo&#39;); ?&gt; Alternatively, you can set the UserEntry&#39;s login-&gt;suspended property to true .
(4566) <4566> {808118} [808263]: &lt;?php $gdata-&gt;deleteUser(&#39;foo&#39;); ?&gt; Interacting with nicknames Nicknames serve as email aliases for existing users.
(5095) <5095> {902900} [903005]: As some examples: &#39;foo&#39; will be transformed to &#39;foo.phtml&#39;.
(5096) <5096> {903040} [903111]: &#39;FooBarBaz&#39; will be transformed to &#39;foo-bar-baz.phtml&#39;.
(8687) <8687> {1445632} [1445686]: Let&#39;s say we want a helper named &#39;fooBar&#39;.
*****************************************************************
========================= CLASS #379 =============================
(4578) <4578> {810200} [810427]: Alternatively, create a new Zend_Gdata_Gapps_NicknameQuery, set its username property to the desired user, and submit the query by calling getNicknameFeed() on a service object.
(4580) <4580> {810781} [810876]: Alternatively, call getNicknameFeed() on a service object with no arguments.
*****************************************************************
========================= CLASS #380 =============================
(4586) <4586> {811749} [812210]: Creating an email list Email lists can be created by calling the createEmailList() convenience method: &lt;?php $gdata-&gt;createEmailList(&#39;friends&#39;); ?&gt; Email lists can also be created by instantiating EmailListEntry, providing a name for the list, then calling insertEmailList() on a service object to upload the entry to the server.
(4592) <4592> {813382} [813761]: Deleting an email list To delete an email list, call the deleteEmailList() convenience method: &lt;?php $gdata-&gt;deleteEmailList(&#39;friends&#39;); ?&gt; Interacting with email list recipients Each recipient subscribed to an email list is represented by an instance of Zend_Gdata_Gapps_EmailListRecipient.
*****************************************************************
========================= CLASS #381 =============================
(4587) <4588> {812224} [812915]: Retrieving all email lists to which a recipient is subscribed To retrieve all email lists to which a particular recipient is subscribed, call the retrieveEmailLists() convenience method: This will create a Zend_Gdata_Gapps_EmailListFeed object which holds each email list associated with the specified recipient. Alternatively, create a new Zend_Gdata_Gapps_EmailListQuery, set its recipient property to the desired email address, and submit the query by calling getEmailListFeed() on a service object.
(4590) <4591> {813127} [813368]: This will create a Zend_Gdata_Gapps_EmailListFeed object which holds each email list on the domain. Alternatively, call getEmailListFeed() on a service object with no arguments.
*****************************************************************
========================= CLASS #382 =============================
(4611) <4611> {817108} [817296]: Connect To The Base Service The Google Base API, like all GData APIs, is based off of the Atom Publishing Protocol (APP), an XML based format for managing web-based resources.
(4651) <4651> {824152} [824356]: Connecting To The Service The Picasa Web Albums API, like all GData APIs, is based off of the Atom Publishing Protocol (APP), an XML based format for managing web-based resources.
*****************************************************************
========================= CLASS #383 =============================
(4612) <4612> {817297} [817433]: Traffic between a client and the Google Base servers occurs over HTTP and allows for both authenticated and unauthenticated connections.
(4652) <4652> {824357} [824493]: Traffic between a client and the servers occurs over HTTP and allows for both authenticated and unauthenticated connections.
*****************************************************************
========================= CLASS #384 =============================
(4613) <4613> {817456} [817524]: Before any transactions can occur, this connection needs to be made.
(4653) <4653> {824516} [824584]: Before any transactions can occur, this connection needs to be made.
*****************************************************************
========================= CLASS #385 =============================
(4614) <4614> {817525} [817688]: Creating a connection to the base servers involves two steps: creating an HTTP client and binding a Zend_Gdata_Gbase service instance to that client.
(4654) <4654> {824585} [824775]: Creating a connection to the Picasa servers involves two steps: creating an HTTP client and binding a Zend_Gdata_Photos service instance to that client.
*****************************************************************
========================= CLASS #386 =============================
(4616) <4616> {817803} [817897]: Public feeds do not require authentication, but are read-only and offer reduced functionality.
(4656) <4656> {824893} [825003]: Public feeds do not require authentication, but are read-only and offer reduced functionality.
*****************************************************************
========================= CLASS #387 =============================
(4617) <4617> {817898} [818012]: Private feeds offers the most complete functionality but requires an authenticated connection to the base servers.
(4657) <4657> {825004} [825152]: Private feeds offers the most complete functionality but requires an authenticated connection to the Picasa servers.
*****************************************************************
========================= CLASS #388 =============================
(4618) <4618> {818013} [818205]: There are three authentication schemes that are supported by Google Base: ClientAuth provides direct username/password authentication to the base servers.
(4658) <4658> {825153} [825374]: There are three authentication schemes that are supported by Google Picasa : ClientAuth provides direct username/password authentication to the Picasa servers.
*****************************************************************
========================= CLASS #389 =============================
(4619) <4619> {818206} [818381]: Since this scheme requires that users provide your application with their password, this authentication is only recommended when other authentication schemes are insufficient.
(4659) <4659> {825375} [825622]: Since this scheme requires that users provide your application with their password, this authentication is only recommended when other authentication schemes are insufficient.
*****************************************************************
========================= CLASS #390 =============================
(4620) <4620> {818403} [818504]: AuthSub allows authentication to the base servers via a Google proxy server.
(4660) <4660> {825644} [825771]: AuthSub allows authentication to the Picasa servers via a Google proxy server.
*****************************************************************
========================= CLASS #391 =============================
(4621) <4621> {818505} [818649]: This provides the same level of convenience as ClientAuth but without the security risk, making this an ideal choice for web-based applications.
(4661) <4661> {825772} [825988]: This provides the same level of convenience as ClientAuth but without the security risk, making this an ideal choice for web-based applications.
*****************************************************************
========================= CLASS #392 =============================
(4622) <4622> {818688} [818783]: The Zend_Gdata library provides support for all three authentication schemes.
(4662) <4662> {826027} [826133]: The Zend_Gdata library provides support for both authentication schemes.
*****************************************************************
========================= CLASS #393 =============================
(4623) <4623> {818784} [818938]: The rest of this chapter will assume that you are familiar the authentication schemes available and how to create an appropriate authenticated connection.
(4663) <4663> {826150} [826336]: The rest of this chapter will assume that you are familiar the authentication schemes available and how to create an appropriate authenticated connection.
*****************************************************************
========================= CLASS #394 =============================
(4625) <4625> {818999} [819093]: or the Authentication Overview in the Google Data API Developer&#39;s Guide .
(4664) <4664> {826337} [826564]: For more information, please see section the Authentication section of this manual or the Authentication Overview in the Google Data API Developer&#39;s Guide .
*****************************************************************
========================= CLASS #395 =============================
(4627) <4627> {819281} [819439]: This class provides a common interface to the Google Data and Atom Publishing Protocol models and assists in marshaling requests to and from the base servers.
(4666) <4666> {826739} [826924]: This class provides a common interface to the Google Data and Atom Publishing Protocol models and assists in marshaling requests to and from the servers.
*****************************************************************
========================= CLASS #396 =============================
(4628) <4628> {819470} [819607]: Once deciding on an authentication scheme, the next step is to create an instance of Zend_Gdata_Gbase .
(4667) <4667> {826955} [827076]: Once deciding on an authentication scheme, the next step is to create an instance of Zend_Gdata_Photos .
*****************************************************************
========================= CLASS #397 =============================
(4630) <4630> {819716} [819851]: This provides an interface for AuthSub and ClientAuth authentication, as both of these creation of a special authenticated HTTP client.
(4669) <4669> {827177} [827352]: This provides an interface for AuthSub and ClientAuth authentication, as both of these require creation of a special authenticated HTTP client.
*****************************************************************
========================= CLASS #398 =============================
(4631) <4631> {819852} [819994]: If no arguments are provided, an unauthenticated instance of Zend_Http_Client will be automatically created.
(4670) <4670> {827353} [827479]: If no arguments are provided, an unauthenticated instance of Zend_Http_Client will be automatically created.
*****************************************************************
========================= CLASS #399 =============================
(4696) <4700> {830465} [830837]: This element only applies to album and photo queries. In the case of photo queries, this specifies the album that contains the requested photo. The album id is mutually exclusive with the album&#39;s name. Setting one unsets the other. AlbumName sets the name of the album being searched for.
(4701) <4705> {830839} [831211]: This element only applies to the album and photo queries. In the case of photo queries, this specifies the album that contains the requested photo. The album name is mutually exclusive with the album&#39;s id. Setting one unsets the other. PhotoId sets the id of the photo being searched for.
*****************************************************************
========================= CLASS #400 =============================
(4708) <4708> {831448} [831562]: Retrieving A User The service supports retrieving a user feed and list of the user&#39;s content.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
*****************************************************************
========================= CLASS #401 =============================
(4710) <4710> {831709} [832036]: The user feed can be accessed by passing the username to the getUserFeed method: Or, the feed can be accessed by constructing a query, first: Constructing a query also provides the ability to request a user entry object: Retrieving An Album The service supports retrieving an album feed and a list of the album&#39;s content.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
*****************************************************************
========================= CLASS #402 =============================
(4715) <4715> {832900} [833076]: By setting a query to return a kind of &quot;comment&quot;, a feed request can return comments associated with a specific user, album, or photo.
(4717) <4717> {833289} [833425]: By setting a query to return a kind of &quot;tag&quot;, a feed request can return tags associated with a specific photo.
*****************************************************************
========================= CLASS #403 =============================
(4747) <4747> {838926} [839149]: Among other things, this feed contains an array of Zend_Gdata_Spreadsheets_ListEntry objects ( $listFeed-&gt;entries ), each of which represents a single row in a worksheet.
(4766) <4766> {842969} [843192]: Among other things, this feed contains an array of Zend_Gdata_Spreadsheets_CellEntry objects ( $cellFeed&gt;entries ), each of which represents a single cell in a worksheet.
*****************************************************************
========================= CLASS #404 =============================
(4750) <4750> {839502} [839792]: This is convenient when trying to access a specific header: Reverse-sort Rows By default, rows in the feed appear in the same order as the corresponding rows in the GUI; that is, they&#39;re in order by row number.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #405 =============================
(4756) <4756> {841069} [841207]: The method returns a Zend_Gdata_Spreadsheets_SpreadsheetsEntry object which represents the inserted row.
(4761) <4761> {841898} [842035]: The method returns a Zend_Gdata_Spreadsheets_SpreadsheetsEntry object which represents the updated row.
*****************************************************************
========================= CLASS #406 =============================
(4773) <4773> {844043} [844211]: Using the YouTube data API The YouTube data API offers read-only access to YouTube&#39;s content in the form of Google data (&quot;GData&quot;) feeds.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
*****************************************************************
========================= CLASS #407 =============================
(4792) <4793> {847297} [847549]: This example retrieves videos uploaded by the user &#39;liz&#39;. Retrieving videos favorited by a user You can retrieve a list of a user&#39;s favorite videos using a simple helper method.
(4794) <4795> {847550} [847805]: This example retrieves videos favorited by the user &#39;liz&#39;. Retrieving video responses for a video You can retrieve a list of a video&#39;s video responses using a simple helper method.
*****************************************************************
========================= CLASS #408 =============================
(4813) <4814> {851692} [852274]: &#39;sslv2&#39;, &#39;tls&#39;) string ssl sslcert PEM encoded SSL certificate file path string &#39;/path/to/cert.pem&#39; sslpassphrase Passphrase for the SSL certificate file string &#39;s0mes3cre7&#39; HTTPS SSL Stream Parameters All the above parameters are related to the SSL layer used in HTTPS connections. While the default settings should work for most applications, you might need to change them if the server you are connecting to requires special client setup.
(5847) <5848> {1023091} [1023370]: This can be enabled be passing the &#39;ssl&#39; parameter to the configuration array in the Zend_Mail_Transport_Smtp constructor with a value of either &#39;ssl&#39; or &#39;tls&#39;. A port can optionally be supplied, otherwise it defaults to 25 for TLS or 465 for SSL.
*****************************************************************
========================= CLASS #409 =============================
(4818) <4818> {853026} [853889]: Using the Proxy adapter requires several additional configuration parameters to be set, in addition to the default &#39;adapter&#39; option: Zend_Http_Client configuration parameters Parameter Description Expected Type Example Value proxy_host Proxy server address string &#39;proxy.myhost.com&#39; or &#39;10.1.2.3&#39; proxy_port Proxy server TCP port integer 8080 (default) or 81 proxy_user Proxy user name, if required string &#39;shahar&#39; or &#39;&#39; for none (default) proxy_pass Proxy password, if required string &#39;secret&#39; or &#39;&#39; for none (default) proxy_auth Proxy HTTP authentication type string Zend_Http_Client::AUTH_BASIC (default) proxy_host should always be set - if it is not set, the client will fall back to a direct connection using Zend_Http_Client_Adapter_Socket.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #410 =============================
(4839) <4839> {856725} [856942]: In this case, it&#39;s not possible to use setResponse() alone because there&#39;s no opportunity to set the next response(s) your program might need before returning to the caller.
(5510) <5510> {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) <5514> {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
*****************************************************************
========================= CLASS #411 =============================
(4872) <4872> {862563} [862769]: If not specified, and Zend_Http_Client reads the file from the disk, the mime_content_type function will be used to guess the file&#39;s content type, if it is available.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
*****************************************************************
========================= CLASS #412 =============================
(4901) <4901> {866772} [867033]: This allows you to set-and-forget headers like &#39;Accept-language&#39; and &#39;Accept-encoding&#39; Another feature designed specifically for consecutive requests is the Cookie Jar object.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #413 =============================
(4914) <4914> {869194} [869738]: Usually this should not be changed boolean true strictredirects Whether to strictly follow the RFC when redirecting (see ) boolean false useragent User agent identifier string (sent in request headers) string &#39;Zend_Http_Client&#39; timeout Connection timeout (seconds) integer 10 httpversion HTTP protocol version (usually &#39;1.1&#39; or &#39;1.0&#39;) string &#39;1.1&#39; adapter Connection adapter class to use (see ) mixed &#39;Zend_Http_Client_Adapter_Socket&#39; keepalive Whether to enable keep-alive connections with the server.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(7134) <7134> {1204150} [1204357]: Values specifically specified in the API include &#39;comment&#39;, &#39;trackback&#39;, &#39;pingback&#39;, and an empty string (&#39;&#39;), but it may be any value.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #414 =============================
(4953) <4953> {876181} [876352]: This method will produce a HTTP request &quot;Cookie&quot; header string, showing the cookie&#39;s name and value, and terminated by a semicolon (&#39;;&#39;).
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #415 =============================
(4976) <4977> {880839} [880967]: $ret_as specifies the return type as described above. If not specified, $ret_type defaults to COOKIE_OBJECT.
(4982) <4983> {881441} [881568]: $ret_as specifies the return type as described above. If not specified, defaults to COOKIE_OBJECT.
*****************************************************************
========================= CLASS #416 =============================
(4992) <4992> {882947} [883226]: &#39;Host&#39; =&gt; &#39;example.com&#39;) $body : The response body as a string $version : The HTTP response version (usually 1.0 or 1.1) $message : The HTTP response message (eg &#39;OK&#39;, &#39;Internal Server Error&#39;).
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(5845) <5845> {1022857} [1022981]: to use CRAM-MD5 you would pass &#39;auth&#39; =&gt; &#39;crammd5&#39; in the Zend_Mail_Transport_Smtp constructor.
(7134) <7134> {1204150} [1204357]: Values specifically specified in the API include &#39;comment&#39;, &#39;trackback&#39;, &#39;pingback&#39;, and an empty string (&#39;&#39;), but it may be any value.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #417 =============================
(5094) <5094> {902719} [902899]: By default, it uses the rules &#39;CamelCaseToDash&#39; followed by &#39;StringToLower&#39;, and the suffix &#39;phtml&#39; to transform the name to a path.
(5096) <5096> {903040} [903111]: &#39;FooBarBaz&#39; will be transformed to &#39;foo-bar-baz.phtml&#39;.
*****************************************************************
========================= CLASS #418 =============================
(5102) <5102> {904149} [904383]: Let&#39;s say you want the layout script to end in the suffix &#39;html&#39;, and that you want to separate MixedCase and camelCased words with underscores instead of dashes, and not lowercase the name.
(8687) <8687> {1445632} [1445686]: Let&#39;s say we want a helper named &#39;fooBar&#39;.
*****************************************************************
========================= CLASS #419 =============================
(5103) <5103> {904400} [904501]: Additionally, you want it to look in a &#39;layouts&#39; subdirectory for the script.
(5122) <5122> {907035} [907133]: By default, this value is &#39;layout&#39; and resolves to &#39;layout.phtml&#39;.
(5127) <5127> {907453} [907504]: Default value is &#39;content&#39;.
*****************************************************************
========================= CLASS #420 =============================
(5144) <5144> {909557} [909979]: Examples The following examples assume the following $options array and $config object: Passing options to the constructor or startMvc() Both the constructor and the startMvc() static method can accept either an array of options or a Zend_Config object with options in order to configure the Zend_Layout instance.
(8707) <8707> {1448963} [1448991]: $options should be an array.
*****************************************************************
========================= CLASS #421 =============================
(5163) <5163> {913688} [914287]: This allows you to immediately call methods on the layout object: At any time, you can fetch the Zend_Layout instance registered with the MVC via the getMvcInstance() static method: Finally, Zend_Layout &#39;s front controller plugin has one important feature in addition to rendering the layout: it retrieves all named segments from the response object and assigns them as layout variables, assigning the &#39;default&#39; segment to the variable &#39;content&#39;.
(5528) <5528> {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #422 =============================
(5186) <5186> {918709} [919381]: The following example illustrates how the non-DN username &#39; abaker &#39; can be used with bind() : bind() call in this example sees that the username &#39; abaker &#39; is not in DN form, finds bindRequiresDn is true , uses &#39; CN=user1,DC=foo,DC=net &#39; and &#39; pass1 &#39; to bind, retrieves the DN for &#39; abaker &#39;, unbinds and then rebinds with the newly discovered &#39; Zend_Ldap Options The Zend_Ldap component accepts an array of options either supplied to the constructor or through the setOptions() method.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #423 =============================
(5187) <5187> {919382} [919671]: The permitted options are as follows: Zend_Ldap Options Name Description host The default hostname of LDAP server if not supplied to connect() (also may be used when trying to canonicalize usernames in bind() ).
(5188) <5188> {919697} [919790]: port Default port of LDAP server if not supplied to connect() .
*****************************************************************
========================= CLASS #424 =============================
(5256) <5256> {931168} [931323]: Example of loadFile() method The $filename argument specifies the filename to load, which must not contain any path information.
(5273) <5273> {933462} [933575]: Example of isReadable() method The $filename argument specifies the filename to check.
(5274) <5274> {933577} [933611]: This may contain path information.
*****************************************************************
========================= CLASS #425 =============================
(5303) <5303> {941824} [942039]: If an invalid format specifier is used, such as the PHP &#39;i&#39; specifier when in ISO format mode, then an error will be thrown by the methods in Zend_Locale_Format that support user-defined formats.
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #426 =============================
(5307) <5307> {942558} [943047]: Return values getDate() format character Array key Returned value Minimum Maximum d day integer 1 31 M month integer 1 12 y year integer no limit PHP integer&#39;s maximum h hour integer 0 PHP integer&#39;s maximum m minute integer 0 PHP integer&#39;s maximum s second integer 0 PHP integer&#39;s maximum Normalizing a date Since getDate() is &quot;locale-aware&quot;, specifying the $locale is sufficient for date strings adhering to that locale&#39;s format.
(5468) <5468> {966895} [966973]: For most locales this will be &#39;gregorian&#39;.
(5470) <5470> {967154} [967222]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5472) <5472> {967402} [967470]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5478) <5478> {968070} [968138]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5480) <5480> {968314} [968382]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5489) <5489> {969506} [969607]: If you omit the value then the &#39;gregorian&#39; calendar will be used.
(5492) <5492> {969845} [969946]: If you omit the value then the &#39;gregorian&#39; calendar will be used.
(5497) <5497> {970513} [970581]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5499) <5499> {970747} [970881]: If you omit the value then the &#39;gregorian&#39; calendar will be used with the &#39;medium&#39; format.
(5500) <5500> {970882} [971004]: If you give a string then the &#39;gregorian&#39; calendar will be used with the given format.
(5502) <5502> {971238} [971306]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5504) <5504> {971472} [971606]: If you omit the value then the &#39;gregorian&#39; calendar will be used with the &#39;medium&#39; format.
(5505) <5505> {971607} [971729]: If you give a string then the &#39;gregorian&#39; calendar will be used with the given format.
(5507) <5507> {972029} [972125]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5510) <5510> {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) <5514> {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
*****************************************************************
========================= CLASS #427 =============================
(5308) <5308> {943048} [943238]: The option &#39; fix_date &#39; uses simple tests to determine if the day or month is not valid, and then applies heuristics to try and correct any detected problems.
(5316) <5316> {944876} [945054]: The option &#39; fix_date &#39; uses simple tests to determine if the day or month is not valid, and then applies heuristics to try and correct any detected problems.
*****************************************************************
========================= CLASS #428 =============================
(5309) <5309> {943239} [943441]: Note the use of &#39; Zend_Locale_Format::STANDARD &#39; as the value for &#39; date_format &#39; to prevent the use of a class-wide default date format set using setOptions() .
(6063) <6063> {1054038} [1054080]: Memory container &#39;value&#39; property.
*****************************************************************
========================= CLASS #429 =============================
(5337) <5337> {948371} [948554]: setLocale Getting the language and region Use getLanguage() to obtain a string containing the two character language code from the string locale identifier.
(5338) <5338> {948555} [948679]: Use getRegion() to obtain a string containing the two character region code from the string locale identifier.
*****************************************************************
========================= CLASS #430 =============================
(5348) <5348> {949599} [949743]: Details for getTranslationList($type = null, $locale = null, $value = null) Type Description Language Returns a localized list of all languages.
(5455) <5455> {965294} [965490]: See the following table for detailed informations: Details for getTranslation($value = null, $type = null, $locale = null) Type Description Language Returns a translation for a language.
*****************************************************************
========================= CLASS #431 =============================
(5355) <5355> {950406} [950453]: To get only countries use &#39;2&#39; as value.
(5942) <5942> {1037798} [1037838]: The standard precision is &#39; 2 &#39;.
(5983) <5983> {1041935} [1041975]: The standard precision is &#39; 2 &#39;.
*****************************************************************
========================= CLASS #432 =============================
(5360) <5360> {950957} [951039]: When you omit the value you will get a list with both.
(5369) <5369> {951851} [951941]: When you omit the value you will get a list all both returned.
*****************************************************************
========================= CLASS #433 =============================
(5363) <5364> {951235} [951365]: This keys are generic values used in translation. These are normally calendar, collation and currency.
(5465) <5466> {966487} [966617]: This keys are generic values used in translation. These are normally calendar, collation and currency.
*****************************************************************
========================= CLASS #434 =============================
(5373) <5380> {952502} [953655]: If you omit the value you will get a list of all months from the &#39;gregorian&#39; calendar returned. You can give any known calendar as value to get a list of months from this calendar returned. Use Zend_Date for simplicity Month Returns a localized list of all month names for this locale. If you omit the value you will get the normally used gregorian full name of the months where each month number is used as key and the translated month is returned as value. You can get the months for different calendars and formats if you give an array as value. The first array entry has to be the calendar, the second the used context and the third the width to return. Use Zend_Date for simplicity Days Returns a list of all day representations within this locale. There are several different represenations which are all returned as sub array.
(5381) <5388> {953656} [954846]: If you omit the value you will get a list of all days from the &#39;gregorian&#39; calendar returned. You can give any known calendar as value to get a list of days from this calendar returned. Use Zend_Date for simplicity Day Returns a localized list of all day names for this locale. If you omit the value you will get the normally used gregorian full name of the days where the english day abbreviation is used as key and the translated day is returned as value. You can get the days for different calendars and formats if you give an array as value. The first array entry has to be the calendar, the second the used context and the third the width to return. Use Zend_Date for simplicity Week Returns a list of values used for proper week calculations within a locale. Use Zend_Date for simplicity Quarters Returns a list of all quarter representations within this locale.
*****************************************************************
========================= CLASS #435 =============================
(5390) <5394> {954955} [955896]: If you omit the value you will get a list of all quarters from the &#39;gregorian&#39; calendar returned. You can give any known calendar as value to get a list of quarters from this calendar returned Quarter Returns a localized list of all quarter names for this locale. If you omit the value you will get the normally used gregorian full name of the quarters where each quarter number is used as key and the translated quarter is returned as value. You can get the quarters for different calendars and formats if you give an array as value. The first array entry has to be the calendar, the second the used context and the third the width to return Eras Returns a list of all era representations within this locale.
(5395) <5399> {955897} [956778]: If you omit the value you will get a list of all eras from the &#39;gregorian&#39; calendar returned. You can give any known calendar as value to get a list of eras from this calendar returned Era Returns a localized list of all era names for this locale. If you omit the value you will get the normally used gregorian full name of the eras where each era number is used as key and the translated era is returned as value. You can get the eras for different calendars and formats if you give an array as value. The first array entry has to be the calendar and the second the width to return Date Returns a localized list of all date formats for this locale.
*****************************************************************
========================= CLASS #436 =============================
(5371) <5371> {952298} [952393]: This list is depreciated Months Returns a list of all month representations within this locale.
(5379) <5379> {953422} [953547]: Use Zend_Date for simplicity Days Returns a list of all day representations within this locale.
(5473) <5473> {967471} [967570]: Use Zend_Date for simplicity Month Returns a translation for a month.
(5481) <5481> {968383} [968478]: Use Zend_Date for simplicity Day Returns a translation for a day.
*****************************************************************
========================= CLASS #437 =============================
(5372) <5373> {952394} [952633]: There are several different represenations which are all returned as sub array. If you omit the value you will get a list of all months from the &#39;gregorian&#39; calendar returned.
(5380) <5381> {953548} [953785]: There are several different represenations which are all returned as sub array. If you omit the value you will get a list of all days from the &#39;gregorian&#39; calendar returned.
*****************************************************************
========================= CLASS #438 =============================
(5401) <5401> {956997} [957120]: You can get the date formats for different calendars if you give the wished calendar as string.
(5405) <5405> {957466} [957589]: You can get the time formats for different calendars if you give the wished calendar as string.
(5409) <5409> {957989} [958117]: You can get the date-time formats for different calendars if you give the wished calendar as string.
*****************************************************************
========================= CLASS #439 =============================
(5404) <5404> {957349} [957465]: If you omit the value you will get the time formats for the gregorian calendar returned.
(5408) <5408> {957839} [957960]: If you omit the value you will get the date-time formats for the gregorian calendar returned.
*****************************************************************
========================= CLASS #440 =============================
(5410) <5414> {958118} [959189]: Use Zend_Date for simplicity Field Returns a localized list of date fields which can be used to display calendars or date strings like &#39;month&#39; or &#39;year&#39; in a wished language. If you omit the value you will get this list for the gregorian calendar returned. You can get the list for different calendars if you give the wished calendar as string Relative Returns a localized list of relative dates which can be used to display textual relative dates like &#39;yesterday&#39; or &#39;tomorrow&#39; in a wished language. If you omit the value you will get this list for the gregorian calendar returned. You can get the list for different calendars if you give the wished calendar as string Symbols Returns a localized list of characters used for number representations NameToCurrency Returns a localized list of names for currencies.
(5508) <5512> {972126} [973005]: Use Zend_Date for simplicity Field Returns a translated date field which can be used to display calendars or date strings like &#39;month&#39; or &#39;year&#39; in a wished language. You must give the field which has to be returned as string. In this case the &#39;gregorian&#39; calendar will be used. You can get the field for other calendar formats if you give an array which has to look like this: Relative Returns a translated date which is relative to today which can include date strings like &#39;yesterday&#39; or &#39;tomorrow&#39; in a wished language. You have to give the number of days relative to tomorrow to receive the expected string.
*****************************************************************
========================= CLASS #441 =============================
(5420) <5423> {959724} [960319]: Use Zend_Currency for simplicity Question Returns a list of localized strings for acceptance (&#39;yes&#39;) and negotation (&#39;no&#39;). Use Zend_Locale&#39;s getQuestion method for simplicity CurrencyFraction Returns a list of fractions for currency values. The currency is used as key and the fraction as integer value. Use Zend_Currency for simplicity CurrencyRounding Returns a list of how to round which currency.
(5523) <5526> {974525} [975016]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string. Use Zend_Locale&#39;s getQuestion method for simplicity CurrencyFraction Returns the fraction to use for a given currency. You must give the currency as ISO value. Use Zend_Currency for simplicity CurrencyRounding Returns how to round a given currency.
*****************************************************************
========================= CLASS #442 =============================
(5426) <5427> {960592} [960869]: The ISO3166 value (&#39;region&#39;) is used as array key and the ISO4217 value (&#39;currency&#39;) as array value. Use Zend_Currency for simplicity RegionToCurrency Returns a list of regions where a currency is used .
(5428) <5429> {960870} [961132]: The ISO4217 value (&#39;currency&#39;) is used as array key and the ISO3166 value (&#39;region&#39;) as array value. When a currency is used in several regions these regions are seperated with a whitespace.
(5431) <5432> {961352} [961715]: The ISO territory code (&#39;territory&#39;) is used as array key and the ISO3166 value (&#39;region&#39;) as array value. When a territory contains several regions these regions are seperated with a whitespace TerritoryToRegion Returns a list of regions and the territories where these regions are located.
(5433) <5434> {961744} [962096]: The ISO3166 code (&#39;region&#39;) is used as array key and the ISO territory code (&#39;territory&#39;) as array value. When a region is located in several territories these territories are seperated with a whitespace ScriptToLanguage Returns a list of scripts which are used within a language.
*****************************************************************
========================= CLASS #443 =============================
(5437) <5437> {962386} [962488]: The script code is used as array key and the language code as array value.
(5439) <5439> {962684} [962787]: The country code is used as array key and the language code as array value.
(5441) <5441> {963034} [963109]: The country code is used as array key and the language code as array value.
*****************************************************************
========================= CLASS #444 =============================
(5456) <5456> {965491} [965593]: To select the wished translation you must give the language code as value.
(5458) <5458> {965734} [965834]: To select the wished translation you must give the script code as value.
*****************************************************************
========================= CLASS #445 =============================
(5457) <5457> {965594} [965733]: For your convinience use the getLanguageTranslation($value) method Script Returns a translation for a script.
(5462) <5462> {966199} [966295]: For your convinience use the getCountryTranslation($value) method.
*****************************************************************
========================= CLASS #446 =============================
(5459) <5459> {965835} [966019]: For your convinience use the getScriptTranslation($value) method Territory or Country Returns a translation for a territory.
(5462) <5462> {966199} [966295]: For your convinience use the getCountryTranslation($value) method.
*****************************************************************
========================= CLASS #447 =============================
(5468) <5468> {966895} [966973]: For most locales this will be &#39;gregorian&#39;.
(5470) <5470> {967154} [967222]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5472) <5472> {967402} [967470]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5478) <5478> {968070} [968138]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5480) <5480> {968314} [968382]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5489) <5489> {969506} [969607]: If you omit the value then the &#39;gregorian&#39; calendar will be used.
(5492) <5492> {969845} [969946]: If you omit the value then the &#39;gregorian&#39; calendar will be used.
(5497) <5497> {970513} [970581]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5499) <5499> {970747} [970881]: If you omit the value then the &#39;gregorian&#39; calendar will be used with the &#39;medium&#39; format.
(5500) <5500> {970882} [971004]: If you give a string then the &#39;gregorian&#39; calendar will be used with the given format.
(5502) <5502> {971238} [971306]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5504) <5504> {971472} [971606]: If you omit the value then the &#39;gregorian&#39; calendar will be used with the &#39;medium&#39; format.
(5505) <5505> {971607} [971729]: If you give a string then the &#39;gregorian&#39; calendar will be used with the given format.
(5507) <5507> {972029} [972125]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5510) <5510> {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) <5514> {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
*****************************************************************
========================= CLASS #448 =============================
(5471) <5471> {967223} [967401]: Use Zend_Date for simplicity DefaultMonth Returns the default format for months which is used within the given calendar.
(5479) <5479> {968139} [968313]: Use Zend_Date for simplicity DefaultDay Returns the default format for days which is used within the given calendar.
*****************************************************************
========================= CLASS #449 =============================
(5483) <5485> {968614} [969063]: If you want to receive data for other calendars, contexts or format, then you must give an array instead of an integer with the expected values. The array has to look like this: Zend_Date for simplicity Quarter Returns a translation for a quarter. You have to give the number of the quarter as integer and it has to be between 1 and 4.
(5486) <5488> {969064} [969505]: If you want to receive data for other calendars, contexts or formats, then you must give an array instead of an integer with the expected values. The array has to look like this: Am Returns a translation for &#39;AM&#39; in a expected locale. If you want to receive data for other calendars an string with the expected calendar.
*****************************************************************
========================= CLASS #450 =============================
(5477) <5477> {967891} [968069]: The array has to look like this: Zend_Date for simplicity DayContext Returns the default context for Â´days which is used within the given calendar.
(5484) <5484> {968815} [968947]: The array has to look like this: Zend_Date for simplicity Quarter Returns a translation for a quarter.
*****************************************************************
========================= CLASS #451 =============================
(5482) <5482> {968479} [968613]: You have to give the english abbreviation of the day as string value (&#39;sun&#39;, &#39;mon&#39;, etc.).
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(7134) <7134> {1204150} [1204357]: Values specifically specified in the API include &#39;comment&#39;, &#39;trackback&#39;, &#39;pingback&#39;, and an empty string (&#39;&#39;), but it may be any value.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #452 =============================
(5522) <5522> {974336} [974524]: Use Zend_Currency for simplicity Question Returns a localized string for acceptance (&#39;yes&#39;) and negotation (&#39;no&#39;).
(5523) <5523> {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(7134) <7134> {1204150} [1204357]: Values specifically specified in the API include &#39;comment&#39;, &#39;trackback&#39;, &#39;pingback&#39;, and an empty string (&#39;&#39;), but it may be any value.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #453 =============================
(5530) <5530> {975314} [975429]: The region code has to be given as ISO3166 string for example &#39;AT&#39; for austria.
(5537) <5537> {976211} [976321]: The region has to be given in ISO3166 string for example &#39;AT&#39; for austria.
*****************************************************************
========================= CLASS #454 =============================
(5539) <5541> {976569} [977039]: The language has to be given as ISO language code for example &#39;en&#39; for english. When multiple scripts are used within a language then these scripts are seperated with a whitespace character LanguageToScript Returns the languages which are used within a given script. The script has to be given as ISO script code for example &#39;Latn&#39; for latin.
(5543) <5545> {977279} [977769]: The language has to be given as ISO language code for example &#39;en&#39; for english. When multiple territories exist where this language is used then these territories are seperated with a whitespace character LanguageToTerritory Returns the languages which are used within a given territory. The territory has to be given as ISO3166 code for example &#39;IT&#39; for italia.
*****************************************************************
========================= CLASS #455 =============================
(5550) <5550> {978695} [979617]: See this table for a list of old to new types: Differences between ZF 1.0 and ZF 1.5 Old type New type Country Territory (with value &#39;2&#39;) Calendar Type (with value &#39;calendar&#39;) Month_Short Month (with array(&#39;gregorian&#39;, &#39;format&#39;, &#39;abbreviated&#39;) Month_Narrow Month (with array(&#39;gregorian&#39;, &#39;stand-alone&#39;, &#39;narrow&#39;) Month_Complete Months Day_Short Day (with array(&#39;gregorian&#39;, &#39;format&#39;, &#39;abbreviated&#39;) Day_Narrow Day (with array(&#39;gregorian&#39;, &#39;stand-alone&#39;, &#39;narrow&#39;) DateFormat Date TimeFormat Time Timezones CityToTimezone Currency NameToCurrency Currency_Sign CurrencySymbol Currency_Detail CurrencyToRegion Territory_Detail TerritoryToRegion Language_Detail LanguageToTerritory The example below demonstrates how to obtain the names of things in different languages.
(5708) <5708> {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(5942) <5942> {1037798} [1037838]: The standard precision is &#39; 2 &#39;.
(5983) <5983> {1041935} [1041975]: The standard precision is &#39; 2 &#39;.
(7134) <7134> {1204150} [1204357]: Values specifically specified in the API include &#39;comment&#39;, &#39;trackback&#39;, &#39;pingback&#39;, and an empty string (&#39;&#39;), but it may be any value.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8559) <8559> {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #456 =============================
(5571) <5571> {982467} [982660]: Introduction Zend_Locale is the Frameworks answer to the question, &quot;How can the same application be used around the whole world?&quot; Most people will say, &quot;That&#39;s easy.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8093) <8093> {1359891} [1359938]: So it&#39;s easy to learn and easy to maintain.
*****************************************************************
========================= CLASS #457 =============================
(5593) <5593> {985642} [985716]: Each computer user makes use of Locales, even when they don&#39;t know it.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #458 =============================
(5613) <5613> {988153} [988354]: For example, &quot;de_IS&quot; would be truncated to &quot;de&quot;, and &quot;xh_RU&quot; would be truncated to &quot;xh&quot;, because neither of these combinations are valid.
(6215) <6215> {1076290} [1076383]: For example, &quot;Europe/Paris&quot; or &quot;America/Los_Angeles&quot;.
(8481) <8481> {1410777} [1410812]: For example, &quot;0.9.0beta&quot;.
*****************************************************************
========================= CLASS #459 =============================
(5623) <5623> {989620} [990085]: Selecting the Right Locale For most situations, Automatically selecting a locale The seach algorithm used by Zend_Locale for automatic selection of a locale uses three sources of information: const Zend_Locale::BROWSER - The user&#39;s Web browser provides information with each request, which is published by PHP in the global variable HTTP_ACCEPT_LANGUAGE .
(5635) <5635> {991954} [992047]: It is published by PHP in the global variable HTTP_ACCEPT_LANGUAGE .
*****************************************************************
========================= CLASS #460 =============================
(5624) <5624> {990086} [990235]: If no matching locale can be found, then preference is given to ENVIRONMENT and lastly FRAMEWORK .
(5626) <5626> {990429} [990546]: If no matching locale can be found, then preference is given to FRAMEWORK and lastly BROWSER.
(5628) <5628> {990901} [991048]: If no matching locale can be found, then preference is given to ENVIRONMENT and lastly BROWSER .
*****************************************************************
========================= CLASS #461 =============================
(5634) <5634> {991732} [991953]: There are three locales which have a slightly different behaviour: &#39;browser&#39; - Zend_Locale should work with the information which is provided by the user&#39;s Web browser.
(5638) <5638> {992469} [992602]: &#39;environment&#39; - Zend_Locale should work with the information which is provided by the host server.
*****************************************************************
========================= CLASS #462 =============================
(5637) <5637> {992225} [992447]: If the user does not provide a locale or the script is being called from the commandline the automatic locale &#39;environment&#39; will automatically be used and returned.
(5641) <5641> {992856} [992999]: If the host does not provide a locale the automatic locale &#39;browser&#39; will automatically be used and returned.
*****************************************************************
========================= CLASS #463 =============================
(5657) <5657> {994807} [995004]: See the following example for details: Setting a default locale In the case that no locale can be detected, automatically the locale de will be used.
(8264) <8264> {1380442} [1380500]: See the following example for details.
(8268) <8268> {1380859} [1380917]: See the following example for details.
*****************************************************************
========================= CLASS #464 =============================
(5668) <5668> {996690} [996830]: The &#39;number_format&#39; option specifies a default number format for use with toNumber() (see ).
(5700) <5700> {1001210} [1001332]: The &#39;number_format&#39; option explicitly specifies a non-default number format for use with toNumber() .
*****************************************************************
========================= CLASS #465 =============================
(5699) <5699> {1001085} [1001209]: This function will return a localized string of the given number in a conventional format for a specific locale.
(5711) <5711> {1002920} [1002997]: This function will return a localized string of the given number.
*****************************************************************
========================= CLASS #466 =============================
(5736) <5736> {1007204} [1007507]: By default, it automatically logs all items in the event data array: The code above outputs the following XML (space added for clarity): It&#39;s possible to customize the root element as well as specify a mapping of XML elements to the items in the event data array.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #467 =============================
(5841) <5841> {1022304} [1022514]: SMTP Authentication Zend_Mail supports the use of SMTP Authentication, which can be enabled be passing the &#39;auth&#39; parameter to the configuration array in the Zend_Mail_Transport_Smtp constructor.
(5847) <5847> {1023091} [1023281]: This can be enabled be passing the &#39;ssl&#39; parameter to the configuration array in the Zend_Mail_Transport_Smtp constructor with a value of either &#39;ssl&#39; or &#39;tls&#39;.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #468 =============================
(5845) <5845> {1022857} [1022981]: to use CRAM-MD5 you would pass &#39;auth&#39; =&gt; &#39;crammd5&#39; in the Zend_Mail_Transport_Smtp constructor.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #469 =============================
(5870) <5870> {1026746} [1026849]: If you don&#39;t have a multipart message fetching the content is easy done via getContent() .
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #470 =============================
(5889) <5889> {1028868} [1029000]: If you don&#39;t have a Mbox file called INBOX in your Mbox base dir you need to set an other folder in the constructor.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #471 =============================
(5892) <5892> {1029267} [1029443]: It&#39;s returned as instance of Zend_Mail_Storage_Folder , which implements RecursiveIterator and all children are also instances of Zend_Mail_Storage_Folder .
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #472 =============================
(5899) <5899> {1030199} [1030356]: So it&#39;s very easy to output the whole tree in a view: The current selected folders is returned by the method getSelectedFolder() .
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8093) <8093> {1359891} [1359938]: So it&#39;s easy to learn and easy to maintain.
*****************************************************************
========================= CLASS #473 =============================
(5901) <5901> {1030473} [1031054]: If you want to avoid to write delimiters you can also use the properties of a Zend_Mail_Storage_Folder instance: Advanced Use Using NOOP If you&#39;re using a remote storage and have some long tasks you might need to keep the connection alive via noop: Caching instances Zend_Mail_Storage_Mbox , Zend_Mail_Storage_Folder_Mbox , Zend_Mail_Storage_Maildir and Zend_Mail_Storage_Folder_Maildir implement the magic methods __sleep() and __wakeup() , which means they are serializable.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #474 =============================
(5905) <5905> {1031482} [1031609]: It&#39;s better if you have something like a signal file for changes and check it before using the cached instance.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #475 =============================
(5914) <5914> {1032787} [1033064]: It&#39;s disabled by default, but it&#39;s possible to use it manually, if the automatic checks are not desired (this means appendMessage() , removeMessage() and copyMessage() do no checks and do not add entry to the maildirsize file).
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #476 =============================
(5917) <5917> {1033684} [1034053]: It&#39;s also possible to extend Zend_Mail_Storage_Writable_Maildir to define your own quota only if the maildirsize file is missing (which can happen in Maildir++): Creation of Measurements When creating a measurement object, Zend_Measure_* methods expect the input/original measurement data value as the first parameter.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #477 =============================
(6001) <6001> {1044624} [1044700]: The weight of the flowing mass is used as reference point within this class.
(6003) <6003> {1044901} [1044978]: The density of the flowing mass is used as reference point within this class.
(6005) <6005> {1045192} [1045268]: The volume of the flowing mass is used as reference point within this class.
*****************************************************************
========================= CLASS #478 =============================
(6017) <6017> {1047082} [1047151]: The weight of the fluid is used as reference point within this class.
(6019) <6019> {1047390} [1047467]: The distance of the flown fluid is used as reference point within this class.
*****************************************************************
========================= CLASS #479 =============================
(6037) <6037> {1049550} [1049671]: You may use the special name &#39; None &#39; as a backend name, in addition to standard Zend_Cache backends.
(6038) <6038> {1049699} [1049810]: If you use &#39; None &#39; as the backend name, then the memory manager never swaps memory blocks.
(6040) <6040> {1049975} [1050042]: The &#39; None &#39; backend doesn&#39;t need any option specified.
*****************************************************************
========================= CLASS #480 =============================
(6042) <6043> {1050237} [1050613]: Creating Movable Objects Create movable objects (objects, which may be swapped) using the Zend_Memory_Manager::create([$data]) method: The $data argument is optional and used to initialize the object value. If the $data argument is omitted, the value is an empty string.
(6044) <6045> {1050627} [1051008]: Creating Locked Objects Create locked objects (objects, which are not swapped) using the Zend_Memory_Manager::createLocked([$data]) method: The $data argument is optional and used to initialize the object value. If the $data argument is omitted, the value is an empty string.
*****************************************************************
========================= CLASS #481 =============================
(6055) <6055> {1052669} [1052985]: Memory Objects Movable Create movable memory objects using the create([$data]) method of the memory manager: &quot;Movable&quot; means that such objects may be swapped and unloaded from memory and then loaded when application code accesses the object.
(6056) <6056> {1052995} [1053244]: Locked Create locked memory objects using the createLocked([$data]) method of the memory manager: &quot;Locked&quot; means that such objects are never swapped and unloaded from memory.
*****************************************************************
========================= CLASS #482 =============================
(6059) <6059> {1053482} [1053632]: It&#39;s useful if an application or developer can decide, that some objects should never be swapped, based on performance considerations.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #483 =============================
(6073) <6073> {1055429} [1055653]: So, it&#39;s a good idea to use the getRef() method for value data processing: touch() method The touch() method should be used in common with getRef() .
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #484 =============================
(6155) <6155> {1067894} [1068063]: Note this request redirects the end-user&#39;s web browser to an OpenID server site, where users are able to continue the authentication process.
(6160) <6160> {1068957} [1069062]: This response is passed indirectly, as an HTTP redirection of the end-user&#39;s web browser.
*****************************************************************
========================= CLASS #485 =============================
(6165) <6165> {1069728} [1069792]: It doesn&#39;t provide any additional functionality.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #486 =============================
(6180) <6180> {1071480} [1071680]: Authentication Request for Specified Realm The example below only implements the second step of authentication, the first and third steps are the same as in the first example.
(6186) <6186> {1072369} [1072558]: Immediate Check without Interaction The example below only implements the second step of authentication, first and third steps are the same as in the first example.
*****************************************************************
========================= CLASS #487 =============================
(6310) <6310> {1090145} [1090263]: It doesn&#39;t provide GUI for end-user like it should, but performs automatic login and trusting instead.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #488 =============================
(6375) <6375> {1098530} [1098662]: This allows recipients to view the page as intended, even if they don&#39;t have the proper fonts installed on their system.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #489 =============================
(6383) <6383> {1099815} [1100004]: Fonts which can be embedded in the PDF document will be; those that cannot, won&#39;t. Font programs can be rather large, some reaching into the tens of megabytes.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #490 =============================
(6432) <6432> {1106352} [1106384]: It&#39;s a whole page initially.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #491 =============================
(6458) <6458> {1108756} [1108813]: It&#39;s a limitation of V1.0 version of Zend_Pdf module.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #492 =============================
(6462) <6462> {1108995} [1109047]: It&#39;s your choice, which approach should be used.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #493 =============================
(6465) <6465> {1109547} [1109592]: It&#39;s an array of Zend_Pdf_Page objects.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #494 =============================
(6469) <6469> {1109919} [1109994]: It&#39;s useful if you need several pages to be created using one template.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #495 =============================
(6481) <6481> {1111320} [1111745]: Producer - string, optional, if the document was converted to PDF from another format, the name of the application (for example, Acrobat Distiller) that converted it to PDF.. CreationDate - string, optional, the date and time the document was created, in the following form: &quot;D:YYYYMMDDHHmmSSOHH&#39;mm&#39;&quot;, where: YYYY is the year.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #496 =============================
(6485) <6485> {1111933} [1111960]: mm is the minute (00â€“59).
(6486) <6486> {1111990} [1112018]: SS is the second (00â€“59).
*****************************************************************
========================= CLASS #497 =============================
(6488) <6488> {1112229} [1112314]: HH followed by &#39; is the absolute value of the offset from UT in hours (00â€“23).
(6489) <6489> {1112344} [1112431]: mm followed by &#39; is the absolute value of the offset from UT in minutes (00â€“59).
*****************************************************************
========================= CLASS #498 =============================
(6497) <6497> {1113331} [1113496]: For example, December 23, 1998, at 7:52 PM, U.S. Pacific Standard Time, is represented by the string &quot;D:199812231952âˆ’08&#39;00&#39;&quot;.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #499 =============================
(6505) <6505> {1114766} [1114836]: It&#39;s user application responsibility now to keep them syncronized.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #500 =============================
(6604) <6604> {1129451} [1129601]: Nevertheless it&#39;s a good idea not to use &#39; id &#39; and &#39; score &#39; names to avoid ambiguity in QueryHit properties names.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #501 =============================
(6610) <6610> {1130314} [1130389]: Index optimization is a process of merging several segments into a new one.
(6786) <6786> {1154171} [1154235]: Optimization essentially merges several segments into a new one.
*****************************************************************
========================= CLASS #502 =============================
(6628) <6628> {1132623} [1132698]: It&#39;s a best practice not to use more than a half of the allowed memory.
(6653) <6653> {1135430} [1135468]: But it&#39;s also more course-grained.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #503 =============================
(6637) <6637> {1133453} [1133666]: Many small segments may also trigger the &quot;Too many open files&quot; error determined by OS limitations Zend_Search_Lucene keeps each segment file opened to improve search performance.
(6643) <6643> {1134082} [1134147]: This again may trigger the &quot;Too many open files&quot; error.
*****************************************************************
========================= CLASS #504 =============================
(6661) <6661> {1136442} [1136574]: It doesn&#39;t prevent normal index shutdown process, but may prevent accurate error diagnostic if any error occurs during shutdown.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #505 =============================
(6665) <6665> {1136920} [1137040]: Retrieving documents by unique id It&#39;s a common practice to store some unique document id in the index.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #506 =============================
(6672) <6672> {1137635} [1137809]: It&#39;s actually each 128 th The Lucene file format allows you to configure this number, but Zend_Search_Lucene doesn&#39;t expose this in its API.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #507 =============================
(6702) <6702> {1141248} [1141400]: So it&#39;s a good idea to backup large indexes and store changelogs to perform manual restoration and roll-forward operations if necessary.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #508 =============================
(6705) <6705> {1141600} [1141693]: Index files store unicode data in Java&#39;s &quot;modified UTF-8 encoding&quot;.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #509 =============================
(6714) <6714> {1142936} [1143071]: ctype_alpha() is not UTF-8 compatible, so the analyzer converts text to &#39;ASCII//TRANSLIT&#39; encoding before indexing.
(6716) <6716> {1143174} [1143250]: Conversion to &#39;ASCII//TRANSLIT&#39; may depend on current locale and OS.
(6854) <6854> {1163094} [1163177]: Actually, the default analyzer converts text to &#39;ASCII//TRANSLIT&#39; encoding.
*****************************************************************
========================= CLASS #510 =============================
(6728) <6728> {1145032} [1145457]: If you don&#39;t want mbstring extension to be turned on, but need case insensitive search, you may use the following approach: normalize source data before indexing and query string before searching by converting them to lowercase: Extensibility Text Analysis The Zend_Search_Lucene_Analysis_Analyzer class is used by the indexer to tokenize document text fields.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #511 =============================
(6774) <6774> {1152931} [1153092]: It&#39;s actually the overall number of the documents in the index including deleted documents, so it has a synonym: Zend_Search_Lucene::count() .
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #512 =============================
(6795) <6795> {1155294} [1155314]: Default value is 10.
(6810) <6810> {1157057} [1157077]: Default value is 10.
*****************************************************************
========================= CLASS #513 =============================
(6802) <6802> {1156062} [1156209]: With smaller values, less RAM is used while indexing, and searches on unoptimized indices are faster, but indexing speed is slower.
(6803) <6803> {1156210} [1156353]: With larger values, more RAM is used during indexing, and while searches on unoptimized indices are slower, indexing is faster.
*****************************************************************
========================= CLASS #514 =============================
(6815) <6815> {1157655} [1157885]: It&#39;s possible to override this with the Zend_Search_Lucene_Storage_Directory_Filesystem::setDefaultFilePermissions() method: Limitations Index size Index size is limited by 2GB for 32-bit platforms.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #515 =============================
(6878) <6878> {1166227} [1166292]: The &#39;title&#39; field is actually the /html/head/title value.
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #516 =============================
(6879) <6879> {1166293} [1166362]: It&#39;s stored within the index, tokenized and available for search.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #517 =============================
(6881) <6881> {1166465} [1166520]: It doesn&#39;t include scripts, comments or attributes.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #518 =============================
(6883) <6883> {1166681} [1166800]: If it&#39;s set to true, then body content is also stored within index and can be retrieved from the index.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #519 =============================
(6890) <6890> {1167825} [1168086]: Simply use the query parser to construct a query from a string: Query Parser Exceptions The query parser may generate two types of exceptions: Zend_Search_Lucene_Exception is thrown if something goes wrong in the query parser itself.
(7046) <7046> {1190151} [1190233]: The first method uses query parser to construct a query from a string.
*****************************************************************
========================= CLASS #520 =============================
(6892) <6892> {1168232} [1168448]: It&#39;s a good idea to catch Zend_Search_Lucene_Search_QueryParserExceptions and handle it appropriately: The same technique should be used for the find() method of a Zend_Search_Lucene object.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #521 =============================
(6898) <6898> {1169229} [1169340]: Query string: or Query construction by API: The term field is optional.
(6929) <6929> {1173745} [1173891]: Query string: field1:test* or Query construction by API: The term field is optional.
(6933) <6933> {1174492} [1174641]: Query string: field1:test~0.4 or Query construction by API: The term field is optional.
(6964) <6964> {1178602} [1178723]: Query string: or Query construction by API: Term fields are optional.
*****************************************************************
========================= CLASS #522 =============================
(6901) <6905> {1169678} [1170565]: required means that documents not matching this term will not match the query; prohibited means that documents matching this term will not match the query; neither , in which case matched documents are neither prohibited from, nor required to, match the term. A document must match at least 1 term, however, to match the query. If optional terms are added to a query with required terms, both queries will have the same result set but the optional terms may affect the score of the matched documents. Both search methods can be used for multi-term queries. Query string: &#39;+&#39; is used to define a required term.
(6914) <6918> {1171563} [1172481]: required means that documents not matching this subquery will not match the query; prohibited means that documents matching this subquery will not match the query; optional , in which case matched documents are neither prohibited from, nor required to, match the subquery. A document must match at least 1 subquery, however, to match the query. If optional subqueries are added to a query with required suqueries, both queries will have the same result set but the optional suqueries may affect the score of the matched documents. Both search methods can be used for boolean queries. Query string: &#39;+&#39; is used to define a required subquery.
*****************************************************************
========================= CLASS #523 =============================
(6907) <6909> {1170691} [1171134]: &#39;field:&#39; prefix is used to indicate a document field for a search. If it&#39;s omitted, then all fields are searched. or Query construction by API: It&#39;s also possible to specify terms list within MultiTerm query constructor: The $signs array contains information about the term type: true is used to define required term.
(6920) <6922> {1172611} [1173065]: &#39;field:&#39; prefix is used to indicate a document field for a search. If it&#39;s omitted, then all fields are searched. or Query construction by API: It&#39;s also possible to specify subqueries list within Boolean query constructor: The $signs array contains information about the subquery type: true is used to define required subquery.
*****************************************************************
========================= CLASS #524 =============================
(6940) <6940> {1175710} [1175783]: If it&#39;s omitted or equal to null, then an empty query is constructed.
(6942) <6942> {1175911} [1176021]: If it&#39;s omitted or equal to null, then the terms&#39; positions are assumed to be sequential with no gaps.
(6944) <6944> {1176136} [1176209]: If it&#39;s omitted or equal to null, then the default field is searched.
(6946) <6946> {1176349} [1176391]: will search for the phrase &#39;zend ?????
(6948) <6948> {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) <6952> {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) <6953> {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) <6954> {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) <6955> {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6980) <6980> {1180579} [1180608]: It&#39;s the default setting.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #525 =============================
(6983) <6983> {1180925} [1181209]: If you want to find the document entitled &quot;The Right Way&quot; which contains the text &quot;don&#39;t go this way&quot;, you can enter: or Because &quot;text&quot; is the default field, the field indicator is not required.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #526 =============================
(6985) <6985> {1181377} [1181543]: Starting in 1.5, Wildcards Wildcard queries support is available with SVN and latest snapshot versions and doesn&#39;t included into current release.
(6993) <6993> {1182736} [1182977]: Fuzzy search is availably only starting ZF 1.5 Starting in 1.5, Range Searches Range queries support is available with SVN and latest snapshot versions and doesn&#39;t included into current release.
(7000) <7000> {1183554} [1183721]: Starting in 1.5, Fuzzy Searches Fuzzy queries support is available with SVN and latest snapshot versions and doesn&#39;t included into current release.
*****************************************************************
========================= CLASS #527 =============================
(6987) <6987> {1181696} [1181771]: To perform a single character wildcard search use the &quot;?&quot; symbol.
(6988) <6988> {1181794} [1181871]: To perform a multiple character wildcard search use the &quot;*&quot; symbol.
*****************************************************************
========================= CLASS #528 =============================
(7002) <7002> {1183877} [1183968]: To do a fuzzy search use the tilde, &quot;~&quot;, symbol at the end of a Single word Term.
(7008) <7008> {1184616} [1184715]: To do a proximity search use the tilde, &quot;~&quot;, symbol at the end of the phrase.
*****************************************************************
========================= CLASS #529 =============================
(7025) <7026> {1186672} [1187049]: To search for documents that contain &quot;PHP framework&quot; or &quot;Zend Framework&quot; use the query: NOT The NOT operator excludes documents that contain the term after NOT. But an &quot;AND group&quot; which contains only terms with the NOT operator gives an empty result set instead of a full set of indexed documents.
(7032) <7033> {1187801} [1188126]: To search for documents that contain &quot;PHP framework&quot; but not &quot;Zend Framework&quot; use the query: No Operator If no operator is used, then the search behavior is defined by the &quot;default boolean operator&quot;. This is set to OR by default.
*****************************************************************
========================= CLASS #530 =============================
(7027) <7027> {1187080} [1187231]: To search for documents that contain &quot;PHP framework&quot; but not &quot;Zend Framework&quot; use the query: &amp;&amp;, ||, and !
(7028) <7028> {1187232} [1187280]: operators &amp;&amp;, ||, and !
(7032) <7032> {1187801} [1188064]: To search for documents that contain &quot;PHP framework&quot; but not &quot;Zend Framework&quot; use the query: No Operator If no operator is used, then the search behavior is defined by the &quot;default boolean operator&quot;.
*****************************************************************
========================= CLASS #531 =============================
(7100) <7100> {1199166} [1199473]: The Zend_Server_Reflection tree provides a standard mechanism for performing function and class introspection for use as callbacks with the server classes, and provides data suitable for use with Zend_Server_Interface &#39;s getFunctions() and loadFunctions() methods.
(7101) <7101> {1199479} [1199669]: Zend_Server_Reflection Introduction Zend_Server_Reflection provides a standard mechanism for performing function and class introspection for use with server classes.
*****************************************************************
========================= CLASS #532 =============================
(7146) <7146> {1205645} [1205704]: An exception will be raised if the API key used is invalid.
(7152) <7152> {1206425} [1206496]: An exception will be raised if the API key used is invalid.
*****************************************************************
========================= CLASS #533 =============================
(7174) <7174> {1210605} [1210721]: For full details, including a list of available options, please see the relevant Amazon documentation .
(7178) <7178> {1211452} [1211693]: For full details, including a list of available options, please see the relevant Amazon documentation The Zend_Service_Amazon_Query class is an easy to use wrapper around this method.
*****************************************************************
========================= CLASS #534 =============================
(7191) <7191> {1216405} [1216504]: using foreach ), as well as direct access to a specific result using seek() .
(7287) <7287> {1237064} [1237233]: Implements the SeekableIterator interface for easy iteration (e.g., using foreach ), as well as direct access to a specific result using seek() .
*****************************************************************
========================= CLASS #535 =============================
(7192) <7192> {1216522} [1217018]: Zend_Service_Amazon_ResultSet::totalResults() int totalResults Returns the total number of results returned by the search Back to Class List Zend_Service_Amazon_OfferSet Each result returned by Zend_Service_Amazon::itemSearch() and Zend_Service_Amazon::itemLookup() contains a Zend_Service_Amazon_OfferSet object through which pricing information for the item can be retrieved.
(7655) <7655> {1288588} [1288725]: Zend_Service_Yahoo_ResultSet::totalResults() int totalResults Returns the number of results returned for the search.
*****************************************************************
========================= CLASS #536 =============================
(7206) <7206> {1221739} [1222000]: Zend_Service_Audioscrobbler provides several methods for retrieving data specific to a single user: userGetProfileInformation() : Returns a SimpleXML object containing the current user&#39;s profile information.
(7207) <7207> {1222022} [1222164]: userGetTopArtists() : Returns a SimpleXML object containing a list of the current user&#39;s most listened to artists.
(7208) <7208> {1222186} [1222326]: userGetTopAlbums() : Returns a SimpleXML object containing a list of the current user&#39;s most listened to albums.
(7209) <7209> {1222348} [1222488]: userGetTopTracks() : Returns a SimpleXML object containing a list of the current user&#39;s most listened to tracks.
(7210) <7210> {1222510} [1222639]: userGetTopTags() : Returns a SimpleXML object containing a list of tags most applied by the current user.
(7217) <7217> {1223402} [1223532]: userGetFriends() : Returns a SimpleXML object containing the user names of the current user&#39;s friends.
(7222) <7222> {1224254} [1224403]: userGetRecentJournals() : Returns a SimpleXML object containing a list of the current user&#39;s most recent journal entries.
(7231) <7231> {1226011} [1226148]: artistGetTopFans() : Returns a SimpleXML object containing a list of Users who listen most to the current Artist.
(7232) <7232> {1226170} [1226307]: artistGetTopTracks() : Returns a SimpleXML object containing a list of the current Artist&#39;s top-rated Tracks.
(7233) <7233> {1226329} [1226466]: artistGetTopAlbums() : Returns a SimpleXML object containing a list of the current Artist&#39;s top-rated Albums.
(7234) <7234> {1226488} [1226632]: artistGetTopTags() : Returns a SimpleXML object containing a list of the Tags most frequently applied to current Artist.
(7236) <7236> {1227017} [1227163]: trackGetTopTags() : Returns a SimpleXML object containing a list of the Tags most frequently applied to the current Track.
(7238) <7238> {1227525} [1227678]: tagGetTopArtists() : Returns a SimpleXML object containing a list of Artists to whom the current Tag was most frequently applied.
(7239) <7239> {1227700} [1227852]: tagGetTopAlbums() : Returns a SimpleXML object containing a list of Albums to which the current Tag was most frequently applied.
(7240) <7240> {1227874} [1228026]: tagGetTopTracks() : Returns a SimpleXML object containing a list of Tracks to which the current Tag was most frequently applied.
*****************************************************************
========================= CLASS #537 =============================
(7212) <7212> {1222763} [1222889]: Returns a SimpleXML object containing the tags most applied to the current artist by the current user.
(7214) <7214> {1223010} [1223135]: Returns a SimpleXML object containing the tags most applied to the current album by the current user.
(7216) <7216> {1223255} [1223380]: Returns a SimpleXML object containing the tags most applied to the current track by the current user.
*****************************************************************
========================= CLASS #538 =============================
(7220) <7220> {1223898} [1224055]: userGetRecentBannedTracks() : Returns a SimpleXML object containing a list of the 10 tracks most recently banned by the current user.
(7221) <7221> {1224077} [1224232]: userGetRecentLovedTracks() : Returns a SimpleXML object containing a list of the 10 tracks most recently loved by the current user.
(7231) <7231> {1226011} [1226148]: artistGetTopFans() : Returns a SimpleXML object containing a list of Users who listen most to the current Artist.
*****************************************************************
========================= CLASS #539 =============================
(7223) <7230> {1224425} [1225989]: userGetWeeklyChartList() : Returns a SimpleXML object containing a list of weeks for which there exist Weekly Charts for the current user. userGetRecentWeeklyArtistChart() : Returns a SimpleXML object containing the most recent Weekly Artist Chart for the current user. userGetRecentWeeklyAlbumChart() : Returns a SimpleXML object containing the most recent Weekly Album Chart for the current user. userGetRecentWeeklyTrackChart() : Returns a SimpleXML object containing the most recent Weekly Track Chart for the current user. $fromDate to $toDate for the current user. $fromDate to $toDate for the current user. $fromDate to $toDate for the current user. Retrieving User Profile Information In this example, we use the setUser() and userGetProfileInformation() methods to retrieve a specific user&#39;s profile information: Retrieving a User&#39;s Weekly Artist Chart Artists Zend_Service_Audioscrobbler provides several methods for retrieving data about a specific artist, specified via the setArtist() method: artistGetRelatedArtists() : Returns a SimpleXML object containing a list of Artists similar to the current Artist.
(7242) <7249> {1228403} [1229516]: groupGetWeeklyChart() : Returns a SimpleXML object containing a list of weeks for which there exist Weekly Charts for the current Group. groupGetRecentWeeklyArtistChart() : Returns a SimpleXML object containing the most recent Weekly Artist Chart for the current Group. groupGetRecentWeeklyAlbumChart() : Returns a SimpleXML object containing the most recent Weekly Album Chart for the current Group. groupGetRecentWeeklyTrackChart() : Returns a SimpleXML object containing the most recent Weekly Track Chart for the current Group. setFromDate() and setToDate() . Returns a SimpleXML object containing the Weekly Artist Chart from the current fromDate to the current toDate for the current Group. setFromDate() and setToDate() . Returns a SimpleXML object containing the Weekly Album Chart from the current fromDate to the current toDate for the current Group.
*****************************************************************
========================= CLASS #540 =============================
(7281) <7281> {1235523} [1235610]: getIdByUsername() : Returns a string user ID associated with the given username string.
(7282) <7282> {1235628} [1235737]: getIdByEmail() : Returns a string user ID associated with the given email address string.
*****************************************************************
========================= CLASS #541 =============================
(7288) <7288> {1237251} [1237660]: Properties Zend_Service_Flickr_ResultSet Properties Name Type Description totalResultsAvailable int Total Number of Results available totalResultsReturned int Total Number of Results returned firstResultPosition int The offset in the total result set of this result set Zend_Service_Flickr_ResultSet::totalResults() int totalResults Returns the total number of results in this result set.
(7655) <7655> {1288588} [1288725]: Zend_Service_Yahoo_ResultSet::totalResults() int totalResults Returns the number of results returned for the search.
(7656) <7656> {1288743} [1288898]: Properties Zend_Service_Yahoo_ResultSet Name Type Description totalResultsAvailable int Total number of results found.
*****************************************************************
========================= CLASS #542 =============================
(7350) <7350> {1245430} [1245662]: Let&#39;s say you want to call the REST API method RenameFile , which does not have a convenience method in Zend_Service_Nirvanix : Above, a proxy for the IMFS namespace is created.
(8687) <8687> {1445632} [1445686]: Let&#39;s say we want a helper named &#39;fooBar&#39;.
*****************************************************************
========================= CLASS #543 =============================
(7416) <7416> {1257807} [1258180]: To view a SOAP transaction, call the getSoapClient() method to get the SOAPClient instance and then call the appropriate methods like __getLastRequest() and __getLastRequest() : Zend_Service_StrikeIron: Bundled Services Zend_Service_StrikeIron comes with wrapper classes for three popular StrikeIron services.
(7437) <7437> {1261723} [1261770]: Wrappers for three popular StrikeIron services.
*****************************************************************
========================= CLASS #544 =============================
(7417) <7417> {1258186} [1258320]: ZIP Code Information Zend_Service_StrikeIron_ZipCodeInfo provides a client for StrikeIron&#39;s Zip Code Information Service.
(7419) <7419> {1258645} [1258764]: Address Verification Zend_Service_StrikeIron_USAddressVerification provides a client for StrikeIron&#39;s U.S.
*****************************************************************
========================= CLASS #545 =============================
(7418) <7418> {1258322} [1258644]: For more information on this service, visit these StrikeIron resources: Zip Code Information Service Page Zip Code Information Service WSDL The service contains a getZipCode() method that will retrieve information about a United States ZIP code or Canadian postal code: U.S.
(7421) <7421> {1258796} [1258890]: For more information on this service, visit these StrikeIron resources: U.S.
*****************************************************************
========================= CLASS #546 =============================
(7423) <7423> {1258930} [1259249]: Address Verification Service WSDL The service contains a verifyAddressUSA() method that will verify an address in the United States: Sales &amp; Use Tax Basic Zend_Service_StrikeIron_SalesUseTaxBasic provides a client for StrikeIron&#39;s Sales &amp; Use Tax Basic service.
(7452) <7452> {1263936} [1264043]: getService() method is used to return a client to the Sales &amp; Use Tax Basic service.
*****************************************************************
========================= CLASS #547 =============================
(7524) <7524> {1273529} [1273595]: For full details please see the API reference guide .
(7560) <7560> {1279101} [1279208]: For full details please see Zend_Service_Technorati in the API reference guide .
(7628) <7628> {1286191} [1286243]: For full details, please see the Yahoo!
(7634) <7634> {1286489} [1286541]: For full details, please see the Yahoo!
(7640) <7640> {1286810} [1286862]: For full details, please see the Yahoo!
(7646) <7646> {1287170} [1287222]: For full details, please see the Yahoo!
*****************************************************************
========================= CLASS #548 =============================
(7527) <7527> {1274029} [1274138]: For full details please see Zend_Service_Technorati::cosmos() in the API reference guide .
(7530) <7530> {1274385} [1274494]: For full details please see Zend_Service_Technorati::search() in the API reference guide .
(7533) <7533> {1274734} [1274840]: For full details please see Zend_Service_Technorati::tag() in the API reference guide .
(7536) <7536> {1275107} [1275221]: For full details please see Zend_Service_Technorati::dailyCounts() in the API reference guide .
(7539) <7539> {1275474} [1275584]: For full details please see Zend_Service_Technorati::topTags() in the API reference guide .
(7542) <7542> {1275855} [1275966]: For full details please see Zend_Service_Technorati::blogInfo() in the API reference guide .
(7545) <7545> {1276232} [1276347]: For full details please see Zend_Service_Technorati::blogPostTags() in the API reference guide .
(7548) <7548> {1276600} [1276710]: For full details please see Zend_Service_Technorati::getInfo() in the API reference guide .
(7551) <7551> {1276934} [1277043]: For full details please see Zend_Service_Technorati::keyInfo() in the API reference guide .
(7560) <7560> {1279101} [1279208]: For full details please see Zend_Service_Technorati in the API reference guide .
(7628) <7628> {1286191} [1286243]: For full details, please see the Yahoo!
(7634) <7634> {1286489} [1286541]: For full details, please see the Yahoo!
(7640) <7640> {1286810} [1286862]: For full details, please see the Yahoo!
(7646) <7646> {1287170} [1287222]: For full details, please see the Yahoo!
*****************************************************************
========================= CLASS #549 =============================
(7538) <7538> {1275381} [1275473]: It returns a Zend_Service_Technorati_TagsResultSet object.
(7544) <7544> {1276139} [1276231]: It returns a Zend_Service_Technorati_TagsResultSet object.
*****************************************************************
========================= CLASS #550 =============================
(7553) <7554> {1277172} [1277570]: Each Zend_Service_Technorati_*ResultSet class holds a type-specific result set which can be easily iterated, with each result being contained in a type result object. All result set classes extend Zend_Service_Technorati_ResultSet class and implement the SeekableIterator interface, allowing for easy iteration and seeking to a specific result.
(7651) <7652> {1287440} [1287744]: Each search type returns a type-specific result set which can be easily iterated, with each result being contained in a type result object. All result set classes implement the SeekableIterator interface, allowing for easy iteration and seeking to a specific result.
*****************************************************************
========================= CLASS #551 =============================
(7578) <7579> {1281709} [1281981]: It is never returned as a standalone object, but it always belongs to a valid Zend_Service_Technorati_CosmosResultSet object. Zend_Service_Technorati_CosmosResult extends Zend_Service_Technorati_Result .
(7581) <7582> {1282149} [1282421]: It is never returned as a standalone object, but it always belongs to a valid Zend_Service_Technorati_SearchResultSet object. Zend_Service_Technorati_SearchResult extends Zend_Service_Technorati_Result .
(7584) <7585> {1282580} [1282846]: It is never returned as a standalone object, but it always belongs to a valid Zend_Service_Technorati_TagResultSet object. Zend_Service_Technorati_TagResult extends Zend_Service_Technorati_Result .
(7587) <7588> {1283029} [1283311]: It is never returned as a standalone object, but it always belongs to a valid Zend_Service_Technorati_DailyCountsResultSet object. Zend_Service_Technorati_DailyCountsResult extends Zend_Service_Technorati_Result .
(7590) <7591> {1283492} [1283761]: It is never returned as a standalone object, but it always belongs to a valid Zend_Service_Technorati_TagsResultSet object. Zend_Service_Technorati_TagsResult extends Zend_Service_Technorati_Result .
*****************************************************************
========================= CLASS #552 =============================
(7607) <7607> {1284788} [1284817]: Searching the Web with Yahoo!
(7613) <7613> {1285250} [1285279]: Searching the Web with Yahoo!
*****************************************************************
========================= CLASS #553 =============================
(7608) <7608> {1284818} [1284879]: Zend_Service_Yahoo enables you to search the Web with Yahoo!
(7613) <7613> {1285250} [1285279]: Searching the Web with Yahoo!
*****************************************************************
========================= CLASS #554 =============================
(7609) <7611> {1284880} [1285151]: using the webSearch() method, which accepts a string query parameter and an optional second parameter as an array of search options. For full details and an option list, please visit the Yahoo! Web Search Documentation .
(7616) <7618> {1285426} [1285684]: This method accepts a string query parameter and an optional array of search options, as for the webSearch() method . For full details and an option list, please visit the Yahoo! Image Search Documentation .
*****************************************************************
========================= CLASS #555 =============================
(7614) <7614> {1285280} [1285306]: Finding Images with Yahoo!
(7619) <7619> {1285694} [1285720]: Finding Images with Yahoo!
*****************************************************************
========================= CLASS #556 =============================
(7620) <7620> {1285721} [1285747]: Finding videos with Yahoo!
(7624) <7624> {1285991} [1286017]: Finding videos with Yahoo!
*****************************************************************
========================= CLASS #557 =============================
(7625) <7626> {1286018} [1286141]: Finding Local Businesses and Services with Yahoo! You can search for local businesses and services with Yahoo!
(7630) <7631> {1286294} [1286360]: Finding Local Businesses and Services with Yahoo! Searching Yahoo!
*****************************************************************
========================= CLASS #558 =============================
(7632) <7632> {1286361} [1286395]: News Searching Yahoo!
(7637) <7637> {1286608} [1286629]: News Searching Yahoo!
*****************************************************************
========================= CLASS #559 =============================
(7638) <7638> {1286630} [1286687]: Site Explorer Inbound Links Searching Yahoo!
(7641) <7641> {1286875} [1286918]: Site Explorer Inbound Links Documentation .
(7643) <7643> {1286945} [1286989]: Site Explorer Inbound Links Searching Yahoo!
*****************************************************************
========================= CLASS #560 =============================
(7639) <7639> {1286688} [1286809]: Site Explorer Inbound Links is simple; just use the inlinkDataSearch() method, as in the following example.
(7641) <7641> {1286875} [1286918]: Site Explorer Inbound Links Documentation .
*****************************************************************
========================= CLASS #561 =============================
(7782) <7782> {1313254} [1313483]: string save_path - The correct value is system dependent, and should be provided by the developer using an absolute path to a directory readable and writable by the PHP process.
(7792) <7792> {1315821} [1315981]: string name - The correct value is system dependent and should be provided by the developer using a value unique to the application.
*****************************************************************
========================= CLASS #562 =============================
(7799) <7799> {1317410} [1317771]: Error: Headers Already Sent If you see the error message, &quot;Cannot modify header information - headers already sent&quot;, or, &quot;You must call ... before any output has been sent to the browser; output started in ...&quot;, then carefully examine the immediate cause (function or method) associated with the message.
(7862) <7862> {1328806} [1329049]: If you see the error message, &quot;Cannot modify header information - headers already sent&quot;, then either avoid using true as the value for the first argument (requesting removal of the session cookie), or see .
*****************************************************************
========================= CLASS #563 =============================
(7802) <7802> {1318130} [1318368]: For example, in php.ini , &quot; Alternatively, try rearranging the application logic so that actions manipulating headers are performed prior to sending any output whatsoever.
(7806) <7806> {1318911} [1319078]: Alternatively, try rearranging the application logic so that all actions manipulating headers are performed prior to sending any output whatsoever.
*****************************************************************
========================= CLASS #564 =============================
(7865) <7865> {1329371} [1329534]: Throws By default, $readonly is enabled and further actions involving writing to the session data store will throw an exception.
(7873) <7873> {1330548} [1330711]: Throws By default, $readonly is enabled and further actions involving writing to the session data store will throw an exception.
*****************************************************************
========================= CLASS #565 =============================
(7881) <7881> {1331588} [1331857]: Throws An exception will be thrown if Zend_Session is not marked as readable (e.g., before namespaceUnset($namespace) Use Zend_Session::namespaceUnset($namespace) to efficiently remove an entire namespace and its contents.
(7891) <7891> {1333221} [1333380]: Throws An exception will be thrown if Zend_Session is not marked as readable (e.g., before Zend_Session has been started).
*****************************************************************
========================= CLASS #566 =============================
(7889) <7889> {1332848} [1333092]: Actually, all participation on any relevant topic is welcome :) Throws An exception will be thrown if Zend_Session is not marked as readable (e.g., before Zend_Session has been started).
(7891) <7891> {1333221} [1333380]: Throws An exception will be thrown if Zend_Session is not marked as readable (e.g., before Zend_Session has been started).
*****************************************************************
========================= CLASS #567 =============================
(7987) <7987> {1346001} [1346051]: NTP uses UDP port 123 as it&#39;s transport layer.
(7991) <7991> {1346327} [1346377]: SNTP uses UDP port 37 as it&#39;s transport layer.
*****************************************************************
========================= CLASS #568 =============================
(8031) <8031> {1352012} [1352116]: The Zend_Translate Gettext Adapter is not implemented using PHP&#39;s gettext extension.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #569 =============================
(8040) <8041> {1353146} [1353320]: TBX is a XML file based format and a completly new format. XML files are human-readable, but the parsing is not as fast as with gettext files.
(8050) <8051> {1354404} [1354550]: QT is a XML file based format. XML files are human-readable, but the parsing is not as fast as with gettext files.
*****************************************************************
========================= CLASS #570 =============================
(8043) <8043> {1353469} [1353521]: The files are human readable and system-independent.
(8048) <8048> {1354149} [1354201]: The files are human readable and system-independent.
(8053) <8053> {1354660} [1354712]: The files are human readable and system-independent.
(8058) <8058> {1355286} [1355338]: The files are human readable and system-independent.
(8063) <8063> {1355922} [1355974]: The files are human readable and system-independent.
*****************************************************************
========================= CLASS #571 =============================
(8045) <8045> {1353837} [1353937]: TMX is a XML file based format, which is announced to be the next industry standard.
(8050) <8050> {1354404} [1354434]: QT is a XML file based format.
*****************************************************************
========================= CLASS #572 =============================
(8046) <8047> {1353954} [1354132]: XML files are human-readable, but the parsing is not as fast as with gettext files. Most medium to large companies use this adapter.
(8056) <8057> {1355100} [1355269]: XML files are human-readable, but the parsing is not as fast as with gettext files. Most medium companies use this adapter.
*****************************************************************
========================= CLASS #573 =============================
(8051) <8051> {1354451} [1354550]: XML files are human-readable, but the parsing is not as fast as with gettext files.
(8056) <8056> {1355100} [1355199]: XML files are human-readable, but the parsing is not as fast as with gettext files.
*****************************************************************
========================= CLASS #574 =============================
(8055) <8055> {1354950} [1355083]: XLIFF is a XML file based format, which is related to TMX but simpler as it does not support all possibilities of it.
(8061) <8061> {1355704} [1355810]: XLIFF is a XML file based format, which is related to XLIFF but its not as simple to read.
*****************************************************************
========================= CLASS #575 =============================
(8085) <8085> {1358834} [1358998]: Gettext is not thread-safe: PHP&#39;s gettext library is not thread safe, and it should not be used in a multithreaded environment.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #576 =============================
(8136) <8138> {1364917} [1365335]: The following structures are preferable: Single structured source Positive: All source files for every languages can be found in one directory. No splitting of related files. Language structured source Positive: Every language is based in one directory.
(8141) <8143> {1365563} [1365888]: Application structured source Positive: All source files for every languages can be found in one directory. No splitting of related files. Negative: Having multiple files for the same language is problematic.
*****************************************************************
========================= CLASS #577 =============================
(8157) <8157> {1367537} [1367662]: See the following example for details: Files which do not return an array will fail to be included.
(8264) <8264> {1380442} [1380500]: See the following example for details.
(8268) <8268> {1380859} [1380917]: See the following example for details.
*****************************************************************
========================= CLASS #578 =============================
(8159) <8159> {1367757} [1367862]: Creating Gettext Source Files Gettext source files are created by GNU&#39;s gettext library.
(8165) <8165> {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #579 =============================
(8191) <8191> {1371229} [1371381]: See the following example for details Example CSV file two Options for adapters Options can be used with all adapters.
(8264) <8264> {1380442} [1380500]: See the following example for details.
(8268) <8268> {1380859} [1380917]: See the following example for details.
*****************************************************************
========================= CLASS #580 =============================
(8227) <8227> {1375376} [1375632]: See the following example for details: How automatically language detection works After setting a language manually with the setLocale() method the automatically detection will be switched off and overridden.
(8264) <8264> {1380442} [1380500]: See the following example for details.
(8268) <8268> {1380859} [1380917]: See the following example for details.
*****************************************************************
========================= CLASS #581 =============================
(8245) <8245> {1377943} [1378079]: Zend_Translate needs the &#39;scan&#39; option to know that it should search the names of all directories for languages.
(8256) <8256> {1379206} [1379312]: To use this way of detection you will have to set the &#39;scan&#39; option at initiation.
*****************************************************************
========================= CLASS #582 =============================
(8246) <8246> {1378080} [1378272]: See the following example for details: Directory scanning for languages This works only for adapters which do not include the language within the source file.
(8264) <8264> {1380442} [1380500]: See the following example for details.
(8268) <8268> {1380859} [1380917]: See the following example for details.
*****************************************************************
========================= CLASS #583 =============================
(8279) <8279> {1381980} [1382123]: Additionally the getMessages() method is able to return the complete translation dictionary with the pseudo-locale &#39;all&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #584 =============================
(8293) <8293> {1383648} [1383802]: If the scheme or URI passed is supported, Zend_Uri::factory() will return a subclass of itself that specializes in the scheme to be created.
(8297) <8297> {1384119} [1384246]: Otherwise, Zend_Uri::factory() will return a subclass of itself that specializes in the scheme to be manipulated.
*****************************************************************
========================= CLASS #585 =============================
(8311) <8311> {1386070} [1386234]: Basic usage A basic example of usage is below: $email and on failure populate $validator-&gt;getMessages() with useful error messages.
(8341) <8341> {1389717} [1389884]: Basic usage A basic example of usage is below: $hostname and on failure populate $validator-&gt;getMessages() with useful error messages.
*****************************************************************
========================= CLASS #586 =============================
(8316) <8316> {1386770} [1386926]: By default only DNS hostnames of the form domain.com are accepted, though if you wish you can accept IP addresses and Local hostnames too.
(8340) <8340> {1389661} [1389711]: By default only DNS hostnames are matched.
*****************************************************************
========================= CLASS #587 =============================
(8327) <8327> {1388436} [1388493]: This is known as International Domain Name (IDN) support.
(8349) <8349> {1391069} [1391121]: These are known as International Domain Names (IDN).
*****************************************************************
========================= CLASS #588 =============================
(8328) <8331> {1388494} [1388983]: This is enabled by default, though you can disable this by changing the setting via the internal Zend_Validate_Hostname object that exists within Zend_Validate_EmailAddress . setValidateIdn() appears in the Zend_Validate_Hostname documentation. Please note IDNs are only validated if you allow DNS hostnames to be validated. Validating Top Level Domains By default a hostname will be checked against a list of known TLDs.
(8332) <8335> {1388984} [1389481]: This is enabled by default, though you can disable this by changing the setting via the internal Zend_Validate_Hostname object that exists within Zend_Validate_EmailAddress . setValidateTld() appears in the Zend_Validate_Hostname documentation. Please note TLDs are only validated if you allow DNS hostnames to be validated. Hostname Zend_Validate_Hostname allows you to validate a hostname against a set of known specifications.
*****************************************************************
========================= CLASS #589 =============================
(8352) <8352> {1391604} [1391802]: If you wish to disable IDN validation this can be done by by either passing a parameter to the Zend_Validate_Hostname constructor or via the $validator-&gt;setValidateIdn() method.
(8354) <8354> {1391960} [1392029]: $validator-&gt;setValidateIdn() to enable or disable IDN validation.
*****************************************************************
========================= CLASS #590 =============================
(8353) <8353> {1391817} [1391949]: You can disable IDN validation by passing a second parameter to the Zend_Validate_Hostname constructor in the following way.
(8360) <8360> {1392693} [1392795]: You can disable TLD validation by passing a third parameter to the Zend_Validate_Hostname constructor.
*****************************************************************
========================= CLASS #591 =============================
(8365) <8366> {1393205} [1393405]: Alnum Returns true if and only if $value contains only alphabetic and digit characters. This validator includes an option to also consider white space characters as valid.
(8367) <8368> {1393415} [1393605]: Alpha Returns true if and only if $value contains only alphabetic characters. This validator includes an option to also consider white space characters as valid.
*****************************************************************
========================= CLASS #592 =============================
(8375) <8375> {1394741} [1394829]: Date Returns true if $value is a valid date of the format YYYY-MM-DD .
(8385) <8385> {1395776} [1395851]: Int Returns true if and only if $value is a valid integer.
*****************************************************************
========================= CLASS #593 =============================
(8381) <8382> {1395333} [1395543]: GreaterThan Returns true if and only if $value is greater than the minimum boundary. Hex Returns true if and only if $value contains only hexadecimal digit characters.
(8387) <8388> {1395948} [1396136]: LessThan Returns true if and only if $value is less than the maximum boundary. NotEmpty Returns true if and only if $value is not an empty value.
*****************************************************************
========================= CLASS #594 =============================
(8459) <8459> {1407403} [1407494]: Other tokens may be supported on a case-by-case basis in each validation class.
(8469) <8469> {1408861} [1408956]: Other properties may be supported on a case-by-case basis in each validation class.
*****************************************************************
========================= CLASS #595 =============================
(8505) <8506> {1414725} [1415055]: For example, if your controller script is at &quot;/path/to/app/controllers&quot; and it calls $view-&gt;render(&#39;someView.php&#39;), Zend_View will look for &quot;/path/to/app/controllers/someView.php&quot;. Obviously, your view scripts are probably located elsewhere.
(8508) <8509> {1415192} [1415434]: Now when you call $view-&gt;render(&#39;someView.php&#39;), it will look for &quot;/path/to/app/views/someView.php&quot;. In fact, you can &quot;stack&quot; paths using the addScriptPath() method.
*****************************************************************
========================= CLASS #596 =============================
(8510) <8510> {1415435} [1415572]: As you add paths to the stack, Zend_View will look at the most-recently-added path for the requested view script.
(8735) <8735> {1453167} [1453307]: As you add paths to the stack, Zend_View will look at the most-recently-added path for the requested helper class.
*****************************************************************
========================= CLASS #597 =============================
(8519) <8519> {1417333} [1417432]: The Doctype helper is a concrete implementation of the Placeholder helper .
(8528) <8528> {1419436} [1419536]: The HeadLink helper is a concrete implementation of the Placeholder helper .
(8540) <8540> {1421661} [1421761]: The HeadMeta helper is a concrete implementation of the Placeholder helper .
(8555) <8555> {1424535} [1424637]: The HeadScript helper is a concrete implementation of the Placeholder helper .
(8579) <8579> {1429160} [1429261]: The HeadStyle helper is a concrete implementation of the Placeholder helper .
(8587) <8587> {1431061} [1431162]: The HeadTitle helper is a concrete implementation of the Placeholder helper .
*****************************************************************
========================= CLASS #598 =============================
(8520) <8520> {1417438} [1417518]: Doctype Helper Basic Usage You may specify the doctype at any time.
(8529) <8529> {1419542} [1419624]: HeadLink Helper Basic Usage You may specify a headLink at any time.
*****************************************************************
========================= CLASS #599 =============================
(8532) <8532> {1419907} [1420109]: HeadMeta Helper The HTML &lt;meta&gt; element is used to provide meta information about your HTML document -- typically keywords, document character set, caching pragmas, etc.
(8585) <8585> {1430802} [1430917]: HeadTitle Helper The HTML &lt;title&gt; element is used to provide a title for an HTML document.
*****************************************************************
========================= CLASS #600 =============================
(8535) <8535> {1420766} [1421016]: You may also set meta tags using the headMeta() helper method, which has the following signature: $keyValue is the content for the key specified in $keyType , which should be either &#39;name&#39; or &#39;http-equiv&#39;.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #601 =============================
(8536) <8536> {1421018} [1421204]: $placement can be either &#39;SET&#39; (overwrites all previously stored values), &#39;APPEND&#39; (added to end of stack), or &#39;PREPEND&#39; (added to top of stack).
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #602 =============================
(8537) <8539> {1421210} [1421646]: HeadMeta overrides each of append() , offsetSet() , prepend() , and set() to enforce usage of the special methods as listed above. Internally, it stores each item as a stdClass token, which it later serializes using the itemToString() method. This allows you to perform checks on the items in the stack, and optionally modify these items by simply modifying the object returned.
(8552) <8554> {1424082} [1424520]: HeadScript overrides each of append() , offsetSet() , prepend() , and set() to enforce usage of the special methods as listed above. Internally, it stores each item as a stdClass token, which it later serializes using the itemToString() method. This allows you to perform checks on the items in the stack, and optionally modify these items by simply modifying the object returned.
(8576) <8578> {1428708} [1429145]: HeadStyle overrides each of append() , offsetSet() , prepend() , and set() to enforce usage of the special methods as listed above. Internally, it stores each item as a stdClass token, which it later serializes using the itemToString() method. This allows you to perform checks on the items in the stack, and optionally modify these items by simply modifying the object returned.
*****************************************************************
========================= CLASS #603 =============================
(8543) <8545> {1421957} [1423276]: For instance, if you wish to specify SEO keywords, you&#39;d be creating a meta name tag with the name &#39;keywords&#39; and the content the keywords you wish to associate with your page: If you wishedto set some client-side caching rules, you&#39;d set http-equiv tags with the rules you wish to enforce: Another popular use for meta tags is setting the content type, character set, and language: As a final example, an easy way to display a transitional message before a redirect is using a &quot;meta refresh&quot;: When you&#39;re ready to place your meta tags in the layout, simply echo the helper: HeadScript Helper The HTML &lt;script&gt; element is used to either provide inline client-side scripting elements or link to a remote resource containing client-side scripting code. The HeadScript helper allows you to manage both. The HeadScript helper supports the following methods for setting and adding scripts: In the case of the *File() methods, $src is the remote location of the script to load; this is usually in the form of a URL or a path.
(8591) <8593> {1431689} [1432248]: When you&#39;re finally ready to render the title in your layout script, simply echo the helper: InlineScript Helper The HTML &lt;script&gt; element is used to either provide inline client-side scripting elements or link to a remote resource containing client-side scripting code. The InlineScript helper allows you to manage both. It is derived from HeadScript , and any method of that helper is available; however, use the inlineScript() method in place of headScript() .
*****************************************************************
========================= CLASS #604 =============================
(8548) <8548> {1423579} [1423641]: The usage for this will be showed in an example below.
(8574) <8574> {1428410} [1428472]: The usage for this will be showed in an example below.
*****************************************************************
========================= CLASS #605 =============================
(8549) <8549> {1423656} [1423904]: Finally, you can also use the headScript() method to quickly add script elements; the signature for this is $mode is either &#39;FILE&#39; or &#39;SCRIPT&#39;, depending on if you&#39;re linking a script or defining one.
(8551) <8551> {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) <8565> {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) <8575> {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) <8583> {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #606 =============================
(8556) <8558> {1424643} [1425188]: Use InlineScript for HTML Body Scripts HeadScript &#39;s sibling helper, InlineScript , should be used when you wish to include scripts inline in the HTML body . Placing scripts at the end of your document is a good practice for speeding up delivery of your page, particularly when using 3rd party analytics scripts. Arbitrary Attributes are Disabled by Default By default, HeadScript only will render &lt;script&gt; attributes that are blessed by the W3C.
(8594) <8596> {1432254} [1432713]: Use InlineScript for HTML Body Scripts InlineScript , should be used when you wish to include scripts inline in the HTML body . Placing scripts at the end of your document is a good practice for speeding up delivery of your page, particularly when using 3rd party analytics scripts. Some JS libraries need to be included in the HTML head ; use HeadScript for those scripts.
*****************************************************************
========================= CLASS #607 =============================
(8563) <8564> {1426398} [1426779]: While you could use string concatenation, heredocs, and the like, often it&#39;s easier just to do so by creating the script and sprinkling in PHP tags. HeadScript lets you do just that, capturing it to the stack: The following assumptions are made: The script will be appended to the stack.
(8581) <8582> {1429937} [1430329]: While you could use string concatenation, heredocs, and the like, often it&#39;s easier just to do so by creating the styles and sprinkling in PHP tags. HeadStyle lets you do just that, capturing it to the stack: The following assumptions are made: The style declarations will be appended to the stack.
*****************************************************************
========================= CLASS #608 =============================
(8630) <8631> {1437923} [1438215]: In addition, it offers a variety of methods for formatting the content stored in the container: setPrefix($prefix) sets text with which to prefix the content. Use getPrefix() at any time to determine what the current setting is.
(8632) <8633> {1438229} [1438406]: setPostfix($prefix) sets text with which to append the content. Use getPostfix() at any time to determine what the current setting is.
*****************************************************************
========================= CLASS #609 =============================
(8635) <8635> {1438516} [1438610]: Use getSeparator() at any time to determine what the current setting is.
(8638) <8638> {1438867} [1438958]: Use getIndent() at any time to determine what the current setting is.
*****************************************************************
========================= CLASS #610 =============================
(8688) <8688> {1445695} [1446008]: By default, the class is prefixed with &#39;Zend_View_Helper_&#39; (you can specify a custom prefix when setting a helper path), and the last segment of the class name is the helper name; this segment should be TitleCapped; the full class name is then: Zend_View_Helper_FooBar .
(8733) <8733> {1452960} [1453055]: By default, if no class prefix is provided, &#39;Zend_View_Helper_&#39; is assumed.
*****************************************************************
========================= CLASS #611 =============================
(8714) <8714> {1450210} [1450656]: You can specify alternate opening, closing, and separator content when rendering the errors by calling several methods on the helper: setElementStart($string) ; default is &#39;&lt;ul class=&quot;errors&quot;%s&quot;&gt;&lt;li&gt;&#39;, where %s is replaced with the attributes as specified in $options .
(8715) <8715> {1450678} [1450780]: setElementSeparator($string) ; default is &#39;&lt;/li&gt;&lt;li&gt;&#39;.
(8716) <8716> {1450802} [1450899]: setElementEnd($string) ; default is &#39;&lt;/li&gt;&lt;/ul&gt;&#39;.
*****************************************************************
========================= CLASS #612 =============================
(8806) <8806> {1464597} [1464884]: XML-RPC is designed to be as simple as possible, while allowing complex data structures to be transmitted, processed and returned.&quot; The Zend Framework provides support for both consuming remote XML-RPC services and building new XML-RPC servers.
(8807) <8807> {1464890} [1465081]: Zend_XmlRpc_Client Introduction The Zend Framework provides support for consuming remote XML-RPC services as a client in the Zend_XmlRpc_Client package.
*****************************************************************
========================= CLASS #613 =============================
(8820) <8820> {1467012} [1467181]: A Zend_XmlRpc_Response object for the return value will also be available by calling the getLastResponse() method after the call.
(8852) <8852> {1473878} [1474017]: A Zend_XmlRpc_Response object containing the fault will also be available by calling getLastResponse() .
*****************************************************************
